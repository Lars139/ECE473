
mega48.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001b  00800100  00800100  000004b2  2**0
                  ALLOC
  2 .stab         000019ec  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d29  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6a c0       	rjmp	.+212    	; 0xd6 <__ctors_end>
   2:	84 c0       	rjmp	.+264    	; 0x10c <__bad_interrupt>
   4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
   6:	82 c0       	rjmp	.+260    	; 0x10c <__bad_interrupt>
   8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
   a:	80 c0       	rjmp	.+256    	; 0x10c <__bad_interrupt>
   c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
   e:	7e c0       	rjmp	.+252    	; 0x10c <__bad_interrupt>
  10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
  12:	7c c0       	rjmp	.+248    	; 0x10c <__bad_interrupt>
  14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
  16:	7a c0       	rjmp	.+244    	; 0x10c <__bad_interrupt>
  18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
  1a:	78 c0       	rjmp	.+240    	; 0x10c <__bad_interrupt>
  1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
  1e:	76 c0       	rjmp	.+236    	; 0x10c <__bad_interrupt>
  20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
  22:	74 c0       	rjmp	.+232    	; 0x10c <__bad_interrupt>
  24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
  26:	72 c0       	rjmp	.+228    	; 0x10c <__bad_interrupt>
  28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
  2a:	70 c0       	rjmp	.+224    	; 0x10c <__bad_interrupt>
  2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
  2e:	6e c0       	rjmp	.+220    	; 0x10c <__bad_interrupt>
  30:	de c0       	rjmp	.+444    	; 0x1ee <__vector_24>
  32:	6c c0       	rjmp	.+216    	; 0x10c <__bad_interrupt>
  34:	18 c1       	rjmp	.+560    	; 0x266 <__vector_24+0x78>
  36:	ef c0       	rjmp	.+478    	; 0x216 <__vector_24+0x28>
  38:	ee c0       	rjmp	.+476    	; 0x216 <__vector_24+0x28>
  3a:	ed c0       	rjmp	.+474    	; 0x216 <__vector_24+0x28>
  3c:	ec c0       	rjmp	.+472    	; 0x216 <__vector_24+0x28>
  3e:	eb c0       	rjmp	.+470    	; 0x216 <__vector_24+0x28>
  40:	ea c0       	rjmp	.+468    	; 0x216 <__vector_24+0x28>
  42:	e9 c0       	rjmp	.+466    	; 0x216 <__vector_24+0x28>
  44:	10 c1       	rjmp	.+544    	; 0x266 <__vector_24+0x78>
  46:	e7 c0       	rjmp	.+462    	; 0x216 <__vector_24+0x28>
  48:	e6 c0       	rjmp	.+460    	; 0x216 <__vector_24+0x28>
  4a:	e5 c0       	rjmp	.+458    	; 0x216 <__vector_24+0x28>
  4c:	e4 c0       	rjmp	.+456    	; 0x216 <__vector_24+0x28>
  4e:	e3 c0       	rjmp	.+454    	; 0x216 <__vector_24+0x28>
  50:	e2 c0       	rjmp	.+452    	; 0x216 <__vector_24+0x28>
  52:	e1 c0       	rjmp	.+450    	; 0x216 <__vector_24+0x28>
  54:	12 c1       	rjmp	.+548    	; 0x27a <__vector_24+0x8c>
  56:	df c0       	rjmp	.+446    	; 0x216 <__vector_24+0x28>
  58:	de c0       	rjmp	.+444    	; 0x216 <__vector_24+0x28>
  5a:	dd c0       	rjmp	.+442    	; 0x216 <__vector_24+0x28>
  5c:	dc c0       	rjmp	.+440    	; 0x216 <__vector_24+0x28>
  5e:	db c0       	rjmp	.+438    	; 0x216 <__vector_24+0x28>
  60:	da c0       	rjmp	.+436    	; 0x216 <__vector_24+0x28>
  62:	d9 c0       	rjmp	.+434    	; 0x216 <__vector_24+0x28>
  64:	d8 c0       	rjmp	.+432    	; 0x216 <__vector_24+0x28>
  66:	d7 c0       	rjmp	.+430    	; 0x216 <__vector_24+0x28>
  68:	d6 c0       	rjmp	.+428    	; 0x216 <__vector_24+0x28>
  6a:	d5 c0       	rjmp	.+426    	; 0x216 <__vector_24+0x28>
  6c:	d4 c0       	rjmp	.+424    	; 0x216 <__vector_24+0x28>
  6e:	d3 c0       	rjmp	.+422    	; 0x216 <__vector_24+0x28>
  70:	d2 c0       	rjmp	.+420    	; 0x216 <__vector_24+0x28>
  72:	d1 c0       	rjmp	.+418    	; 0x216 <__vector_24+0x28>
  74:	02 c1       	rjmp	.+516    	; 0x27a <__vector_24+0x8c>
  76:	cf c0       	rjmp	.+414    	; 0x216 <__vector_24+0x28>
  78:	ce c0       	rjmp	.+412    	; 0x216 <__vector_24+0x28>
  7a:	cd c0       	rjmp	.+410    	; 0x216 <__vector_24+0x28>
  7c:	cc c0       	rjmp	.+408    	; 0x216 <__vector_24+0x28>
  7e:	cb c0       	rjmp	.+406    	; 0x216 <__vector_24+0x28>
  80:	ca c0       	rjmp	.+404    	; 0x216 <__vector_24+0x28>
  82:	c9 c0       	rjmp	.+402    	; 0x216 <__vector_24+0x28>
  84:	c8 c0       	rjmp	.+400    	; 0x216 <__vector_24+0x28>
  86:	c7 c0       	rjmp	.+398    	; 0x216 <__vector_24+0x28>
  88:	c6 c0       	rjmp	.+396    	; 0x216 <__vector_24+0x28>
  8a:	c5 c0       	rjmp	.+394    	; 0x216 <__vector_24+0x28>
  8c:	c4 c0       	rjmp	.+392    	; 0x216 <__vector_24+0x28>
  8e:	c3 c0       	rjmp	.+390    	; 0x216 <__vector_24+0x28>
  90:	c2 c0       	rjmp	.+388    	; 0x216 <__vector_24+0x28>
  92:	c1 c0       	rjmp	.+386    	; 0x216 <__vector_24+0x28>
  94:	08 c1       	rjmp	.+528    	; 0x2a6 <__vector_24+0xb8>
  96:	bf c0       	rjmp	.+382    	; 0x216 <__vector_24+0x28>
  98:	be c0       	rjmp	.+380    	; 0x216 <__vector_24+0x28>
  9a:	bd c0       	rjmp	.+378    	; 0x216 <__vector_24+0x28>
  9c:	bc c0       	rjmp	.+376    	; 0x216 <__vector_24+0x28>
  9e:	bb c0       	rjmp	.+374    	; 0x216 <__vector_24+0x28>
  a0:	ba c0       	rjmp	.+372    	; 0x216 <__vector_24+0x28>
  a2:	b9 c0       	rjmp	.+370    	; 0x216 <__vector_24+0x28>
  a4:	04 c1       	rjmp	.+520    	; 0x2ae <__vector_24+0xc0>
  a6:	b7 c0       	rjmp	.+366    	; 0x216 <__vector_24+0x28>
  a8:	b6 c0       	rjmp	.+364    	; 0x216 <__vector_24+0x28>
  aa:	b5 c0       	rjmp	.+362    	; 0x216 <__vector_24+0x28>
  ac:	b4 c0       	rjmp	.+360    	; 0x216 <__vector_24+0x28>
  ae:	b3 c0       	rjmp	.+358    	; 0x216 <__vector_24+0x28>
  b0:	b2 c0       	rjmp	.+356    	; 0x216 <__vector_24+0x28>
  b2:	b1 c0       	rjmp	.+354    	; 0x216 <__vector_24+0x28>
  b4:	b0 c0       	rjmp	.+352    	; 0x216 <__vector_24+0x28>
  b6:	af c0       	rjmp	.+350    	; 0x216 <__vector_24+0x28>
  b8:	ae c0       	rjmp	.+348    	; 0x216 <__vector_24+0x28>
  ba:	ad c0       	rjmp	.+346    	; 0x216 <__vector_24+0x28>
  bc:	ac c0       	rjmp	.+344    	; 0x216 <__vector_24+0x28>
  be:	ab c0       	rjmp	.+342    	; 0x216 <__vector_24+0x28>
  c0:	aa c0       	rjmp	.+340    	; 0x216 <__vector_24+0x28>
  c2:	a9 c0       	rjmp	.+338    	; 0x216 <__vector_24+0x28>
  c4:	02 c1       	rjmp	.+516    	; 0x2ca <__vector_24+0xdc>
  c6:	a7 c0       	rjmp	.+334    	; 0x216 <__vector_24+0x28>
  c8:	a6 c0       	rjmp	.+332    	; 0x216 <__vector_24+0x28>
  ca:	a5 c0       	rjmp	.+330    	; 0x216 <__vector_24+0x28>
  cc:	a4 c0       	rjmp	.+328    	; 0x216 <__vector_24+0x28>
  ce:	a3 c0       	rjmp	.+326    	; 0x216 <__vector_24+0x28>
  d0:	a2 c0       	rjmp	.+324    	; 0x216 <__vector_24+0x28>
  d2:	a1 c0       	rjmp	.+322    	; 0x216 <__vector_24+0x28>
  d4:	b9 c0       	rjmp	.+370    	; 0x248 <__vector_24+0x5a>

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf ef       	ldi	r28, 0xFF	; 255
  dc:	d2 e0       	ldi	r29, 0x02	; 2
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	ee e3       	ldi	r30, 0x3E	; 62
  ea:	f4 e0       	ldi	r31, 0x04	; 4
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a0 30       	cpi	r26, 0x00	; 0
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	11 e0       	ldi	r17, 0x01	; 1
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 31       	cpi	r26, 0x1B	; 27
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0a d0       	rcall	.+20     	; 0x11e <main>
 10a:	97 c1       	rjmp	.+814    	; 0x43a <_exit>

0000010c <__bad_interrupt>:
 10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <spi_init>:
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
   DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	87 60       	ori	r24, 0x07	; 7
 112:	84 b9       	out	0x04, r24	; 4
   //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
   //no interrupts, enable SPI, clk low initially, rising edge sample
   SPCR=(1<<SPE) | (1<<MSTR); 
 114:	80 e5       	ldi	r24, 0x50	; 80
 116:	8c bd       	out	0x2c, r24	; 44
   SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8d bd       	out	0x2d, r24	; 45
}//spi_init
 11c:	08 95       	ret

0000011e <main>:

/***********************************************************************/
/*                                main                                 */
/***********************************************************************/
int main ()
{     
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
   DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 132:	84 b1       	in	r24, 0x04	; 4
 134:	87 60       	ori	r24, 0x07	; 7
 136:	84 b9       	out	0x04, r24	; 4
   //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
   //no interrupts, enable SPI, clk low initially, rising edge sample
   SPCR=(1<<SPE) | (1<<MSTR); 
 138:	80 e5       	ldi	r24, 0x50	; 80
 13a:	8c bd       	out	0x2c, r24	; 44
   SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8d bd       	out	0x2d, r24	; 45
   uint16_t lm73_temp;  
   //USART read buffer
   unsigned char usart_rd_buf;

   spi_init();   //initalize SPI 
   init_twi();   //initalize TWI (twi_master.h)  
 140:	04 d1       	rcall	.+520    	; 0x34a <init_twi>
   USART0_init(51);
 142:	83 e3       	ldi	r24, 0x33	; 51
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0a d1       	rcall	.+532    	; 0x35c <USART0_init>

   //   lm73_set_max_resolution();
   lm73_set_ptr_to_read();
 148:	48 d0       	rcall	.+144    	; 0x1da <lm73_set_ptr_to_read>

   sei();             //enable interrupts to allow start_wr to finish
 14a:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14c:	00 e4       	ldi	r16, 0x40	; 64
 14e:	1f e1       	ldi	r17, 0x1F	; 31
      lm73_temp <<= 8; //shift it into upper byte 
      lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 

      //Determining if Celcius or Fahrenheit	
      if(usart_rd_buf == 'F')
	 lm73_temp = ((lm73_temp*9)+160)/5;
 150:	35 e0       	ldi	r19, 0x05	; 5
 152:	c3 2e       	mov	r12, r19
 154:	d1 2c       	mov	r13, r1

   while(1){          //main while loop

      //-------------------------------------------------- USART_REC
#ifndef MEGA48_DEBUG
      usart_rd_buf = USART_receive();
 156:	18 d1       	rcall	.+560    	; 0x388 <USART_receive>
 158:	e8 2e       	mov	r14, r24

      //------------------------------------------------------ TWI
#ifdef MEGA48_DEBUG  
      _delay_ms(100);  //tenth second wait
#endif
      twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes)  (twi_start_rd())
 15a:	80 e9       	ldi	r24, 0x90	; 144
 15c:	64 e1       	ldi	r22, 0x14	; 20
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	42 e0       	ldi	r20, 0x02	; 2
 162:	e2 d0       	rcall	.+452    	; 0x328 <twi_start_rd>
 164:	f8 01       	movw	r30, r16
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x48>
      _delay_ms(2);    //wait for it to finish
      //now assemble the two bytes read back into one 16-bit value
      lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
      lm73_temp <<= 8; //shift it into upper byte 
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	ef 01       	movw	r28, r30
      lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
 16e:	60 91 15 01 	lds	r22, 0x0115
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	6c 2b       	or	r22, r28
 176:	7d 2b       	or	r23, r29

      //Determining if Celcius or Fahrenheit	
      if(usart_rd_buf == 'F')
 178:	fe 2d       	mov	r31, r14
 17a:	f6 34       	cpi	r31, 0x46	; 70
 17c:	a1 f0       	breq	.+40     	; 0x1a6 <main+0x88>
	 lm73_temp = ((lm73_temp*9)+160)/5;

      //convert to string in array with itoa() from avr-libc
      itoa(lm73_temp, lcd_string_array, 10); 
 17e:	cb 01       	movw	r24, r22
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	71 e0       	ldi	r23, 0x01	; 1
 184:	4a e0       	ldi	r20, 0x0A	; 10
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	29 d1       	rcall	.+594    	; 0x3dc <itoa>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	e8 2e       	mov	r14, r24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	f8 2e       	mov	r15, r24

      //-------------------------------------------------- USART_TRANS
      //Transmit the string byte by byte to MEGA128
#ifndef MEGA48_DEBUG
      for(int i=0; i<5; ++i){
	 USART_transmit(lcd_string_array[i]);
 192:	f7 01       	movw	r30, r14
 194:	81 91       	ld	r24, Z+
 196:	7f 01       	movw	r14, r30
 198:	ec d0       	rcall	.+472    	; 0x372 <USART_transmit>
	*/ 

      //-------------------------------------------------- USART_TRANS
      //Transmit the string byte by byte to MEGA128
#ifndef MEGA48_DEBUG
      for(int i=0; i<5; ++i){
 19a:	f6 e0       	ldi	r31, 0x06	; 6
 19c:	ef 16       	cp	r14, r31
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	ff 06       	cpc	r15, r31
 1a2:	b9 f7       	brne	.-18     	; 0x192 <main+0x74>
 1a4:	d8 cf       	rjmp	.-80     	; 0x156 <main+0x38>
      lm73_temp <<= 8; //shift it into upper byte 
      lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 

      //Determining if Celcius or Fahrenheit	
      if(usart_rd_buf == 'F')
	 lm73_temp = ((lm73_temp*9)+160)/5;
 1a6:	cb 01       	movw	r24, r22
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	86 0f       	add	r24, r22
 1b6:	97 1f       	adc	r25, r23
 1b8:	80 56       	subi	r24, 0x60	; 96
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	b6 01       	movw	r22, r12
 1be:	fa d0       	rcall	.+500    	; 0x3b4 <__udivmodhi4>
 1c0:	de cf       	rjmp	.-68     	; 0x17e <main+0x60>

000001c2 <lm73_set_max_resolution>:
uint8_t lm73_rd_buf[2];

//******************************************************************************
void lm73_set_max_resolution(void){
   //FIXME
   lm73_wr_buf[0] = LM73_PTR_CTRL_STATUS;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	80 93 12 01 	sts	0x0112, r24
   //lm73_wr_buf[0] = LM73_PTR_TEMP;   
   lm73_wr_buf[1] = (1<<RES1 | 1<<RES0);
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	80 93 13 01 	sts	0x0113, r24
   twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);
 1ce:	80 e9       	ldi	r24, 0x90	; 144
 1d0:	62 e1       	ldi	r22, 0x12	; 18
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	42 e0       	ldi	r20, 0x02	; 2
 1d6:	97 d0       	rcall	.+302    	; 0x306 <twi_start_wr>
   //twi_start_wr(LM73_ADDRESS, lm73_wr_buf[1], 1);

   return ;
}
 1d8:	08 95       	ret

000001da <lm73_set_ptr_to_read>:
//******************************************************************************
void lm73_set_ptr_to_read(void){
   //set LM73 mode for reading temperature by loading pointer register
   //this is done outside of the normal interrupt mode of operation 
   //load lm73_wr_buf[0] with temperature pointer address
   lm73_wr_buf[0] = LM73_PTR_TEMP;   
 1da:	10 92 12 01 	sts	0x0112, r1
   //start the TWI write process (twi_start_wr())
   twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1);
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	62 e1       	ldi	r22, 0x12	; 18
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	8f d0       	rcall	.+286    	; 0x306 <twi_start_wr>

   return;
}
 1e8:	08 95       	ret

000001ea <lm73_temp_convert>:
   //TODO:Returns what???(uint8_t)??? Probably a BUG?

   //Yeah, this is for you to do! ;^)

  return 0;
}//lm73_temp_convert
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret

000001ee <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 208:	80 91 b9 00 	lds	r24, 0x00B9
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 97       	sbiw	r24, 0x08	; 8
 210:	81 35       	cpi	r24, 0x51	; 81
 212:	91 05       	cpc	r25, r1
 214:	a0 f0       	brcs	.+40     	; 0x23e <__vector_24+0x50>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 216:	80 91 b9 00 	lds	r24, 0x00B9
 21a:	80 93 16 01 	sts	0x0116, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	80 93 bc 00 	sts	0x00BC, r24
  }//switch
}//TWI_isr
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 23e:	86 5e       	subi	r24, 0xE6	; 230
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	08 95       	ret
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 248:	80 91 00 01 	lds	r24, 0x0100
 24c:	e0 91 17 01 	lds	r30, 0x0117
 250:	f0 91 18 01 	lds	r31, 0x0118
 254:	e8 0f       	add	r30, r24
 256:	f1 1d       	adc	r31, r1
 258:	80 91 bb 00 	lds	r24, 0x00BB
 25c:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 25e:	84 e9       	ldi	r24, 0x94	; 148
 260:	80 93 bc 00 	sts	0x00BC, r24
      break;      
 264:	df cf       	rjmp	.-66     	; 0x224 <__vector_24+0x36>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 266:	80 91 19 01 	lds	r24, 0x0119
 26a:	80 93 bb 00 	sts	0x00BB, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 26e:	10 92 00 01 	sts	0x0100, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 272:	85 e8       	ldi	r24, 0x85	; 133
 274:	80 93 bc 00 	sts	0x00BC, r24
      break;
 278:	d5 cf       	rjmp	.-86     	; 0x224 <__vector_24+0x36>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 27a:	80 91 00 01 	lds	r24, 0x0100
 27e:	90 91 1a 01 	lds	r25, 0x011A
 282:	89 17       	cp	r24, r25
 284:	60 f7       	brcc	.-40     	; 0x25e <__vector_24+0x70>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 286:	e0 91 17 01 	lds	r30, 0x0117
 28a:	f0 91 18 01 	lds	r31, 0x0118
 28e:	e8 0f       	add	r30, r24
 290:	f1 1d       	adc	r31, r1
 292:	90 81       	ld	r25, Z
 294:	90 93 bb 00 	sts	0x00BB, r25
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 00 01 	sts	0x0100, r24
        TWCR = TWCR_SEND;               //send next byte 
 29e:	85 e8       	ldi	r24, 0x85	; 133
 2a0:	80 93 bc 00 	sts	0x00BC, r24
 2a4:	bf cf       	rjmp	.-130    	; 0x224 <__vector_24+0x36>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 2a6:	85 ea       	ldi	r24, 0xA5	; 165
 2a8:	80 93 bc 00 	sts	0x00BC, r24
      break;
 2ac:	bb cf       	rjmp	.-138    	; 0x224 <__vector_24+0x36>
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 2ae:	20 91 00 01 	lds	r18, 0x0100
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 2b2:	80 91 1a 01 	lds	r24, 0x011A
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	d4 f4       	brge	.+52     	; 0x2f6 <__vector_24+0x108>
 2c2:	85 ec       	ldi	r24, 0xC5	; 197
 2c4:	80 93 bc 00 	sts	0x00BC, r24
 2c8:	ad cf       	rjmp	.-166    	; 0x224 <__vector_24+0x36>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 2ca:	20 91 00 01 	lds	r18, 0x0100
 2ce:	e0 91 17 01 	lds	r30, 0x0117
 2d2:	f0 91 18 01 	lds	r31, 0x0118
 2d6:	e2 0f       	add	r30, r18
 2d8:	f1 1d       	adc	r31, r1
 2da:	80 91 bb 00 	lds	r24, 0x00BB
 2de:	80 83       	st	Z, r24
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	20 93 00 01 	sts	0x0100, r18
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 2e6:	80 91 1a 01 	lds	r24, 0x011A
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	28 17       	cp	r18, r24
 2f2:	39 07       	cpc	r19, r25
 2f4:	34 f3       	brlt	.-52     	; 0x2c2 <__vector_24+0xd4>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 2f6:	85 e8       	ldi	r24, 0x85	; 133
 2f8:	80 93 bc 00 	sts	0x00BC, r24
 2fc:	93 cf       	rjmp	.-218    	; 0x224 <__vector_24+0x36>

000002fe <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2fe:	80 91 bc 00 	lds	r24, 0x00BC
}
 302:	81 70       	andi	r24, 0x01	; 1
 304:	08 95       	ret

00000306 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 306:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 30a:	90 fd       	sbrc	r25, 0
 30c:	fc cf       	rjmp	.-8      	; 0x306 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	80 93 19 01 	sts	0x0119, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 314:	70 93 18 01 	sts	0x0118, r23
 318:	60 93 17 01 	sts	0x0117, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 31c:	40 93 1a 01 	sts	0x011A, r20
  TWCR = TWCR_START;                    //initiate START
 320:	85 ea       	ldi	r24, 0xA5	; 165
 322:	80 93 bc 00 	sts	0x00BC, r24
}
 326:	08 95       	ret

00000328 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 328:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 32c:	90 fd       	sbrc	r25, 0
 32e:	fc cf       	rjmp	.-8      	; 0x328 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 330:	81 60       	ori	r24, 0x01	; 1
 332:	80 93 19 01 	sts	0x0119, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 336:	70 93 18 01 	sts	0x0118, r23
 33a:	60 93 17 01 	sts	0x0117, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 33e:	40 93 1a 01 	sts	0x011A, r20
  TWCR = TWCR_START;                   //initiate START
 342:	85 ea       	ldi	r24, 0xA5	; 165
 344:	80 93 bc 00 	sts	0x00BC, r24
}
 348:	08 95       	ret

0000034a <init_twi>:
//10K pullups are present on the board
//For the alarm clock, an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	80 93 bb 00 	sts	0x00BB, r24
  TWSR = 0x00;     //prescaler value = 1
 350:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	80 93 b8 00 	sts	0x00B8, r24
}
 35a:	08 95       	ret

0000035c <USART0_init>:
#include "usart.h"

void USART0_init(unsigned int baud)
{
	// Set baud rate
	UBRR0 = baud;
 35c:	90 93 c5 00 	sts	0x00C5, r25
 360:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable transmit and receive
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1<<RXCIE0);
 364:	88 e9       	ldi	r24, 0x98	; 152
 366:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	80 93 c2 00 	sts	0x00C2, r24
}
 370:	08 95       	ret

00000372 <USART_transmit>:

void USART_transmit(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
 372:	90 91 c0 00 	lds	r25, 0x00C0
 376:	95 ff       	sbrs	r25, 5
 378:	fc cf       	rjmp	.-8      	; 0x372 <USART_transmit>
	
	UDR0 = data;
 37a:	80 93 c6 00 	sts	0x00C6, r24
}
 37e:	08 95       	ret

00000380 <USART_available>:

unsigned char USART_available()
{
	return (UCSR0A & (1 << RXC0));
 380:	80 91 c0 00 	lds	r24, 0x00C0
}
 384:	80 78       	andi	r24, 0x80	; 128
 386:	08 95       	ret

00000388 <USART_receive>:
	UDR0 = data;
}

unsigned char USART_available()
{
	return (UCSR0A & (1 << RXC0));
 388:	80 91 c0 00 	lds	r24, 0x00C0
}

unsigned char USART_receive()
{
	while (!USART_available());
 38c:	87 ff       	sbrs	r24, 7
 38e:	fc cf       	rjmp	.-8      	; 0x388 <USART_receive>
	
	return UDR0;
 390:	80 91 c6 00 	lds	r24, 0x00C6
}
 394:	08 95       	ret

00000396 <USART_send_string>:

void USART_send_string(const char* str)
{
 396:	fc 01       	movw	r30, r24
	while (*str){
 398:	90 81       	ld	r25, Z
 39a:	99 23       	and	r25, r25
 39c:	51 f0       	breq	.+20     	; 0x3b2 <USART_send_string+0x1c>
	while (!USART_available());
	
	return UDR0;
}

void USART_send_string(const char* str)
 39e:	31 96       	adiw	r30, 0x01	; 1
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void USART_transmit(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
 3a0:	80 91 c0 00 	lds	r24, 0x00C0
 3a4:	85 ff       	sbrs	r24, 5
 3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <USART_send_string+0xa>
	
	UDR0 = data;
 3a8:	90 93 c6 00 	sts	0x00C6, r25
	return UDR0;
}

void USART_send_string(const char* str)
{
	while (*str){
 3ac:	91 91       	ld	r25, Z+
 3ae:	99 23       	and	r25, r25
 3b0:	b9 f7       	brne	.-18     	; 0x3a0 <USART_send_string+0xa>
 3b2:	08 95       	ret

000003b4 <__udivmodhi4>:
 3b4:	aa 1b       	sub	r26, r26
 3b6:	bb 1b       	sub	r27, r27
 3b8:	51 e1       	ldi	r21, 0x11	; 17
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <__udivmodhi4_ep>

000003bc <__udivmodhi4_loop>:
 3bc:	aa 1f       	adc	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	a6 17       	cp	r26, r22
 3c2:	b7 07       	cpc	r27, r23
 3c4:	10 f0       	brcs	.+4      	; 0x3ca <__udivmodhi4_ep>
 3c6:	a6 1b       	sub	r26, r22
 3c8:	b7 0b       	sbc	r27, r23

000003ca <__udivmodhi4_ep>:
 3ca:	88 1f       	adc	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	5a 95       	dec	r21
 3d0:	a9 f7       	brne	.-22     	; 0x3bc <__udivmodhi4_loop>
 3d2:	80 95       	com	r24
 3d4:	90 95       	com	r25
 3d6:	bc 01       	movw	r22, r24
 3d8:	cd 01       	movw	r24, r26
 3da:	08 95       	ret

000003dc <itoa>:
 3dc:	fb 01       	movw	r30, r22
 3de:	9f 01       	movw	r18, r30
 3e0:	e8 94       	clt
 3e2:	42 30       	cpi	r20, 0x02	; 2
 3e4:	bc f0       	brlt	.+46     	; 0x414 <itoa+0x38>
 3e6:	45 32       	cpi	r20, 0x25	; 37
 3e8:	ac f4       	brge	.+42     	; 0x414 <itoa+0x38>
 3ea:	4a 30       	cpi	r20, 0x0A	; 10
 3ec:	29 f4       	brne	.+10     	; 0x3f8 <itoa+0x1c>
 3ee:	97 fb       	bst	r25, 7
 3f0:	1e f4       	brtc	.+6      	; 0x3f8 <itoa+0x1c>
 3f2:	90 95       	com	r25
 3f4:	81 95       	neg	r24
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	64 2f       	mov	r22, r20
 3fa:	77 27       	eor	r23, r23
 3fc:	db df       	rcall	.-74     	; 0x3b4 <__udivmodhi4>
 3fe:	80 5d       	subi	r24, 0xD0	; 208
 400:	8a 33       	cpi	r24, 0x3A	; 58
 402:	0c f0       	brlt	.+2      	; 0x406 <itoa+0x2a>
 404:	89 5d       	subi	r24, 0xD9	; 217
 406:	81 93       	st	Z+, r24
 408:	cb 01       	movw	r24, r22
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	a9 f7       	brne	.-22     	; 0x3f8 <itoa+0x1c>
 40e:	16 f4       	brtc	.+4      	; 0x414 <itoa+0x38>
 410:	5d e2       	ldi	r21, 0x2D	; 45
 412:	51 93       	st	Z+, r21
 414:	10 82       	st	Z, r1
 416:	c9 01       	movw	r24, r18
 418:	00 c0       	rjmp	.+0      	; 0x41a <strrev>

0000041a <strrev>:
 41a:	dc 01       	movw	r26, r24
 41c:	fc 01       	movw	r30, r24
 41e:	67 2f       	mov	r22, r23
 420:	71 91       	ld	r23, Z+
 422:	77 23       	and	r23, r23
 424:	e1 f7       	brne	.-8      	; 0x41e <strrev+0x4>
 426:	32 97       	sbiw	r30, 0x02	; 2
 428:	04 c0       	rjmp	.+8      	; 0x432 <strrev+0x18>
 42a:	7c 91       	ld	r23, X
 42c:	6d 93       	st	X+, r22
 42e:	70 83       	st	Z, r23
 430:	62 91       	ld	r22, -Z
 432:	ae 17       	cp	r26, r30
 434:	bf 07       	cpc	r27, r31
 436:	c8 f3       	brcs	.-14     	; 0x42a <strrev+0x10>
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
