
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000270e  000027a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000270e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  00800152  00800152  000027f4  2**0
                  ALLOC
  3 .stab         00006678  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f13  00000000  00000000  00008e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_10>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 57 06 	jmp	0xcae	; 0xcae <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__vector_33>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e0       	ldi	r30, 0x0E	; 14
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 35       	cpi	r26, 0x52	; 82
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a2 e5       	ldi	r26, 0x52	; 82
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3b       	cpi	r26, 0xB0	; 176
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 19 0a 	call	0x1432	; 0x1432 <main>
      c6:	0c 94 85 13 	jmp	0x270a	; 0x270a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <music_init>:
static volatile uint16_t beat;
static volatile uint16_t max_beat;
static volatile uint8_t  notes;

void music_init(void) {
   beat = 0;
      ce:	10 92 70 01 	sts	0x0170, r1
      d2:	10 92 6f 01 	sts	0x016F, r1
   max_beat = 0;
      d6:	10 92 72 01 	sts	0x0172, r1
      da:	10 92 71 01 	sts	0x0171, r1
   notes = 0;
      de:	10 92 7a 01 	sts	0x017A, r1
}
      e2:	08 95       	ret

000000e4 <play_note>:
   //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
   //duration is in 64th notes at 120bpm
   //e.g. play_note('D', 1, 0, 16)
   //this would play a Db, octave 0 for 1 quarter note
   //120 bpm (every 32ms inc beat)
   beat = 0;             //reset the beat counter
      e4:	10 92 70 01 	sts	0x0170, r1
      e8:	10 92 6f 01 	sts	0x016F, r1
   max_beat = duration;  //set the max beat
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	30 93 72 01 	sts	0x0172, r19
      f2:	20 93 71 01 	sts	0x0171, r18
   switch (octave) {
      f6:	44 30       	cpi	r20, 0x04	; 4
      f8:	09 f4       	brne	.+2      	; 0xfc <play_note+0x18>
      fa:	d0 c0       	rjmp	.+416    	; 0x29c <play_note+0x1b8>
      fc:	45 30       	cpi	r20, 0x05	; 5
      fe:	78 f0       	brcs	.+30     	; 0x11e <play_note+0x3a>
     100:	46 30       	cpi	r20, 0x06	; 6
     102:	09 f4       	brne	.+2      	; 0x106 <play_note+0x22>
     104:	87 c0       	rjmp	.+270    	; 0x214 <play_note+0x130>
     106:	46 30       	cpi	r20, 0x06	; 6
     108:	08 f4       	brcc	.+2      	; 0x10c <play_note+0x28>
     10a:	3f c0       	rjmp	.+126    	; 0x18a <play_note+0xa6>
     10c:	47 30       	cpi	r20, 0x07	; 7
     10e:	09 f4       	brne	.+2      	; 0x112 <play_note+0x2e>
     110:	6a c0       	rjmp	.+212    	; 0x1e6 <play_note+0x102>
     112:	48 30       	cpi	r20, 0x08	; 8
     114:	09 f4       	brne	.+2      	; 0x118 <play_note+0x34>
     116:	50 c0       	rjmp	.+160    	; 0x1b8 <play_note+0xd4>
		 case 'G': if(flat){OCR1A=Gb8;}
			      else {OCR1A=G8;}
			      break;
	      } 
	      break;
      default: OCR1A=0x0000;
     118:	1b bc       	out	0x2b, r1	; 43
     11a:	1a bc       	out	0x2a, r1	; 42
     11c:	08 95       	ret
   //e.g. play_note('D', 1, 0, 16)
   //this would play a Db, octave 0 for 1 quarter note
   //120 bpm (every 32ms inc beat)
   beat = 0;             //reset the beat counter
   max_beat = duration;  //set the max beat
   switch (octave) {
     11e:	41 30       	cpi	r20, 0x01	; 1
     120:	09 f4       	brne	.+2      	; 0x124 <play_note+0x40>
     122:	a6 c0       	rjmp	.+332    	; 0x270 <play_note+0x18c>
     124:	41 30       	cpi	r20, 0x01	; 1
     126:	b0 f4       	brcc	.+44     	; 0x154 <play_note+0x70>
      case 0: switch (note) {
     128:	84 34       	cpi	r24, 0x44	; 68
     12a:	09 f4       	brne	.+2      	; 0x12e <play_note+0x4a>
     12c:	28 c2       	rjmp	.+1104   	; 0x57e <play_note+0x49a>
     12e:	85 34       	cpi	r24, 0x45	; 69
     130:	0c f4       	brge	.+2      	; 0x134 <play_note+0x50>
     132:	1f c1       	rjmp	.+574    	; 0x372 <play_note+0x28e>
     134:	86 34       	cpi	r24, 0x46	; 70
     136:	09 f4       	brne	.+2      	; 0x13a <play_note+0x56>
     138:	70 c1       	rjmp	.+736    	; 0x41a <play_note+0x336>
     13a:	86 34       	cpi	r24, 0x46	; 70
     13c:	0c f4       	brge	.+2      	; 0x140 <play_note+0x5c>
     13e:	65 c1       	rjmp	.+714    	; 0x40a <play_note+0x326>
     140:	87 34       	cpi	r24, 0x47	; 71
     142:	61 f7       	brne	.-40     	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb0;}
			      else {OCR1A=E0;}
			      break;
		 case 'F': OCR1A=F0;
			   break;
		 case 'G': if(flat){OCR1A=Gb0;}
     144:	66 23       	and	r22, r22
     146:	09 f4       	brne	.+2      	; 0x14a <play_note+0x66>
     148:	8e c2       	rjmp	.+1308   	; 0x666 <play_note+0x582>
     14a:	8d e1       	ldi	r24, 0x1D	; 29
     14c:	95 e1       	ldi	r25, 0x15	; 21
     14e:	9b bd       	out	0x2b, r25	; 43
     150:	8a bd       	out	0x2a, r24	; 42
     152:	08 95       	ret
   //e.g. play_note('D', 1, 0, 16)
   //this would play a Db, octave 0 for 1 quarter note
   //120 bpm (every 32ms inc beat)
   beat = 0;             //reset the beat counter
   max_beat = duration;  //set the max beat
   switch (octave) {
     154:	42 30       	cpi	r20, 0x02	; 2
     156:	09 f4       	brne	.+2      	; 0x15a <play_note+0x76>
     158:	74 c0       	rjmp	.+232    	; 0x242 <play_note+0x15e>
     15a:	43 30       	cpi	r20, 0x03	; 3
     15c:	e9 f6       	brne	.-70     	; 0x118 <play_note+0x34>
		 case 'G': if(flat){OCR1A=Gb2;}
			      else {OCR1A=G2;}
			      break;
	      } 
	      break;
      case 3: switch (note) {
     15e:	84 34       	cpi	r24, 0x44	; 68
     160:	09 f4       	brne	.+2      	; 0x164 <play_note+0x80>
     162:	ed c1       	rjmp	.+986    	; 0x53e <play_note+0x45a>
     164:	85 34       	cpi	r24, 0x45	; 69
     166:	0c f4       	brge	.+2      	; 0x16a <play_note+0x86>
     168:	26 c1       	rjmp	.+588    	; 0x3b6 <play_note+0x2d2>
     16a:	86 34       	cpi	r24, 0x46	; 70
     16c:	09 f4       	brne	.+2      	; 0x170 <play_note+0x8c>
     16e:	5a c1       	rjmp	.+692    	; 0x424 <play_note+0x340>
     170:	86 34       	cpi	r24, 0x46	; 70
     172:	0c f4       	brge	.+2      	; 0x176 <play_note+0x92>
     174:	42 c1       	rjmp	.+644    	; 0x3fa <play_note+0x316>
     176:	87 34       	cpi	r24, 0x47	; 71
     178:	89 f6       	brne	.-94     	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb3;}
			      else {OCR1A=E3;}
			      break;
		 case 'F': OCR1A=F3;
			   break;
		 case 'G': if(flat){OCR1A=Gb3;}
     17a:	66 23       	and	r22, r22
     17c:	09 f4       	brne	.+2      	; 0x180 <play_note+0x9c>
     17e:	09 c3       	rjmp	.+1554   	; 0x792 <play_note+0x6ae>
     180:	82 ea       	ldi	r24, 0xA2	; 162
     182:	92 e0       	ldi	r25, 0x02	; 2
     184:	9b bd       	out	0x2b, r25	; 43
     186:	8a bd       	out	0x2a, r24	; 42
     188:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb4;}
			      else {OCR1A=G4;}
			      break;
	      } 
	      break;
      case 5: switch (note) {
     18a:	84 34       	cpi	r24, 0x44	; 68
     18c:	09 f4       	brne	.+2      	; 0x190 <play_note+0xac>
     18e:	71 c1       	rjmp	.+738    	; 0x472 <play_note+0x38e>
     190:	85 34       	cpi	r24, 0x45	; 69
     192:	0c f4       	brge	.+2      	; 0x196 <play_note+0xb2>
     194:	21 c1       	rjmp	.+578    	; 0x3d8 <play_note+0x2f4>
     196:	86 34       	cpi	r24, 0x46	; 70
     198:	09 f4       	brne	.+2      	; 0x19c <play_note+0xb8>
     19a:	35 c2       	rjmp	.+1130   	; 0x606 <play_note+0x522>
     19c:	86 34       	cpi	r24, 0x46	; 70
     19e:	0c f4       	brge	.+2      	; 0x1a2 <play_note+0xbe>
     1a0:	fe c1       	rjmp	.+1020   	; 0x59e <play_note+0x4ba>
     1a2:	87 34       	cpi	r24, 0x47	; 71
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <play_note+0xc4>
     1a6:	ba cf       	rjmp	.-140    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb5;}
			      else {OCR1A=E5;}
			      break;
		 case 'F': OCR1A=F5;
			   break;
		 case 'G': if(flat){OCR1A=Gb5;}
     1a8:	66 23       	and	r22, r22
     1aa:	09 f4       	brne	.+2      	; 0x1ae <play_note+0xca>
     1ac:	61 c2       	rjmp	.+1218   	; 0x670 <play_note+0x58c>
     1ae:	87 ea       	ldi	r24, 0xA7	; 167
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	9b bd       	out	0x2b, r25	; 43
     1b4:	8a bd       	out	0x2a, r24	; 42
     1b6:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb7;}
			      else {OCR1A=G7;}
			      break;
	      } 
	      break;
      case 8: switch (note) {
     1b8:	84 34       	cpi	r24, 0x44	; 68
     1ba:	09 f4       	brne	.+2      	; 0x1be <play_note+0xda>
     1bc:	45 c1       	rjmp	.+650    	; 0x448 <play_note+0x364>
     1be:	85 34       	cpi	r24, 0x45	; 69
     1c0:	0c f4       	brge	.+2      	; 0x1c4 <play_note+0xe0>
     1c2:	e8 c0       	rjmp	.+464    	; 0x394 <play_note+0x2b0>
     1c4:	86 34       	cpi	r24, 0x46	; 70
     1c6:	09 f4       	brne	.+2      	; 0x1ca <play_note+0xe6>
     1c8:	3a c1       	rjmp	.+628    	; 0x43e <play_note+0x35a>
     1ca:	86 34       	cpi	r24, 0x46	; 70
     1cc:	0c f4       	brge	.+2      	; 0x1d0 <play_note+0xec>
     1ce:	2f c1       	rjmp	.+606    	; 0x42e <play_note+0x34a>
     1d0:	87 34       	cpi	r24, 0x47	; 71
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <play_note+0xf2>
     1d4:	a3 cf       	rjmp	.-186    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb8;}
			      else {OCR1A=E8;}
			      break;
		 case 'F': OCR1A=F8;
			   break;
		 case 'G': if(flat){OCR1A=Gb8;}
     1d6:	66 23       	and	r22, r22
     1d8:	09 f4       	brne	.+2      	; 0x1dc <play_note+0xf8>
     1da:	17 c3       	rjmp	.+1582   	; 0x80a <play_note+0x726>
     1dc:	80 e1       	ldi	r24, 0x10	; 16
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	9b bd       	out	0x2b, r25	; 43
     1e2:	8a bd       	out	0x2a, r24	; 42
     1e4:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb6;}
			      else {OCR1A=G6;}
			      break;
	      } 
	      break;
      case 7: switch (note) {
     1e6:	84 34       	cpi	r24, 0x44	; 68
     1e8:	09 f4       	brne	.+2      	; 0x1ec <play_note+0x108>
     1ea:	6a c1       	rjmp	.+724    	; 0x4c0 <play_note+0x3dc>
     1ec:	85 34       	cpi	r24, 0x45	; 69
     1ee:	0c f4       	brge	.+2      	; 0x1f2 <play_note+0x10e>
     1f0:	af c0       	rjmp	.+350    	; 0x350 <play_note+0x26c>
     1f2:	86 34       	cpi	r24, 0x46	; 70
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <play_note+0x114>
     1f6:	26 c2       	rjmp	.+1100   	; 0x644 <play_note+0x560>
     1f8:	86 34       	cpi	r24, 0x46	; 70
     1fa:	0c f4       	brge	.+2      	; 0x1fe <play_note+0x11a>
     1fc:	c8 c1       	rjmp	.+912    	; 0x58e <play_note+0x4aa>
     1fe:	87 34       	cpi	r24, 0x47	; 71
     200:	09 f0       	breq	.+2      	; 0x204 <play_note+0x120>
     202:	8c cf       	rjmp	.-232    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb7;}
			      else {OCR1A=E7;}
			      break;
		 case 'F': OCR1A=F7;
			   break;
		 case 'G': if(flat){OCR1A=Gb7;}
     204:	66 23       	and	r22, r22
     206:	09 f4       	brne	.+2      	; 0x20a <play_note+0x126>
     208:	83 c2       	rjmp	.+1286   	; 0x710 <play_note+0x62c>
     20a:	89 e2       	ldi	r24, 0x29	; 41
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	9b bd       	out	0x2b, r25	; 43
     210:	8a bd       	out	0x2a, r24	; 42
     212:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb5;}
			      else {OCR1A=G5;}
			      break;
	      } 
	      break;
      case 6: switch (note) {
     214:	84 34       	cpi	r24, 0x44	; 68
     216:	09 f4       	brne	.+2      	; 0x21a <play_note+0x136>
     218:	a2 c1       	rjmp	.+836    	; 0x55e <play_note+0x47a>
     21a:	85 34       	cpi	r24, 0x45	; 69
     21c:	0c f4       	brge	.+2      	; 0x220 <play_note+0x13c>
     21e:	87 c0       	rjmp	.+270    	; 0x32e <play_note+0x24a>
     220:	86 34       	cpi	r24, 0x46	; 70
     222:	09 f4       	brne	.+2      	; 0x226 <play_note+0x142>
     224:	f5 c1       	rjmp	.+1002   	; 0x610 <play_note+0x52c>
     226:	86 34       	cpi	r24, 0x46	; 70
     228:	0c f4       	brge	.+2      	; 0x22c <play_note+0x148>
     22a:	e0 c1       	rjmp	.+960    	; 0x5ec <play_note+0x508>
     22c:	87 34       	cpi	r24, 0x47	; 71
     22e:	09 f0       	breq	.+2      	; 0x232 <play_note+0x14e>
     230:	75 cf       	rjmp	.-278    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb6;}
			      else {OCR1A=E6;}
			      break;
		 case 'F': OCR1A=F6;
			   break;
		 case 'G': if(flat){OCR1A=Gb6;}
     232:	66 23       	and	r22, r22
     234:	09 f4       	brne	.+2      	; 0x238 <play_note+0x154>
     236:	7b c2       	rjmp	.+1270   	; 0x72e <play_note+0x64a>
     238:	83 e5       	ldi	r24, 0x53	; 83
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	9b bd       	out	0x2b, r25	; 43
     23e:	8a bd       	out	0x2a, r24	; 42
     240:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb1;}
			      else {OCR1A=G1;}
			      break;
	      } 
	      break;
      case 2: switch (note) {
     242:	84 34       	cpi	r24, 0x44	; 68
     244:	09 f4       	brne	.+2      	; 0x248 <play_note+0x164>
     246:	83 c1       	rjmp	.+774    	; 0x54e <play_note+0x46a>
     248:	85 34       	cpi	r24, 0x45	; 69
     24a:	0c f4       	brge	.+2      	; 0x24e <play_note+0x16a>
     24c:	5f c0       	rjmp	.+190    	; 0x30c <play_note+0x228>
     24e:	86 34       	cpi	r24, 0x46	; 70
     250:	09 f4       	brne	.+2      	; 0x254 <play_note+0x170>
     252:	31 c1       	rjmp	.+610    	; 0x4b6 <play_note+0x3d2>
     254:	86 34       	cpi	r24, 0x46	; 70
     256:	0c f4       	brge	.+2      	; 0x25a <play_note+0x176>
     258:	26 c1       	rjmp	.+588    	; 0x4a6 <play_note+0x3c2>
     25a:	87 34       	cpi	r24, 0x47	; 71
     25c:	09 f0       	breq	.+2      	; 0x260 <play_note+0x17c>
     25e:	5e cf       	rjmp	.-324    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb2;}
			      else {OCR1A=E2;}
			      break;
		 case 'F': OCR1A=F2;
			   break;
		 case 'G': if(flat){OCR1A=Gb2;}
     260:	66 23       	and	r22, r22
     262:	09 f4       	brne	.+2      	; 0x266 <play_note+0x182>
     264:	28 c2       	rjmp	.+1104   	; 0x6b6 <play_note+0x5d2>
     266:	86 e4       	ldi	r24, 0x46	; 70
     268:	95 e0       	ldi	r25, 0x05	; 5
     26a:	9b bd       	out	0x2b, r25	; 43
     26c:	8a bd       	out	0x2a, r24	; 42
     26e:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb0;}
			      else {OCR1A=G0;}
			      break;
	      } 
	      break;
      case 1: switch (note) {
     270:	84 34       	cpi	r24, 0x44	; 68
     272:	09 f4       	brne	.+2      	; 0x276 <play_note+0x192>
     274:	5c c1       	rjmp	.+696    	; 0x52e <play_note+0x44a>
     276:	85 34       	cpi	r24, 0x45	; 69
     278:	c4 f1       	brlt	.+112    	; 0x2ea <play_note+0x206>
     27a:	86 34       	cpi	r24, 0x46	; 70
     27c:	09 f4       	brne	.+2      	; 0x280 <play_note+0x19c>
     27e:	a4 c1       	rjmp	.+840    	; 0x5c8 <play_note+0x4e4>
     280:	86 34       	cpi	r24, 0x46	; 70
     282:	0c f4       	brge	.+2      	; 0x286 <play_note+0x1a2>
     284:	99 c1       	rjmp	.+818    	; 0x5b8 <play_note+0x4d4>
     286:	87 34       	cpi	r24, 0x47	; 71
     288:	09 f0       	breq	.+2      	; 0x28c <play_note+0x1a8>
     28a:	48 cf       	rjmp	.-368    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb1;}
			      else {OCR1A=E1;}
			      break;
		 case 'F': OCR1A=F1;
			   break;
		 case 'G': if(flat){OCR1A=Gb1;}
     28c:	66 23       	and	r22, r22
     28e:	09 f4       	brne	.+2      	; 0x292 <play_note+0x1ae>
     290:	fe c1       	rjmp	.+1020   	; 0x68e <play_note+0x5aa>
     292:	8d e8       	ldi	r24, 0x8D	; 141
     294:	9a e0       	ldi	r25, 0x0A	; 10
     296:	9b bd       	out	0x2b, r25	; 43
     298:	8a bd       	out	0x2a, r24	; 42
     29a:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb3;}
			      else {OCR1A=G3;}
			      break;
	      } 
	      break;
      case 4: switch (note) {
     29c:	84 34       	cpi	r24, 0x44	; 68
     29e:	09 f4       	brne	.+2      	; 0x2a2 <play_note+0x1be>
     2a0:	66 c1       	rjmp	.+716    	; 0x56e <play_note+0x48a>
     2a2:	85 34       	cpi	r24, 0x45	; 69
     2a4:	8c f0       	brlt	.+34     	; 0x2c8 <play_note+0x1e4>
     2a6:	86 34       	cpi	r24, 0x46	; 70
     2a8:	09 f4       	brne	.+2      	; 0x2ac <play_note+0x1c8>
     2aa:	34 c1       	rjmp	.+616    	; 0x514 <play_note+0x430>
     2ac:	86 34       	cpi	r24, 0x46	; 70
     2ae:	0c f4       	brge	.+2      	; 0x2b2 <play_note+0x1ce>
     2b0:	29 c1       	rjmp	.+594    	; 0x504 <play_note+0x420>
     2b2:	87 34       	cpi	r24, 0x47	; 71
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <play_note+0x1d4>
     2b6:	32 cf       	rjmp	.-412    	; 0x11c <play_note+0x38>
		 case 'E': if(flat){OCR1A=Eb4;}
			      else {OCR1A=E4;}
			      break;
		 case 'F': OCR1A=F4;
			   break;
		 case 'G': if(flat){OCR1A=Gb4;}
     2b8:	66 23       	and	r22, r22
     2ba:	09 f4       	brne	.+2      	; 0x2be <play_note+0x1da>
     2bc:	24 c2       	rjmp	.+1096   	; 0x706 <play_note+0x622>
     2be:	80 e5       	ldi	r24, 0x50	; 80
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	9b bd       	out	0x2b, r25	; 43
     2c4:	8a bd       	out	0x2a, r24	; 42
     2c6:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb3;}
			      else {OCR1A=G3;}
			      break;
	      } 
	      break;
      case 4: switch (note) {
     2c8:	82 34       	cpi	r24, 0x42	; 66
     2ca:	09 f4       	brne	.+2      	; 0x2ce <play_note+0x1ea>
     2cc:	ab c1       	rjmp	.+854    	; 0x624 <play_note+0x540>
     2ce:	83 34       	cpi	r24, 0x43	; 67
     2d0:	0c f0       	brlt	.+2      	; 0x2d4 <play_note+0x1f0>
     2d2:	a3 c1       	rjmp	.+838    	; 0x61a <play_note+0x536>
     2d4:	81 34       	cpi	r24, 0x41	; 65
     2d6:	09 f0       	breq	.+2      	; 0x2da <play_note+0x1f6>
     2d8:	21 cf       	rjmp	.-446    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab4;}
     2da:	66 23       	and	r22, r22
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <play_note+0x1fc>
     2de:	31 c2       	rjmp	.+1122   	; 0x742 <play_note+0x65e>
     2e0:	8b e2       	ldi	r24, 0x2B	; 43
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	9b bd       	out	0x2b, r25	; 43
     2e6:	8a bd       	out	0x2a, r24	; 42
     2e8:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb0;}
			      else {OCR1A=G0;}
			      break;
	      } 
	      break;
      case 1: switch (note) {
     2ea:	82 34       	cpi	r24, 0x42	; 66
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <play_note+0x20c>
     2ee:	a2 c1       	rjmp	.+836    	; 0x634 <play_note+0x550>
     2f0:	83 34       	cpi	r24, 0x43	; 67
     2f2:	0c f0       	brlt	.+2      	; 0x2f6 <play_note+0x212>
     2f4:	5c c1       	rjmp	.+696    	; 0x5ae <play_note+0x4ca>
     2f6:	81 34       	cpi	r24, 0x41	; 65
     2f8:	09 f0       	breq	.+2      	; 0x2fc <play_note+0x218>
     2fa:	10 cf       	rjmp	.-480    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab1;}
     2fc:	66 23       	and	r22, r22
     2fe:	09 f4       	brne	.+2      	; 0x302 <play_note+0x21e>
     300:	2a c2       	rjmp	.+1108   	; 0x756 <play_note+0x672>
     302:	87 e6       	ldi	r24, 0x67	; 103
     304:	99 e0       	ldi	r25, 0x09	; 9
     306:	9b bd       	out	0x2b, r25	; 43
     308:	8a bd       	out	0x2a, r24	; 42
     30a:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb1;}
			      else {OCR1A=G1;}
			      break;
	      } 
	      break;
      case 2: switch (note) {
     30c:	82 34       	cpi	r24, 0x42	; 66
     30e:	09 f4       	brne	.+2      	; 0x312 <play_note+0x22e>
     310:	9e c1       	rjmp	.+828    	; 0x64e <play_note+0x56a>
     312:	83 34       	cpi	r24, 0x43	; 67
     314:	0c f0       	brlt	.+2      	; 0x318 <play_note+0x234>
     316:	72 c1       	rjmp	.+740    	; 0x5fc <play_note+0x518>
     318:	81 34       	cpi	r24, 0x41	; 65
     31a:	09 f0       	breq	.+2      	; 0x31e <play_note+0x23a>
     31c:	ff ce       	rjmp	.-514    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab2;}
     31e:	66 23       	and	r22, r22
     320:	09 f4       	brne	.+2      	; 0x324 <play_note+0x240>
     322:	e7 c1       	rjmp	.+974    	; 0x6f2 <play_note+0x60e>
     324:	82 eb       	ldi	r24, 0xB2	; 178
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	9b bd       	out	0x2b, r25	; 43
     32a:	8a bd       	out	0x2a, r24	; 42
     32c:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb5;}
			      else {OCR1A=G5;}
			      break;
	      } 
	      break;
      case 6: switch (note) {
     32e:	82 34       	cpi	r24, 0x42	; 66
     330:	09 f4       	brne	.+2      	; 0x334 <play_note+0x250>
     332:	db c0       	rjmp	.+438    	; 0x4ea <play_note+0x406>
     334:	83 34       	cpi	r24, 0x43	; 67
     336:	0c f0       	brlt	.+2      	; 0x33a <play_note+0x256>
     338:	b1 c0       	rjmp	.+354    	; 0x49c <play_note+0x3b8>
     33a:	81 34       	cpi	r24, 0x41	; 65
     33c:	09 f0       	breq	.+2      	; 0x340 <play_note+0x25c>
     33e:	ee ce       	rjmp	.-548    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab6;}
     340:	66 23       	and	r22, r22
     342:	09 f4       	brne	.+2      	; 0x346 <play_note+0x262>
     344:	bd c1       	rjmp	.+890    	; 0x6c0 <play_note+0x5dc>
     346:	8a e4       	ldi	r24, 0x4A	; 74
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	9b bd       	out	0x2b, r25	; 43
     34c:	8a bd       	out	0x2a, r24	; 42
     34e:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb6;}
			      else {OCR1A=G6;}
			      break;
	      } 
	      break;
      case 7: switch (note) {
     350:	82 34       	cpi	r24, 0x42	; 66
     352:	09 f4       	brne	.+2      	; 0x356 <play_note+0x272>
     354:	c2 c0       	rjmp	.+388    	; 0x4da <play_note+0x3f6>
     356:	83 34       	cpi	r24, 0x43	; 67
     358:	0c f0       	brlt	.+2      	; 0x35c <play_note+0x278>
     35a:	ba c0       	rjmp	.+372    	; 0x4d0 <play_note+0x3ec>
     35c:	81 34       	cpi	r24, 0x41	; 65
     35e:	09 f0       	breq	.+2      	; 0x362 <play_note+0x27e>
     360:	dd ce       	rjmp	.-582    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab7;}
     362:	66 23       	and	r22, r22
     364:	09 f4       	brne	.+2      	; 0x368 <play_note+0x284>
     366:	1f c2       	rjmp	.+1086   	; 0x7a6 <play_note+0x6c2>
     368:	84 e2       	ldi	r24, 0x24	; 36
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	9b bd       	out	0x2b, r25	; 43
     36e:	8a bd       	out	0x2a, r24	; 42
     370:	08 95       	ret
   //this would play a Db, octave 0 for 1 quarter note
   //120 bpm (every 32ms inc beat)
   beat = 0;             //reset the beat counter
   max_beat = duration;  //set the max beat
   switch (octave) {
      case 0: switch (note) {
     372:	82 34       	cpi	r24, 0x42	; 66
     374:	09 f4       	brne	.+2      	; 0x378 <play_note+0x294>
     376:	d3 c0       	rjmp	.+422    	; 0x51e <play_note+0x43a>
     378:	83 34       	cpi	r24, 0x43	; 67
     37a:	0c f0       	brlt	.+2      	; 0x37e <play_note+0x29a>
     37c:	be c0       	rjmp	.+380    	; 0x4fa <play_note+0x416>
     37e:	81 34       	cpi	r24, 0x41	; 65
     380:	09 f0       	breq	.+2      	; 0x384 <play_note+0x2a0>
     382:	cc ce       	rjmp	.-616    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab0;}
     384:	66 23       	and	r22, r22
     386:	09 f4       	brne	.+2      	; 0x38a <play_note+0x2a6>
     388:	09 c2       	rjmp	.+1042   	; 0x79c <play_note+0x6b8>
     38a:	8e ec       	ldi	r24, 0xCE	; 206
     38c:	92 e1       	ldi	r25, 0x12	; 18
     38e:	9b bd       	out	0x2b, r25	; 43
     390:	8a bd       	out	0x2a, r24	; 42
     392:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb7;}
			      else {OCR1A=G7;}
			      break;
	      } 
	      break;
      case 8: switch (note) {
     394:	82 34       	cpi	r24, 0x42	; 66
     396:	09 f4       	brne	.+2      	; 0x39a <play_note+0x2b6>
     398:	64 c0       	rjmp	.+200    	; 0x462 <play_note+0x37e>
     39a:	83 34       	cpi	r24, 0x43	; 67
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <play_note+0x2bc>
     39e:	5c c0       	rjmp	.+184    	; 0x458 <play_note+0x374>
     3a0:	81 34       	cpi	r24, 0x41	; 65
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <play_note+0x2c2>
     3a4:	bb ce       	rjmp	.-650    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab8;}
     3a6:	66 23       	and	r22, r22
     3a8:	09 f4       	brne	.+2      	; 0x3ac <play_note+0x2c8>
     3aa:	11 c2       	rjmp	.+1058   	; 0x7ce <play_note+0x6ea>
     3ac:	8b e0       	ldi	r24, 0x0B	; 11
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	9b bd       	out	0x2b, r25	; 43
     3b2:	8a bd       	out	0x2a, r24	; 42
     3b4:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb2;}
			      else {OCR1A=G2;}
			      break;
	      } 
	      break;
      case 3: switch (note) {
     3b6:	82 34       	cpi	r24, 0x42	; 66
     3b8:	09 f4       	brne	.+2      	; 0x3bc <play_note+0x2d8>
     3ba:	10 c1       	rjmp	.+544    	; 0x5dc <play_note+0x4f8>
     3bc:	83 34       	cpi	r24, 0x43	; 67
     3be:	0c f0       	brlt	.+2      	; 0x3c2 <play_note+0x2de>
     3c0:	08 c1       	rjmp	.+528    	; 0x5d2 <play_note+0x4ee>
     3c2:	81 34       	cpi	r24, 0x41	; 65
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <play_note+0x2e4>
     3c6:	aa ce       	rjmp	.-684    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab3;}
     3c8:	66 23       	and	r22, r22
     3ca:	09 f4       	brne	.+2      	; 0x3ce <play_note+0x2ea>
     3cc:	6a c1       	rjmp	.+724    	; 0x6a2 <play_note+0x5be>
     3ce:	88 e5       	ldi	r24, 0x58	; 88
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	9b bd       	out	0x2b, r25	; 43
     3d4:	8a bd       	out	0x2a, r24	; 42
     3d6:	08 95       	ret
		 case 'G': if(flat){OCR1A=Gb4;}
			      else {OCR1A=G4;}
			      break;
	      } 
	      break;
      case 5: switch (note) {
     3d8:	82 34       	cpi	r24, 0x42	; 66
     3da:	09 f4       	brne	.+2      	; 0x3de <play_note+0x2fa>
     3dc:	57 c0       	rjmp	.+174    	; 0x48c <play_note+0x3a8>
     3de:	83 34       	cpi	r24, 0x43	; 67
     3e0:	0c f0       	brlt	.+2      	; 0x3e4 <play_note+0x300>
     3e2:	4f c0       	rjmp	.+158    	; 0x482 <play_note+0x39e>
     3e4:	81 34       	cpi	r24, 0x41	; 65
     3e6:	09 f0       	breq	.+2      	; 0x3ea <play_note+0x306>
     3e8:	99 ce       	rjmp	.-718    	; 0x11c <play_note+0x38>
		 case 'A': if(flat){OCR1A=Ab5;}
     3ea:	66 23       	and	r22, r22
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <play_note+0x30c>
     3ee:	f9 c1       	rjmp	.+1010   	; 0x7e2 <play_note+0x6fe>
     3f0:	85 e9       	ldi	r24, 0x95	; 149
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9b bd       	out	0x2b, r25	; 43
     3f6:	8a bd       	out	0x2a, r24	; 42
     3f8:	08 95       	ret
		 case 'C': OCR1A=C3;
			   break;
		 case 'D': if(flat){OCR1A=Db3;}
			      else {OCR1A=D3;}
			      break;
		 case 'E': if(flat){OCR1A=Eb3;}
     3fa:	66 23       	and	r22, r22
     3fc:	09 f4       	brne	.+2      	; 0x400 <play_note+0x31c>
     3fe:	fb c1       	rjmp	.+1014   	; 0x7f6 <play_note+0x712>
     400:	82 e2       	ldi	r24, 0x22	; 34
     402:	93 e0       	ldi	r25, 0x03	; 3
     404:	9b bd       	out	0x2b, r25	; 43
     406:	8a bd       	out	0x2a, r24	; 42
     408:	08 95       	ret
		 case 'C': OCR1A=C0;
			   break;
		 case 'D': if(flat){OCR1A=Db0;}
			      else {OCR1A=D0;}
			      break;
		 case 'E': if(flat){OCR1A=Eb0;}
     40a:	66 23       	and	r22, r22
     40c:	09 f4       	brne	.+2      	; 0x410 <play_note+0x32c>
     40e:	f8 c1       	rjmp	.+1008   	; 0x800 <play_note+0x71c>
     410:	89 e1       	ldi	r24, 0x19	; 25
     412:	99 e1       	ldi	r25, 0x19	; 25
     414:	9b bd       	out	0x2b, r25	; 43
     416:	8a bd       	out	0x2a, r24	; 42
     418:	08 95       	ret
			      else {OCR1A=E0;}
			      break;
		 case 'F': OCR1A=F0;
     41a:	8d e5       	ldi	r24, 0x5D	; 93
     41c:	96 e1       	ldi	r25, 0x16	; 22
     41e:	9b bd       	out	0x2b, r25	; 43
     420:	8a bd       	out	0x2a, r24	; 42
			   break;
     422:	08 95       	ret
			      else {OCR1A=D3;}
			      break;
		 case 'E': if(flat){OCR1A=Eb3;}
			      else {OCR1A=E3;}
			      break;
		 case 'F': OCR1A=F3;
     424:	8a ec       	ldi	r24, 0xCA	; 202
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	9b bd       	out	0x2b, r25	; 43
     42a:	8a bd       	out	0x2a, r24	; 42
			   break;
     42c:	08 95       	ret
		 case 'C': OCR1A=C8;
			   break;
		 case 'D': if(flat){OCR1A=Db8;}
			      else {OCR1A=D8;}
			      break;
		 case 'E': if(flat){OCR1A=Eb8;}
     42e:	66 23       	and	r22, r22
     430:	09 f4       	brne	.+2      	; 0x434 <play_note+0x350>
     432:	f0 c1       	rjmp	.+992    	; 0x814 <play_note+0x730>
     434:	88 e1       	ldi	r24, 0x18	; 24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9b bd       	out	0x2b, r25	; 43
     43a:	8a bd       	out	0x2a, r24	; 42
     43c:	08 95       	ret
			      else {OCR1A=E8;}
			      break;
		 case 'F': OCR1A=F8;
     43e:	82 e1       	ldi	r24, 0x12	; 18
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	9b bd       	out	0x2b, r25	; 43
     444:	8a bd       	out	0x2a, r24	; 42
			   break;
     446:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb8;}
			      else {OCR1A=B8;}
			      break;
		 case 'C': OCR1A=C8;
			   break;
		 case 'D': if(flat){OCR1A=Db8;}
     448:	66 23       	and	r22, r22
     44a:	09 f4       	brne	.+2      	; 0x44e <play_note+0x36a>
     44c:	c5 c1       	rjmp	.+906    	; 0x7d8 <play_note+0x6f4>
     44e:	8b e1       	ldi	r24, 0x1B	; 27
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	9b bd       	out	0x2b, r25	; 43
     454:	8a bd       	out	0x2a, r24	; 42
     456:	08 95       	ret
			      else {OCR1A=A8;}
			      break;
		 case 'B': if(flat){OCR1A=Bb8;}
			      else {OCR1A=B8;}
			      break;
		 case 'C': OCR1A=C8;
     458:	8c e1       	ldi	r24, 0x1C	; 28
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9b bd       	out	0x2b, r25	; 43
     45e:	8a bd       	out	0x2a, r24	; 42
			   break;
     460:	08 95       	ret
	      break;
      case 8: switch (note) {
		 case 'A': if(flat){OCR1A=Ab8;}
			      else {OCR1A=A8;}
			      break;
		 case 'B': if(flat){OCR1A=Bb8;}
     462:	66 23       	and	r22, r22
     464:	09 f4       	brne	.+2      	; 0x468 <play_note+0x384>
     466:	c2 c1       	rjmp	.+900    	; 0x7ec <play_note+0x708>
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9b bd       	out	0x2b, r25	; 43
     46e:	8a bd       	out	0x2a, r24	; 42
     470:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb5;}
			      else {OCR1A=B5;}
			      break;
		 case 'C': OCR1A=C5;
			   break;
		 case 'D': if(flat){OCR1A=Db5;}
     472:	66 23       	and	r22, r22
     474:	09 f4       	brne	.+2      	; 0x478 <play_note+0x394>
     476:	a1 c1       	rjmp	.+834    	; 0x7ba <play_note+0x6d6>
     478:	80 ee       	ldi	r24, 0xE0	; 224
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	9b bd       	out	0x2b, r25	; 43
     47e:	8a bd       	out	0x2a, r24	; 42
     480:	08 95       	ret
			      else {OCR1A=A5;}
			      break;
		 case 'B': if(flat){OCR1A=Bb5;}
			      else {OCR1A=B5;}
			      break;
		 case 'C': OCR1A=C5;
     482:	8d ee       	ldi	r24, 0xED	; 237
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	9b bd       	out	0x2b, r25	; 43
     488:	8a bd       	out	0x2a, r24	; 42
			   break;
     48a:	08 95       	ret
	      break;
      case 5: switch (note) {
		 case 'A': if(flat){OCR1A=Ab5;}
			      else {OCR1A=A5;}
			      break;
		 case 'B': if(flat){OCR1A=Bb5;}
     48c:	66 23       	and	r22, r22
     48e:	09 f4       	brne	.+2      	; 0x492 <play_note+0x3ae>
     490:	1c c1       	rjmp	.+568    	; 0x6ca <play_note+0x5e6>
     492:	85 e8       	ldi	r24, 0x85	; 133
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9b bd       	out	0x2b, r25	; 43
     498:	8a bd       	out	0x2a, r24	; 42
     49a:	08 95       	ret
			      else {OCR1A=A6;}
			      break;
		 case 'B': if(flat){OCR1A=Bb6;}
			      else {OCR1A=B6;}
			      break;
		 case 'C': OCR1A=C6;
     49c:	86 e7       	ldi	r24, 0x76	; 118
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9b bd       	out	0x2b, r25	; 43
     4a2:	8a bd       	out	0x2a, r24	; 42
			   break;
     4a4:	08 95       	ret
		 case 'C': OCR1A=C2;
			   break;
		 case 'D': if(flat){OCR1A=Db2;}
			      else {OCR1A=D2;}
			      break;
		 case 'E': if(flat){OCR1A=Eb2;}
     4a6:	66 23       	and	r22, r22
     4a8:	09 f4       	brne	.+2      	; 0x4ac <play_note+0x3c8>
     4aa:	8c c1       	rjmp	.+792    	; 0x7c4 <play_note+0x6e0>
     4ac:	86 e4       	ldi	r24, 0x46	; 70
     4ae:	96 e0       	ldi	r25, 0x06	; 6
     4b0:	9b bd       	out	0x2b, r25	; 43
     4b2:	8a bd       	out	0x2a, r24	; 42
     4b4:	08 95       	ret
			      else {OCR1A=E2;}
			      break;
		 case 'F': OCR1A=F2;
     4b6:	86 e9       	ldi	r24, 0x96	; 150
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	9b bd       	out	0x2b, r25	; 43
     4bc:	8a bd       	out	0x2a, r24	; 42
			   break;
     4be:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb7;}
			      else {OCR1A=B7;}
			      break;
		 case 'C': OCR1A=C7;
			   break;
		 case 'D': if(flat){OCR1A=Db7;}
     4c0:	66 23       	and	r22, r22
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <play_note+0x3e2>
     4c4:	75 c1       	rjmp	.+746    	; 0x7b0 <play_note+0x6cc>
     4c6:	87 e3       	ldi	r24, 0x37	; 55
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	9b bd       	out	0x2b, r25	; 43
     4cc:	8a bd       	out	0x2a, r24	; 42
     4ce:	08 95       	ret
			      else {OCR1A=A7;}
			      break;
		 case 'B': if(flat){OCR1A=Bb7;}
			      else {OCR1A=B7;}
			      break;
		 case 'C': OCR1A=C7;
     4d0:	8a e3       	ldi	r24, 0x3A	; 58
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	9b bd       	out	0x2b, r25	; 43
     4d6:	8a bd       	out	0x2a, r24	; 42
			   break;
     4d8:	08 95       	ret
	      break;
      case 7: switch (note) {
		 case 'A': if(flat){OCR1A=Ab7;}
			      else {OCR1A=A7;}
			      break;
		 case 'B': if(flat){OCR1A=Bb7;}
     4da:	66 23       	and	r22, r22
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <play_note+0x3fc>
     4de:	fa c0       	rjmp	.+500    	; 0x6d4 <play_note+0x5f0>
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9b bd       	out	0x2b, r25	; 43
     4e6:	8a bd       	out	0x2a, r24	; 42
     4e8:	08 95       	ret
	      break;
      case 6: switch (note) {
		 case 'A': if(flat){OCR1A=Ab6;}
			      else {OCR1A=A6;}
			      break;
		 case 'B': if(flat){OCR1A=Bb6;}
     4ea:	66 23       	and	r22, r22
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <play_note+0x40c>
     4ee:	4c c1       	rjmp	.+664    	; 0x788 <play_note+0x6a4>
     4f0:	82 e4       	ldi	r24, 0x42	; 66
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	9b bd       	out	0x2b, r25	; 43
     4f6:	8a bd       	out	0x2a, r24	; 42
     4f8:	08 95       	ret
			      else {OCR1A=A0;}
			      break;
		 case 'B': if(flat){OCR1A=Bb0;}
			      else {OCR1A=B0;}
			      break;
		 case 'C': OCR1A=C0;
     4fa:	8c ed       	ldi	r24, 0xDC	; 220
     4fc:	9d e1       	ldi	r25, 0x1D	; 29
     4fe:	9b bd       	out	0x2b, r25	; 43
     500:	8a bd       	out	0x2a, r24	; 42
			   break;
     502:	08 95       	ret
		 case 'C': OCR1A=C4;
			   break;
		 case 'D': if(flat){OCR1A=Db4;}
			      else {OCR1A=D4;}
			      break;
		 case 'E': if(flat){OCR1A=Eb4;}
     504:	66 23       	and	r22, r22
     506:	09 f4       	brne	.+2      	; 0x50a <play_note+0x426>
     508:	3a c1       	rjmp	.+628    	; 0x77e <play_note+0x69a>
     50a:	80 e9       	ldi	r24, 0x90	; 144
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	9b bd       	out	0x2b, r25	; 43
     510:	8a bd       	out	0x2a, r24	; 42
     512:	08 95       	ret
			      else {OCR1A=E4;}
			      break;
		 case 'F': OCR1A=F4;
     514:	84 e6       	ldi	r24, 0x64	; 100
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	9b bd       	out	0x2b, r25	; 43
     51a:	8a bd       	out	0x2a, r24	; 42
			   break;
     51c:	08 95       	ret
   switch (octave) {
      case 0: switch (note) {
		 case 'A': if(flat){OCR1A=Ab0;}
			      else {OCR1A=A0;}
			      break;
		 case 'B': if(flat){OCR1A=Bb0;}
     51e:	66 23       	and	r22, r22
     520:	09 f4       	brne	.+2      	; 0x524 <play_note+0x440>
     522:	1e c1       	rjmp	.+572    	; 0x760 <play_note+0x67c>
     524:	80 ec       	ldi	r24, 0xC0	; 192
     526:	90 e1       	ldi	r25, 0x10	; 16
     528:	9b bd       	out	0x2b, r25	; 43
     52a:	8a bd       	out	0x2a, r24	; 42
     52c:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb1;}
			      else {OCR1A=B1;}
			      break;
		 case 'C': OCR1A=C1;
			   break;
		 case 'D': if(flat){OCR1A=Db1;}
     52e:	66 23       	and	r22, r22
     530:	09 f4       	brne	.+2      	; 0x534 <play_note+0x450>
     532:	b2 c0       	rjmp	.+356    	; 0x698 <play_note+0x5b4>
     534:	86 e1       	ldi	r24, 0x16	; 22
     536:	9e e0       	ldi	r25, 0x0E	; 14
     538:	9b bd       	out	0x2b, r25	; 43
     53a:	8a bd       	out	0x2a, r24	; 42
     53c:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb3;}
			      else {OCR1A=B3;}
			      break;
		 case 'C': OCR1A=C3;
			   break;
		 case 'D': if(flat){OCR1A=Db3;}
     53e:	66 23       	and	r22, r22
     540:	09 f4       	brne	.+2      	; 0x544 <play_note+0x460>
     542:	dc c0       	rjmp	.+440    	; 0x6fc <play_note+0x618>
     544:	84 e8       	ldi	r24, 0x84	; 132
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	9b bd       	out	0x2b, r25	; 43
     54a:	8a bd       	out	0x2a, r24	; 42
     54c:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb2;}
			      else {OCR1A=B2;}
			      break;
		 case 'C': OCR1A=C2;
			   break;
		 case 'D': if(flat){OCR1A=Db2;}
     54e:	66 23       	and	r22, r22
     550:	09 f4       	brne	.+2      	; 0x554 <play_note+0x470>
     552:	f2 c0       	rjmp	.+484    	; 0x738 <play_note+0x654>
     554:	8a e0       	ldi	r24, 0x0A	; 10
     556:	97 e0       	ldi	r25, 0x07	; 7
     558:	9b bd       	out	0x2b, r25	; 43
     55a:	8a bd       	out	0x2a, r24	; 42
     55c:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb6;}
			      else {OCR1A=B6;}
			      break;
		 case 'C': OCR1A=C6;
			   break;
		 case 'D': if(flat){OCR1A=Db6;}
     55e:	66 23       	and	r22, r22
     560:	09 f4       	brne	.+2      	; 0x564 <play_note+0x480>
     562:	f4 c0       	rjmp	.+488    	; 0x74c <play_note+0x668>
     564:	8f e6       	ldi	r24, 0x6F	; 111
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	9b bd       	out	0x2b, r25	; 43
     56a:	8a bd       	out	0x2a, r24	; 42
     56c:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb4;}
			      else {OCR1A=B4;}
			      break;
		 case 'C': OCR1A=C4;
			   break;
		 case 'D': if(flat){OCR1A=Db4;}
     56e:	66 23       	and	r22, r22
     570:	09 f4       	brne	.+2      	; 0x574 <play_note+0x490>
     572:	9c c0       	rjmp	.+312    	; 0x6ac <play_note+0x5c8>
     574:	81 ec       	ldi	r24, 0xC1	; 193
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	9b bd       	out	0x2b, r25	; 43
     57a:	8a bd       	out	0x2a, r24	; 42
     57c:	08 95       	ret
		 case 'B': if(flat){OCR1A=Bb0;}
			      else {OCR1A=B0;}
			      break;
		 case 'C': OCR1A=C0;
			   break;
		 case 'D': if(flat){OCR1A=Db0;}
     57e:	66 23       	and	r22, r22
     580:	09 f4       	brne	.+2      	; 0x584 <play_note+0x4a0>
     582:	cb c0       	rjmp	.+406    	; 0x71a <play_note+0x636>
     584:	80 e3       	ldi	r24, 0x30	; 48
     586:	9c e1       	ldi	r25, 0x1C	; 28
     588:	9b bd       	out	0x2b, r25	; 43
     58a:	8a bd       	out	0x2a, r24	; 42
     58c:	08 95       	ret
		 case 'C': OCR1A=C7;
			   break;
		 case 'D': if(flat){OCR1A=Db7;}
			      else {OCR1A=D7;}
			      break;
		 case 'E': if(flat){OCR1A=Eb7;}
     58e:	66 23       	and	r22, r22
     590:	09 f4       	brne	.+2      	; 0x594 <play_note+0x4b0>
     592:	73 c0       	rjmp	.+230    	; 0x67a <play_note+0x596>
     594:	81 e3       	ldi	r24, 0x31	; 49
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	9b bd       	out	0x2b, r25	; 43
     59a:	8a bd       	out	0x2a, r24	; 42
     59c:	08 95       	ret
		 case 'C': OCR1A=C5;
			   break;
		 case 'D': if(flat){OCR1A=Db5;}
			      else {OCR1A=D5;}
			      break;
		 case 'E': if(flat){OCR1A=Eb5;}
     59e:	66 23       	and	r22, r22
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <play_note+0x4c0>
     5a2:	e3 c0       	rjmp	.+454    	; 0x76a <play_note+0x686>
     5a4:	87 ec       	ldi	r24, 0xC7	; 199
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	9b bd       	out	0x2b, r25	; 43
     5aa:	8a bd       	out	0x2a, r24	; 42
     5ac:	08 95       	ret
			      else {OCR1A=A1;}
			      break;
		 case 'B': if(flat){OCR1A=Bb1;}
			      else {OCR1A=B1;}
			      break;
		 case 'C': OCR1A=C1;
     5ae:	8d ee       	ldi	r24, 0xED	; 237
     5b0:	9e e0       	ldi	r25, 0x0E	; 14
     5b2:	9b bd       	out	0x2b, r25	; 43
     5b4:	8a bd       	out	0x2a, r24	; 42
			   break;
     5b6:	08 95       	ret
		 case 'D': if(flat){OCR1A=Db1;}
			      else {OCR1A=D1;}
			      break;
		 case 'E': if(flat){OCR1A=Eb1;}
     5b8:	66 23       	and	r22, r22
     5ba:	09 f4       	brne	.+2      	; 0x5be <play_note+0x4da>
     5bc:	4f c0       	rjmp	.+158    	; 0x65c <play_note+0x578>
     5be:	8d e8       	ldi	r24, 0x8D	; 141
     5c0:	9c e0       	ldi	r25, 0x0C	; 12
     5c2:	9b bd       	out	0x2b, r25	; 43
     5c4:	8a bd       	out	0x2a, r24	; 42
     5c6:	08 95       	ret
			      else {OCR1A=E1;}
			      break;
		 case 'F': OCR1A=F1;
     5c8:	8e e2       	ldi	r24, 0x2E	; 46
     5ca:	9b e0       	ldi	r25, 0x0B	; 11
     5cc:	9b bd       	out	0x2b, r25	; 43
     5ce:	8a bd       	out	0x2a, r24	; 42
			   break;
     5d0:	08 95       	ret
			      else {OCR1A=A3;}
			      break;
		 case 'B': if(flat){OCR1A=Bb3;}
			      else {OCR1A=B3;}
			      break;
		 case 'C': OCR1A=C3;
     5d2:	8a eb       	ldi	r24, 0xBA	; 186
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	9b bd       	out	0x2b, r25	; 43
     5d8:	8a bd       	out	0x2a, r24	; 42
			   break;
     5da:	08 95       	ret
	      break;
      case 3: switch (note) {
		 case 'A': if(flat){OCR1A=Ab3;}
			      else {OCR1A=A3;}
			      break;
		 case 'B': if(flat){OCR1A=Bb3;}
     5dc:	66 23       	and	r22, r22
     5de:	09 f4       	brne	.+2      	; 0x5e2 <play_note+0x4fe>
     5e0:	7e c0       	rjmp	.+252    	; 0x6de <play_note+0x5fa>
     5e2:	87 e1       	ldi	r24, 0x17	; 23
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	9b bd       	out	0x2b, r25	; 43
     5e8:	8a bd       	out	0x2a, r24	; 42
     5ea:	08 95       	ret
		 case 'C': OCR1A=C6;
			   break;
		 case 'D': if(flat){OCR1A=Db6;}
			      else {OCR1A=D6;}
			      break;
		 case 'E': if(flat){OCR1A=Eb6;}
     5ec:	66 23       	and	r22, r22
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <play_note+0x50e>
     5f0:	7b c0       	rjmp	.+246    	; 0x6e8 <play_note+0x604>
     5f2:	83 e6       	ldi	r24, 0x63	; 99
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9b bd       	out	0x2b, r25	; 43
     5f8:	8a bd       	out	0x2a, r24	; 42
     5fa:	08 95       	ret
			      else {OCR1A=A2;}
			      break;
		 case 'B': if(flat){OCR1A=Bb2;}
			      else {OCR1A=B2;}
			      break;
		 case 'C': OCR1A=C2;
     5fc:	86 e7       	ldi	r24, 0x76	; 118
     5fe:	97 e0       	ldi	r25, 0x07	; 7
     600:	9b bd       	out	0x2b, r25	; 43
     602:	8a bd       	out	0x2a, r24	; 42
			   break;
     604:	08 95       	ret
			      else {OCR1A=D5;}
			      break;
		 case 'E': if(flat){OCR1A=Eb5;}
			      else {OCR1A=E5;}
			      break;
		 case 'F': OCR1A=F5;
     606:	81 eb       	ldi	r24, 0xB1	; 177
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	9b bd       	out	0x2b, r25	; 43
     60c:	8a bd       	out	0x2a, r24	; 42
			   break;
     60e:	08 95       	ret
			      else {OCR1A=D6;}
			      break;
		 case 'E': if(flat){OCR1A=Eb6;}
			      else {OCR1A=E6;}
			      break;
		 case 'F': OCR1A=F6;
     610:	88 e5       	ldi	r24, 0x58	; 88
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9b bd       	out	0x2b, r25	; 43
     616:	8a bd       	out	0x2a, r24	; 42
			   break;
     618:	08 95       	ret
			      else {OCR1A=A4;}
			      break;
		 case 'B': if(flat){OCR1A=Bb4;}
			      else {OCR1A=B4;}
			      break;
		 case 'C': OCR1A=C4;
     61a:	8c ed       	ldi	r24, 0xDC	; 220
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	9b bd       	out	0x2b, r25	; 43
     620:	8a bd       	out	0x2a, r24	; 42
			   break;
     622:	08 95       	ret
	      break;
      case 4: switch (note) {
		 case 'A': if(flat){OCR1A=Ab4;}
			      else {OCR1A=A4;}
			      break;
		 case 'B': if(flat){OCR1A=Bb4;}
     624:	66 23       	and	r22, r22
     626:	09 f4       	brne	.+2      	; 0x62a <play_note+0x546>
     628:	a5 c0       	rjmp	.+330    	; 0x774 <play_note+0x690>
     62a:	8b e0       	ldi	r24, 0x0B	; 11
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9b bd       	out	0x2b, r25	; 43
     630:	8a bd       	out	0x2a, r24	; 42
     632:	08 95       	ret
	      break;
      case 1: switch (note) {
		 case 'A': if(flat){OCR1A=Ab1;}
			      else {OCR1A=A1;}
			      break;
		 case 'B': if(flat){OCR1A=Bb1;}
     634:	66 23       	and	r22, r22
     636:	09 f4       	brne	.+2      	; 0x63a <play_note+0x556>
     638:	75 c0       	rjmp	.+234    	; 0x724 <play_note+0x640>
     63a:	80 e6       	ldi	r24, 0x60	; 96
     63c:	98 e0       	ldi	r25, 0x08	; 8
     63e:	9b bd       	out	0x2b, r25	; 43
     640:	8a bd       	out	0x2a, r24	; 42
     642:	08 95       	ret
			      else {OCR1A=D7;}
			      break;
		 case 'E': if(flat){OCR1A=Eb7;}
			      else {OCR1A=E7;}
			      break;
		 case 'F': OCR1A=F7;
     644:	8b e2       	ldi	r24, 0x2B	; 43
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	9b bd       	out	0x2b, r25	; 43
     64a:	8a bd       	out	0x2a, r24	; 42
			   break;
     64c:	08 95       	ret
	      break;
      case 2: switch (note) {
		 case 'A': if(flat){OCR1A=Ab2;}
			      else {OCR1A=A2;}
			      break;
		 case 'B': if(flat){OCR1A=Bb2;}
     64e:	66 23       	and	r22, r22
     650:	c9 f0       	breq	.+50     	; 0x684 <play_note+0x5a0>
     652:	8f e2       	ldi	r24, 0x2F	; 47
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	9b bd       	out	0x2b, r25	; 43
     658:	8a bd       	out	0x2a, r24	; 42
     65a:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db1;}
			      else {OCR1A=D1;}
			      break;
		 case 'E': if(flat){OCR1A=Eb1;}
			      else {OCR1A=E1;}
     65c:	88 ed       	ldi	r24, 0xD8	; 216
     65e:	9b e0       	ldi	r25, 0x0B	; 11
     660:	9b bd       	out	0x2b, r25	; 43
     662:	8a bd       	out	0x2a, r24	; 42
     664:	08 95       	ret
			      else {OCR1A=E0;}
			      break;
		 case 'F': OCR1A=F0;
			   break;
		 case 'G': if(flat){OCR1A=Gb0;}
			      else {OCR1A=G0;}
     666:	8d ee       	ldi	r24, 0xED	; 237
     668:	93 e1       	ldi	r25, 0x13	; 19
     66a:	9b bd       	out	0x2b, r25	; 43
     66c:	8a bd       	out	0x2a, r24	; 42
     66e:	08 95       	ret
			      else {OCR1A=E5;}
			      break;
		 case 'F': OCR1A=F5;
			   break;
		 case 'G': if(flat){OCR1A=Gb5;}
			      else {OCR1A=G5;}
     670:	8e e9       	ldi	r24, 0x9E	; 158
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9b bd       	out	0x2b, r25	; 43
     676:	8a bd       	out	0x2a, r24	; 42
     678:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db7;}
			      else {OCR1A=D7;}
			      break;
		 case 'E': if(flat){OCR1A=Eb7;}
			      else {OCR1A=E7;}
     67a:	8e e2       	ldi	r24, 0x2E	; 46
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	9b bd       	out	0x2b, r25	; 43
     680:	8a bd       	out	0x2a, r24	; 42
     682:	08 95       	ret
      case 2: switch (note) {
		 case 'A': if(flat){OCR1A=Ab2;}
			      else {OCR1A=A2;}
			      break;
		 case 'B': if(flat){OCR1A=Bb2;}
			      else {OCR1A=B2;}
     684:	83 ef       	ldi	r24, 0xF3	; 243
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	9b bd       	out	0x2b, r25	; 43
     68a:	8a bd       	out	0x2a, r24	; 42
     68c:	08 95       	ret
			      else {OCR1A=E1;}
			      break;
		 case 'F': OCR1A=F1;
			   break;
		 case 'G': if(flat){OCR1A=Gb1;}
			      else {OCR1A=G1;}
     68e:	86 ef       	ldi	r24, 0xF6	; 246
     690:	99 e0       	ldi	r25, 0x09	; 9
     692:	9b bd       	out	0x2b, r25	; 43
     694:	8a bd       	out	0x2a, r24	; 42
     696:	08 95       	ret
			      else {OCR1A=B1;}
			      break;
		 case 'C': OCR1A=C1;
			   break;
		 case 'D': if(flat){OCR1A=Db1;}
			      else {OCR1A=D1;}
     698:	8c e4       	ldi	r24, 0x4C	; 76
     69a:	9d e0       	ldi	r25, 0x0D	; 13
     69c:	9b bd       	out	0x2b, r25	; 43
     69e:	8a bd       	out	0x2a, r24	; 42
     6a0:	08 95       	ret
			      break;
	      } 
	      break;
      case 3: switch (note) {
		 case 'A': if(flat){OCR1A=Ab3;}
			      else {OCR1A=A3;}
     6a2:	87 e3       	ldi	r24, 0x37	; 55
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	9b bd       	out	0x2b, r25	; 43
     6a8:	8a bd       	out	0x2a, r24	; 42
     6aa:	08 95       	ret
			      else {OCR1A=B4;}
			      break;
		 case 'C': OCR1A=C4;
			   break;
		 case 'D': if(flat){OCR1A=Db4;}
			      else {OCR1A=D4;}
     6ac:	88 ea       	ldi	r24, 0xA8	; 168
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	9b bd       	out	0x2b, r25	; 43
     6b2:	8a bd       	out	0x2a, r24	; 42
     6b4:	08 95       	ret
			      else {OCR1A=E2;}
			      break;
		 case 'F': OCR1A=F2;
			   break;
		 case 'G': if(flat){OCR1A=Gb2;}
			      else {OCR1A=G2;}
     6b6:	8a ef       	ldi	r24, 0xFA	; 250
     6b8:	94 e0       	ldi	r25, 0x04	; 4
     6ba:	9b bd       	out	0x2b, r25	; 43
     6bc:	8a bd       	out	0x2a, r24	; 42
     6be:	08 95       	ret
			      break;
	      } 
	      break;
      case 6: switch (note) {
		 case 'A': if(flat){OCR1A=Ab6;}
			      else {OCR1A=A6;}
     6c0:	86 e4       	ldi	r24, 0x46	; 70
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9b bd       	out	0x2b, r25	; 43
     6c6:	8a bd       	out	0x2a, r24	; 42
     6c8:	08 95       	ret
      case 5: switch (note) {
		 case 'A': if(flat){OCR1A=Ab5;}
			      else {OCR1A=A5;}
			      break;
		 case 'B': if(flat){OCR1A=Bb5;}
			      else {OCR1A=B5;}
     6ca:	8d e7       	ldi	r24, 0x7D	; 125
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9b bd       	out	0x2b, r25	; 43
     6d0:	8a bd       	out	0x2a, r24	; 42
     6d2:	08 95       	ret
      case 7: switch (note) {
		 case 'A': if(flat){OCR1A=Ab7;}
			      else {OCR1A=A7;}
			      break;
		 case 'B': if(flat){OCR1A=Bb7;}
			      else {OCR1A=B7;}
     6d4:	8e e1       	ldi	r24, 0x1E	; 30
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9b bd       	out	0x2b, r25	; 43
     6da:	8a bd       	out	0x2a, r24	; 42
     6dc:	08 95       	ret
      case 3: switch (note) {
		 case 'A': if(flat){OCR1A=Ab3;}
			      else {OCR1A=A3;}
			      break;
		 case 'B': if(flat){OCR1A=Bb3;}
			      else {OCR1A=B3;}
     6de:	89 ef       	ldi	r24, 0xF9	; 249
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	9b bd       	out	0x2b, r25	; 43
     6e4:	8a bd       	out	0x2a, r24	; 42
     6e6:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db6;}
			      else {OCR1A=D6;}
			      break;
		 case 'E': if(flat){OCR1A=Eb6;}
			      else {OCR1A=E6;}
     6e8:	8d e5       	ldi	r24, 0x5D	; 93
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	9b bd       	out	0x2b, r25	; 43
     6ee:	8a bd       	out	0x2a, r24	; 42
     6f0:	08 95       	ret
			      break;
	      } 
	      break;
      case 2: switch (note) {
		 case 'A': if(flat){OCR1A=Ab2;}
			      else {OCR1A=A2;}
     6f2:	8f e6       	ldi	r24, 0x6F	; 111
     6f4:	94 e0       	ldi	r25, 0x04	; 4
     6f6:	9b bd       	out	0x2b, r25	; 43
     6f8:	8a bd       	out	0x2a, r24	; 42
     6fa:	08 95       	ret
			      else {OCR1A=B3;}
			      break;
		 case 'C': OCR1A=C3;
			   break;
		 case 'D': if(flat){OCR1A=Db3;}
			      else {OCR1A=D3;}
     6fc:	82 e5       	ldi	r24, 0x52	; 82
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	9b bd       	out	0x2b, r25	; 43
     702:	8a bd       	out	0x2a, r24	; 42
     704:	08 95       	ret
			      else {OCR1A=E4;}
			      break;
		 case 'F': OCR1A=F4;
			   break;
		 case 'G': if(flat){OCR1A=Gb4;}
			      else {OCR1A=G4;}
     706:	8d e3       	ldi	r24, 0x3D	; 61
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	9b bd       	out	0x2b, r25	; 43
     70c:	8a bd       	out	0x2a, r24	; 42
     70e:	08 95       	ret
			      else {OCR1A=E7;}
			      break;
		 case 'F': OCR1A=F7;
			   break;
		 case 'G': if(flat){OCR1A=Gb7;}
			      else {OCR1A=G7;}
     710:	86 e2       	ldi	r24, 0x26	; 38
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9b bd       	out	0x2b, r25	; 43
     716:	8a bd       	out	0x2a, r24	; 42
     718:	08 95       	ret
			      else {OCR1A=B0;}
			      break;
		 case 'C': OCR1A=C0;
			   break;
		 case 'D': if(flat){OCR1A=Db0;}
			      else {OCR1A=D0;}
     71a:	8a e9       	ldi	r24, 0x9A	; 154
     71c:	9a e1       	ldi	r25, 0x1A	; 26
     71e:	9b bd       	out	0x2b, r25	; 43
     720:	8a bd       	out	0x2a, r24	; 42
     722:	08 95       	ret
      case 1: switch (note) {
		 case 'A': if(flat){OCR1A=Ab1;}
			      else {OCR1A=A1;}
			      break;
		 case 'B': if(flat){OCR1A=Bb1;}
			      else {OCR1A=B1;}
     724:	87 ee       	ldi	r24, 0xE7	; 231
     726:	97 e0       	ldi	r25, 0x07	; 7
     728:	9b bd       	out	0x2b, r25	; 43
     72a:	8a bd       	out	0x2a, r24	; 42
     72c:	08 95       	ret
			      else {OCR1A=E6;}
			      break;
		 case 'F': OCR1A=F6;
			   break;
		 case 'G': if(flat){OCR1A=Gb6;}
			      else {OCR1A=G6;}
     72e:	8e e4       	ldi	r24, 0x4E	; 78
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	9b bd       	out	0x2b, r25	; 43
     734:	8a bd       	out	0x2a, r24	; 42
     736:	08 95       	ret
			      else {OCR1A=B2;}
			      break;
		 case 'C': OCR1A=C2;
			   break;
		 case 'D': if(flat){OCR1A=Db2;}
			      else {OCR1A=D2;}
     738:	85 ea       	ldi	r24, 0xA5	; 165
     73a:	96 e0       	ldi	r25, 0x06	; 6
     73c:	9b bd       	out	0x2b, r25	; 43
     73e:	8a bd       	out	0x2a, r24	; 42
     740:	08 95       	ret
			      break;
	      } 
	      break;
      case 4: switch (note) {
		 case 'A': if(flat){OCR1A=Ab4;}
			      else {OCR1A=A4;}
     742:	8b e1       	ldi	r24, 0x1B	; 27
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	9b bd       	out	0x2b, r25	; 43
     748:	8a bd       	out	0x2a, r24	; 42
     74a:	08 95       	ret
			      else {OCR1A=B6;}
			      break;
		 case 'C': OCR1A=C6;
			   break;
		 case 'D': if(flat){OCR1A=Db6;}
			      else {OCR1A=D6;}
     74c:	89 e6       	ldi	r24, 0x69	; 105
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9b bd       	out	0x2b, r25	; 43
     752:	8a bd       	out	0x2a, r24	; 42
     754:	08 95       	ret
			      break;
	      } 
	      break;
      case 1: switch (note) {
		 case 'A': if(flat){OCR1A=Ab1;}
			      else {OCR1A=A1;}
     756:	8f ed       	ldi	r24, 0xDF	; 223
     758:	98 e0       	ldi	r25, 0x08	; 8
     75a:	9b bd       	out	0x2b, r25	; 43
     75c:	8a bd       	out	0x2a, r24	; 42
     75e:	08 95       	ret
      case 0: switch (note) {
		 case 'A': if(flat){OCR1A=Ab0;}
			      else {OCR1A=A0;}
			      break;
		 case 'B': if(flat){OCR1A=Bb0;}
			      else {OCR1A=B0;}
     760:	80 ed       	ldi	r24, 0xD0	; 208
     762:	9f e0       	ldi	r25, 0x0F	; 15
     764:	9b bd       	out	0x2b, r25	; 43
     766:	8a bd       	out	0x2a, r24	; 42
     768:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db5;}
			      else {OCR1A=D5;}
			      break;
		 case 'E': if(flat){OCR1A=Eb5;}
			      else {OCR1A=E5;}
     76a:	8c eb       	ldi	r24, 0xBC	; 188
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9b bd       	out	0x2b, r25	; 43
     770:	8a bd       	out	0x2a, r24	; 42
     772:	08 95       	ret
      case 4: switch (note) {
		 case 'A': if(flat){OCR1A=Ab4;}
			      else {OCR1A=A4;}
			      break;
		 case 'B': if(flat){OCR1A=Bb4;}
			      else {OCR1A=B4;}
     774:	8c ef       	ldi	r24, 0xFC	; 252
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9b bd       	out	0x2b, r25	; 43
     77a:	8a bd       	out	0x2a, r24	; 42
     77c:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db4;}
			      else {OCR1A=D4;}
			      break;
		 case 'E': if(flat){OCR1A=Eb4;}
			      else {OCR1A=E4;}
     77e:	8a e7       	ldi	r24, 0x7A	; 122
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9b bd       	out	0x2b, r25	; 43
     784:	8a bd       	out	0x2a, r24	; 42
     786:	08 95       	ret
      case 6: switch (note) {
		 case 'A': if(flat){OCR1A=Ab6;}
			      else {OCR1A=A6;}
			      break;
		 case 'B': if(flat){OCR1A=Bb6;}
			      else {OCR1A=B6;}
     788:	8e e3       	ldi	r24, 0x3E	; 62
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9b bd       	out	0x2b, r25	; 43
     78e:	8a bd       	out	0x2a, r24	; 42
     790:	08 95       	ret
			      else {OCR1A=E3;}
			      break;
		 case 'F': OCR1A=F3;
			   break;
		 case 'G': if(flat){OCR1A=Gb3;}
			      else {OCR1A=G3;}
     792:	8c e7       	ldi	r24, 0x7C	; 124
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	9b bd       	out	0x2b, r25	; 43
     798:	8a bd       	out	0x2a, r24	; 42
     79a:	08 95       	ret
   beat = 0;             //reset the beat counter
   max_beat = duration;  //set the max beat
   switch (octave) {
      case 0: switch (note) {
		 case 'A': if(flat){OCR1A=Ab0;}
			      else {OCR1A=A0;}
     79c:	80 ec       	ldi	r24, 0xC0	; 192
     79e:	91 e1       	ldi	r25, 0x11	; 17
     7a0:	9b bd       	out	0x2b, r25	; 43
     7a2:	8a bd       	out	0x2a, r24	; 42
     7a4:	08 95       	ret
			      break;
	      } 
	      break;
      case 7: switch (note) {
		 case 'A': if(flat){OCR1A=Ab7;}
			      else {OCR1A=A7;}
     7a6:	82 e2       	ldi	r24, 0x22	; 34
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9b bd       	out	0x2b, r25	; 43
     7ac:	8a bd       	out	0x2a, r24	; 42
     7ae:	08 95       	ret
			      else {OCR1A=B7;}
			      break;
		 case 'C': OCR1A=C7;
			   break;
		 case 'D': if(flat){OCR1A=Db7;}
			      else {OCR1A=D7;}
     7b0:	84 e3       	ldi	r24, 0x34	; 52
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	9b bd       	out	0x2b, r25	; 43
     7b6:	8a bd       	out	0x2a, r24	; 42
     7b8:	08 95       	ret
			      else {OCR1A=B5;}
			      break;
		 case 'C': OCR1A=C5;
			   break;
		 case 'D': if(flat){OCR1A=Db5;}
			      else {OCR1A=D5;}
     7ba:	83 ed       	ldi	r24, 0xD3	; 211
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	9b bd       	out	0x2b, r25	; 43
     7c0:	8a bd       	out	0x2a, r24	; 42
     7c2:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db2;}
			      else {OCR1A=D2;}
			      break;
		 case 'E': if(flat){OCR1A=Eb2;}
			      else {OCR1A=E2;}
     7c4:	8b ee       	ldi	r24, 0xEB	; 235
     7c6:	95 e0       	ldi	r25, 0x05	; 5
     7c8:	9b bd       	out	0x2b, r25	; 43
     7ca:	8a bd       	out	0x2a, r24	; 42
     7cc:	08 95       	ret
			      break;
	      } 
	      break;
      case 8: switch (note) {
		 case 'A': if(flat){OCR1A=Ab8;}
			      else {OCR1A=A8;}
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9b bd       	out	0x2b, r25	; 43
     7d4:	8a bd       	out	0x2a, r24	; 42
     7d6:	08 95       	ret
			      else {OCR1A=B8;}
			      break;
		 case 'C': OCR1A=C8;
			   break;
		 case 'D': if(flat){OCR1A=Db8;}
			      else {OCR1A=D8;}
     7d8:	89 e1       	ldi	r24, 0x19	; 25
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9b bd       	out	0x2b, r25	; 43
     7de:	8a bd       	out	0x2a, r24	; 42
     7e0:	08 95       	ret
			      break;
	      } 
	      break;
      case 5: switch (note) {
		 case 'A': if(flat){OCR1A=Ab5;}
			      else {OCR1A=A5;}
     7e2:	8d e8       	ldi	r24, 0x8D	; 141
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9b bd       	out	0x2b, r25	; 43
     7e8:	8a bd       	out	0x2a, r24	; 42
     7ea:	08 95       	ret
      case 8: switch (note) {
		 case 'A': if(flat){OCR1A=Ab8;}
			      else {OCR1A=A8;}
			      break;
		 case 'B': if(flat){OCR1A=Bb8;}
			      else {OCR1A=B8;}
     7ec:	85 e0       	ldi	r24, 0x05	; 5
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9b bd       	out	0x2b, r25	; 43
     7f2:	8a bd       	out	0x2a, r24	; 42
     7f4:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db3;}
			      else {OCR1A=D3;}
			      break;
		 case 'E': if(flat){OCR1A=Eb3;}
			      else {OCR1A=E3;}
     7f6:	85 ef       	ldi	r24, 0xF5	; 245
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	9b bd       	out	0x2b, r25	; 43
     7fc:	8a bd       	out	0x2a, r24	; 42
     7fe:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db0;}
			      else {OCR1A=D0;}
			      break;
		 case 'E': if(flat){OCR1A=Eb0;}
			      else {OCR1A=E0;}
     800:	82 eb       	ldi	r24, 0xB2	; 178
     802:	97 e1       	ldi	r25, 0x17	; 23
     804:	9b bd       	out	0x2b, r25	; 43
     806:	8a bd       	out	0x2a, r24	; 42
     808:	08 95       	ret
			      else {OCR1A=E8;}
			      break;
		 case 'F': OCR1A=F8;
			   break;
		 case 'G': if(flat){OCR1A=Gb8;}
			      else {OCR1A=G8;}
     80a:	8d e0       	ldi	r24, 0x0D	; 13
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9b bd       	out	0x2b, r25	; 43
     810:	8a bd       	out	0x2a, r24	; 42
     812:	08 95       	ret
			   break;
		 case 'D': if(flat){OCR1A=Db8;}
			      else {OCR1A=D8;}
			      break;
		 case 'E': if(flat){OCR1A=Eb8;}
			      else {OCR1A=E8;}
     814:	85 e1       	ldi	r24, 0x15	; 21
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9b bd       	out	0x2b, r25	; 43
     81a:	8a bd       	out	0x2a, r24	; 42
     81c:	08 95       	ret

0000081e <ADC_init>:
 * Desc: Initilize an ADC
 */
void ADC_init(void){

   //Set all PORTF to be inputs
   DDRF &= ~(1<<0);
     81e:	e1 e6       	ldi	r30, 0x61	; 97
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	8e 7f       	andi	r24, 0xFE	; 254
     826:	80 83       	st	Z, r24
   //Active high 
   PORTF = 0x00;
     828:	10 92 62 00 	sts	0x0062, r1

   //Using external common GND, Left-Aligned. 
   ADMUX = (1<<REFS0 | 1<<ADLAR);
     82c:	80 e6       	ldi	r24, 0x60	; 96
     82e:	87 b9       	out	0x07, r24	; 7

   //Enable ADC, Start Conversion, Free Running Mode, Interrupt, /128 prescale.
   ADCSRA = (1<<ADEN | 1<<ADSC | 1<<ADFR | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     830:	8f ee       	ldi	r24, 0xEF	; 239
     832:	86 b9       	out	0x06, r24	; 6

}
     834:	08 95       	ret

00000836 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
   static uint16_t state = 0; //holds present state
   state = (state << 1) | ( bit_is_clear(PINA, button)) | 0xE000;
     836:	49 b3       	in	r20, 0x19	; 25
     838:	20 91 78 01 	lds	r18, 0x0178
     83c:	30 91 79 01 	lds	r19, 0x0179
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	30 6e       	ori	r19, 0xE0	; 224
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	02 c0       	rjmp	.+4      	; 0x84e <chk_buttons+0x18>
     84a:	55 95       	asr	r21
     84c:	47 95       	ror	r20
     84e:	8a 95       	dec	r24
     850:	e2 f7       	brpl	.-8      	; 0x84a <chk_buttons+0x14>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	40 ff       	sbrs	r20, 0
     858:	02 c0       	rjmp	.+4      	; 0x85e <chk_buttons+0x28>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	28 2b       	or	r18, r24
     860:	39 2b       	or	r19, r25
     862:	30 93 79 01 	sts	0x0179, r19
     866:	20 93 78 01 	sts	0x0178, r18
   if (state == 0xF000) return 1;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 ef       	ldi	r25, 0xF0	; 240
     86e:	20 30       	cpi	r18, 0x00	; 0
     870:	39 07       	cpc	r19, r25
     872:	09 f0       	breq	.+2      	; 0x876 <chk_buttons+0x40>
     874:	80 e0       	ldi	r24, 0x00	; 0
   return 0;

}
     876:	08 95       	ret

00000878 <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t val) {
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	fc 01       	movw	r30, r24
   //Let's not use colon here
   bare_status &= ~(1<<COLON_DISP);
     87e:	80 91 94 01 	lds	r24, 0x0194
     882:	8f 77       	andi	r24, 0x7F	; 127
     884:	80 93 94 01 	sts	0x0194, r24
   //determine how many digits there are 
   //Filling in backward
   uint8_t i;
   if( !(bare_status & (1<<COLON_DISP)) ){
      segment_data[0] = val%10;
     888:	2a e0       	ldi	r18, 0x0A	; 10
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	cf 01       	movw	r24, r30
     88e:	b9 01       	movw	r22, r18
     890:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     894:	80 93 95 01 	sts	0x0195, r24
      segment_data[1] = val/10%10;
     898:	cb 01       	movw	r24, r22
     89a:	b9 01       	movw	r22, r18
     89c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     8a0:	18 2f       	mov	r17, r24
     8a2:	80 93 96 01 	sts	0x0196, r24
      segment_data[2] = 10; 
     8a6:	4a e0       	ldi	r20, 0x0A	; 10
     8a8:	40 93 97 01 	sts	0x0197, r20
      segment_data[3] = val/100%10;
     8ac:	cf 01       	movw	r24, r30
     8ae:	64 e6       	ldi	r22, 0x64	; 100
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     8b6:	cb 01       	movw	r24, r22
     8b8:	b9 01       	movw	r22, r18
     8ba:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     8be:	08 2f       	mov	r16, r24
     8c0:	80 93 98 01 	sts	0x0198, r24
      segment_data[4] = val/1000%10;
     8c4:	cf 01       	movw	r24, r30
     8c6:	68 ee       	ldi	r22, 0xE8	; 232
     8c8:	73 e0       	ldi	r23, 0x03	; 3
     8ca:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     8ce:	cb 01       	movw	r24, r22
     8d0:	b9 01       	movw	r22, r18
     8d2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     8d6:	80 93 99 01 	sts	0x0199, r24

      //Turning leading 0 off
      if(segment_data[4]==0){
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	51 f4       	brne	.+20     	; 0x8f2 <segsum+0x7a>
	 segment_data[4] = 10;
     8de:	40 93 99 01 	sts	0x0199, r20

	 if(segment_data[3]==0){
     8e2:	00 23       	and	r16, r16
     8e4:	31 f4       	brne	.+12     	; 0x8f2 <segsum+0x7a>
	    segment_data[3] = 10;
     8e6:	40 93 98 01 	sts	0x0198, r20

	    if(segment_data[1]==0){
     8ea:	11 23       	and	r17, r17
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <segsum+0x7a>
	       segment_data[1] = 10;
     8ee:	40 93 96 01 	sts	0x0196, r20
      }


   }
   //Prevent ghosting
   PORTB = ((0x8<<4) & PORTB)|(5<<4); 
     8f2:	88 b3       	in	r24, 0x18	; 24
     8f4:	80 78       	andi	r24, 0x80	; 128
     8f6:	80 65       	ori	r24, 0x50	; 80
     8f8:	88 bb       	out	0x18, r24	; 24
}//segment_sum
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <disp_time>:

//Displaying time
void disp_time(void){
   //Colon enabled
   bare_status |= (1<<COLON_DISP);
     900:	20 91 94 01 	lds	r18, 0x0194
     904:	20 68       	ori	r18, 0x80	; 128
     906:	20 93 94 01 	sts	0x0194, r18
   if(bare_status & (1<<COLON_DISP)){
      if((mode != EDIT_ATIME)){
     90a:	80 91 7e 01 	lds	r24, 0x017E
     90e:	90 91 7f 01 	lds	r25, 0x017F
     912:	84 38       	cpi	r24, 0x84	; 132
     914:	91 05       	cpc	r25, r1
     916:	b9 f1       	breq	.+110    	; 0x986 <disp_time+0x86>
	 if(bare_status & (1<<MIL_TIME)){ //AM-PM mode
     918:	24 ff       	sbrs	r18, 4
     91a:	1e c0       	rjmp	.+60     	; 0x958 <disp_time+0x58>
	    if(now.hr > 12){
     91c:	80 91 58 01 	lds	r24, 0x0158
     920:	8d 30       	cpi	r24, 0x0D	; 13
     922:	08 f4       	brcc	.+2      	; 0x926 <disp_time+0x26>
     924:	49 c0       	rjmp	.+146    	; 0x9b8 <disp_time+0xb8>
	       segment_data[4] = ((now.hr-12)/10) + 12; //0. or 1.
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0c 97       	sbiw	r24, 0x0c	; 12
     92a:	6a e0       	ldi	r22, 0x0A	; 10
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     932:	64 5f       	subi	r22, 0xF4	; 244
     934:	60 93 99 01 	sts	0x0199, r22
	       segment_data[3] = ((now.hr-12)%10);
     938:	80 93 98 01 	sts	0x0198, r24
	       segment_data[3] = 2; 
	    }else{
	       segment_data[4] = now.hr/10;
	       segment_data[3] = now.hr%10;
	    }
	    segment_data[1] = now.min/10;
     93c:	80 91 59 01 	lds	r24, 0x0159
     940:	6a e0       	ldi	r22, 0x0A	; 10
     942:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     946:	80 93 96 01 	sts	0x0196, r24
	    segment_data[0] = now.min%10;
     94a:	90 93 95 01 	sts	0x0195, r25
	 }

      }
   }
   //Prevent ghosting
   PORTB = ((0x8<<4) & PORTB)|(5<<4); 
     94e:	88 b3       	in	r24, 0x18	; 24
     950:	80 78       	andi	r24, 0x80	; 128
     952:	80 65       	ori	r24, 0x50	; 80
     954:	88 bb       	out	0x18, r24	; 24
}
     956:	08 95       	ret
	       segment_data[3] = now.hr%10;
	    }
	    segment_data[1] = now.min/10;
	    segment_data[0] = now.min%10;
	 }else{
	    segment_data[4] = now.hr/10;
     958:	80 91 58 01 	lds	r24, 0x0158
     95c:	2a e0       	ldi	r18, 0x0A	; 10
     95e:	62 2f       	mov	r22, r18
     960:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     964:	80 93 99 01 	sts	0x0199, r24
	    segment_data[3] = now.hr%10 ;
     968:	90 93 98 01 	sts	0x0198, r25
	    segment_data[1] = now.min/10;
     96c:	80 91 59 01 	lds	r24, 0x0159
     970:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     974:	80 93 96 01 	sts	0x0196, r24
	    segment_data[0] = now.min%10;
     978:	90 93 95 01 	sts	0x0195, r25
	 }

      }
   }
   //Prevent ghosting
   PORTB = ((0x8<<4) & PORTB)|(5<<4); 
     97c:	88 b3       	in	r24, 0x18	; 24
     97e:	80 78       	andi	r24, 0x80	; 128
     980:	80 65       	ori	r24, 0x50	; 80
     982:	88 bb       	out	0x18, r24	; 24
}
     984:	08 95       	ret
	    segment_data[3] = now.hr%10 ;
	    segment_data[1] = now.min/10;
	    segment_data[0] = now.min%10;
	 }
      }else{
	 if(bare_status & (1<<MIL_TIME)){ //AM-PM mode
     986:	24 ff       	sbrs	r18, 4
     988:	23 c0       	rjmp	.+70     	; 0x9d0 <disp_time+0xd0>
	    if(alarm_time.hr > 12){
     98a:	80 91 5d 01 	lds	r24, 0x015D
     98e:	8d 30       	cpi	r24, 0x0D	; 13
     990:	c8 f5       	brcc	.+114    	; 0xa04 <disp_time+0x104>
	       segment_data[4] = ((alarm_time.hr-12)/10) + 12; //0. or 1.
	       segment_data[3] = ((alarm_time.hr-12)%10);
	    }else if(alarm_time.hr == 0){
     992:	88 23       	and	r24, r24
     994:	09 f0       	breq	.+2      	; 0x998 <disp_time+0x98>
     996:	42 c0       	rjmp	.+132    	; 0xa1c <disp_time+0x11c>
	       segment_data[4] = 1;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 99 01 	sts	0x0199, r24
	       segment_data[3] = 2;
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	80 93 98 01 	sts	0x0198, r24
	       segment_data[3] = 2; 
	    }else{
	       segment_data[4] = alarm_time.hr/10;
	       segment_data[3] = alarm_time.hr%10;
	    }
	    segment_data[1] = alarm_time.min/10;
     9a4:	80 91 5e 01 	lds	r24, 0x015E
     9a8:	6a e0       	ldi	r22, 0x0A	; 10
     9aa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     9ae:	80 93 96 01 	sts	0x0196, r24
	    segment_data[0] = alarm_time.min%10;
     9b2:	90 93 95 01 	sts	0x0195, r25
     9b6:	cb cf       	rjmp	.-106    	; 0x94e <disp_time+0x4e>
      if((mode != EDIT_ATIME)){
	 if(bare_status & (1<<MIL_TIME)){ //AM-PM mode
	    if(now.hr > 12){
	       segment_data[4] = ((now.hr-12)/10) + 12; //0. or 1.
	       segment_data[3] = ((now.hr-12)%10);
	    }else if(now.hr == 0){
     9b8:	88 23       	and	r24, r24
     9ba:	e9 f0       	breq	.+58     	; 0x9f6 <disp_time+0xf6>
	       segment_data[4] = 1;
	       segment_data[3] = 2;
	    }else if(now.hr == 12){
     9bc:	8c 30       	cpi	r24, 0x0C	; 12
     9be:	c1 f1       	breq	.+112    	; 0xa30 <disp_time+0x130>
	       segment_data[4] = 13; //1.
	       segment_data[3] = 2; 
	    }else{
	       segment_data[4] = now.hr/10;
     9c0:	6a e0       	ldi	r22, 0x0A	; 10
     9c2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     9c6:	80 93 99 01 	sts	0x0199, r24
	       segment_data[3] = now.hr%10;
     9ca:	90 93 98 01 	sts	0x0198, r25
     9ce:	b6 cf       	rjmp	.-148    	; 0x93c <disp_time+0x3c>
	       segment_data[3] = alarm_time.hr%10;
	    }
	    segment_data[1] = alarm_time.min/10;
	    segment_data[0] = alarm_time.min%10;
	 }else{
	    segment_data[4] = alarm_time.hr/10;
     9d0:	80 91 5d 01 	lds	r24, 0x015D
     9d4:	2a e0       	ldi	r18, 0x0A	; 10
     9d6:	62 2f       	mov	r22, r18
     9d8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     9dc:	80 93 99 01 	sts	0x0199, r24
	    segment_data[3] = alarm_time.hr%10 ;
     9e0:	90 93 98 01 	sts	0x0198, r25
	    segment_data[1] = alarm_time.min/10;
     9e4:	80 91 5e 01 	lds	r24, 0x015E
     9e8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     9ec:	80 93 96 01 	sts	0x0196, r24
	    segment_data[0] = alarm_time.min%10;
     9f0:	90 93 95 01 	sts	0x0195, r25
     9f4:	ac cf       	rjmp	.-168    	; 0x94e <disp_time+0x4e>
	 if(bare_status & (1<<MIL_TIME)){ //AM-PM mode
	    if(now.hr > 12){
	       segment_data[4] = ((now.hr-12)/10) + 12; //0. or 1.
	       segment_data[3] = ((now.hr-12)%10);
	    }else if(now.hr == 0){
	       segment_data[4] = 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 99 01 	sts	0x0199, r24
	       segment_data[3] = 2;
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	80 93 98 01 	sts	0x0198, r24
     a02:	9c cf       	rjmp	.-200    	; 0x93c <disp_time+0x3c>
	    segment_data[0] = now.min%10;
	 }
      }else{
	 if(bare_status & (1<<MIL_TIME)){ //AM-PM mode
	    if(alarm_time.hr > 12){
	       segment_data[4] = ((alarm_time.hr-12)/10) + 12; //0. or 1.
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0c 97       	sbiw	r24, 0x0c	; 12
     a08:	6a e0       	ldi	r22, 0x0A	; 10
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     a10:	64 5f       	subi	r22, 0xF4	; 244
     a12:	60 93 99 01 	sts	0x0199, r22
	       segment_data[3] = ((alarm_time.hr-12)%10);
     a16:	80 93 98 01 	sts	0x0198, r24
     a1a:	c4 cf       	rjmp	.-120    	; 0x9a4 <disp_time+0xa4>
	    }else if(alarm_time.hr == 0){
	       segment_data[4] = 1;
	       segment_data[3] = 2;
	    }else if(alarm_time.hr == 12){
     a1c:	8c 30       	cpi	r24, 0x0C	; 12
     a1e:	79 f0       	breq	.+30     	; 0xa3e <disp_time+0x13e>
	       segment_data[4] = 13; //1.
	       segment_data[3] = 2; 
	    }else{
	       segment_data[4] = alarm_time.hr/10;
     a20:	6a e0       	ldi	r22, 0x0A	; 10
     a22:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
     a26:	80 93 99 01 	sts	0x0199, r24
	       segment_data[3] = alarm_time.hr%10;
     a2a:	90 93 98 01 	sts	0x0198, r25
     a2e:	ba cf       	rjmp	.-140    	; 0x9a4 <disp_time+0xa4>
	       segment_data[3] = ((now.hr-12)%10);
	    }else if(now.hr == 0){
	       segment_data[4] = 1;
	       segment_data[3] = 2;
	    }else if(now.hr == 12){
	       segment_data[4] = 13; //1.
     a30:	8d e0       	ldi	r24, 0x0D	; 13
     a32:	80 93 99 01 	sts	0x0199, r24
	       segment_data[3] = 2; 
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	80 93 98 01 	sts	0x0198, r24
     a3c:	7f cf       	rjmp	.-258    	; 0x93c <disp_time+0x3c>
	       segment_data[3] = ((alarm_time.hr-12)%10);
	    }else if(alarm_time.hr == 0){
	       segment_data[4] = 1;
	       segment_data[3] = 2;
	    }else if(alarm_time.hr == 12){
	       segment_data[4] = 13; //1.
     a3e:	8d e0       	ldi	r24, 0x0D	; 13
     a40:	80 93 99 01 	sts	0x0199, r24
	       segment_data[3] = 2; 
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	80 93 98 01 	sts	0x0198, r24
     a4a:	ac cf       	rjmp	.-168    	; 0x9a4 <disp_time+0xa4>

00000a4c <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
   DDRB  |=  (1<<PB2) | (1<<PB1) | (1<<PB0);           //Turn on SS, MOSI, SCLK
     a4c:	87 b3       	in	r24, 0x17	; 23
     a4e:	87 60       	ori	r24, 0x07	; 7
     a50:	87 bb       	out	0x17, r24	; 23
   SPCR  |=  ( 1<<SPE | 1<<MSTR );  //set up SPI mode
     a52:	8d b1       	in	r24, 0x0d	; 13
     a54:	80 65       	ori	r24, 0x50	; 80
     a56:	8d b9       	out	0x0d, r24	; 13
   SPSR  |=  (1<<SPI2X);           // double speed operation
     a58:	70 9a       	sbi	0x0e, 0	; 14
}//spi_init
     a5a:	08 95       	ret

00000a5c <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
   TIMSK |= (1<<TOIE0);
     a5c:	87 b7       	in	r24, 0x37	; 55
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	87 bf       	out	0x37, r24	; 55
   TCCR0 |= (1<<CS02 | 1<<CS00);
     a62:	83 b7       	in	r24, 0x33	; 51
     a64:	85 60       	ori	r24, 0x05	; 5
     a66:	83 bf       	out	0x33, r24	; 51
}
     a68:	08 95       	ret

00000a6a <tcnt1_init>:
 * Input : None
 * Output: None
 */
void tcnt1_init(void){
   //PORTC Pin2 as an output for TCNT waveform
   DDRC  |= (1<<PC2);
     a6a:	a2 9a       	sbi	0x14, 2	; 20
   //Enable timer interrupt mask, comparing w/ OCF1A
   TIMSK |= (1<<OCIE1A);
     a6c:	87 b7       	in	r24, 0x37	; 55
     a6e:	80 61       	ori	r24, 0x10	; 16
     a70:	87 bf       	out	0x37, r24	; 55
   //CTC mode, /1024 prescaling 
   TCCR1B = (1<<WGM12 | 1<<CS12 | 1<<CS10);
     a72:	8d e0       	ldi	r24, 0x0D	; 13
     a74:	8e bd       	out	0x2e, r24	; 46
   OCR1A = 0xFFFF;
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	9f ef       	ldi	r25, 0xFF	; 255
     a7a:	9b bd       	out	0x2b, r25	; 43
     a7c:	8a bd       	out	0x2a, r24	; 42
}
     a7e:	08 95       	ret

00000a80 <tcnt2_init>:
 * Input : None
 * Output: None
 */
void tcnt2_init(void){
   //PORTB Pin7 as an output for PWM waveform
   DDRB  |= (1<<PB7);
     a80:	bf 9a       	sbi	0x17, 7	; 23

   //Enable interrupt for the TCNT2 for button check and encoder
   TIMSK |= (1<<TOIE2);
     a82:	87 b7       	in	r24, 0x37	; 55
     a84:	80 64       	ori	r24, 0x40	; 64
     a86:	87 bf       	out	0x37, r24	; 55

   //Fast-PWM mode, no prescaling, Set OCR2 on compare match
   TCCR2 = (1<<WGM21 | 1<<WGM20 | 1<<CS20 | 1<<COM21 | 1<<COM20);
     a88:	89 e7       	ldi	r24, 0x79	; 121
     a8a:	85 bd       	out	0x25, r24	; 37

   //Clear at 0x64
   OCR2  = 0xFF; 
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	83 bd       	out	0x23, r24	; 35
}
     a90:	08 95       	ret

00000a92 <tcnt3_init>:
 * Input : None
 * Output: None
 */
void tcnt3_init(void){
   //PORTE Pin3 as an output for PWM waveform
   DDRE  |= (1<<PE3);
     a92:	13 9a       	sbi	0x02, 3	; 2

   //Fast-PWM mode, no prescaling, ICR3 top, OCR3A comp (clear on match) 
   TCCR3A = (1<<COM3A1 | 1<<COM3A0 | 1<<WGM31);
     a94:	82 ec       	ldi	r24, 0xC2	; 194
     a96:	80 93 8b 00 	sts	0x008B, r24
   TCCR3B = (1<<WGM33 | 1<<WGM32 | 1<<CS30);
     a9a:	89 e1       	ldi	r24, 0x19	; 25
     a9c:	80 93 8a 00 	sts	0x008A, r24

   ICR3   = 0x64;
     aa0:	84 e6       	ldi	r24, 0x64	; 100
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	90 93 81 00 	sts	0x0081, r25
     aa8:	80 93 80 00 	sts	0x0080, r24
   OCR3A  = 90; 
     aac:	8a e5       	ldi	r24, 0x5A	; 90
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	90 93 87 00 	sts	0x0087, r25
     ab4:	80 93 86 00 	sts	0x0086, r24
}
     ab8:	08 95       	ret

00000aba <read_encoder>:
   uint8_t cur_enco = 0;
   uint8_t idx = 0;
   uint8_t dir = 0;
   uint8_t out = 0;

   idx = (enco_history[enco_num]<<2) | ( cur_enco=(((0x3<<(enco_num*2)) & spdr_val)>>(enco_num*2)) );
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	ac 01       	movw	r20, r24
     abe:	44 0f       	add	r20, r20
     ac0:	55 1f       	adc	r21, r21
     ac2:	23 e0       	ldi	r18, 0x03	; 3
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	04 2e       	mov	r0, r20
     ac8:	02 c0       	rjmp	.+4      	; 0xace <read_encoder+0x14>
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <read_encoder+0x10>
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	26 23       	and	r18, r22
     ad6:	37 23       	and	r19, r23
     ad8:	02 c0       	rjmp	.+4      	; 0xade <read_encoder+0x24>
     ada:	35 95       	asr	r19
     adc:	27 95       	ror	r18
     ade:	4a 95       	dec	r20
     ae0:	e2 f7       	brpl	.-8      	; 0xada <read_encoder+0x20>
     ae2:	dc 01       	movw	r26, r24
     ae4:	ac 58       	subi	r26, 0x8C	; 140
     ae6:	be 4f       	sbci	r27, 0xFE	; 254
     ae8:	ec 91       	ld	r30, X
     aea:	ee 0f       	add	r30, r30
     aec:	ee 0f       	add	r30, r30
     aee:	e2 2b       	or	r30, r18
   dir = enco_lookup_table[idx];
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	e3 5c       	subi	r30, 0xC3	; 195
     af4:	fe 4f       	sbci	r31, 0xFE	; 254
     af6:	30 81       	ld	r19, Z
   (dir == ENCO_CW) ? (++(enco_trend[enco_num])): 0; 
     af8:	31 30       	cpi	r19, 0x01	; 1
     afa:	e9 f0       	breq	.+58     	; 0xb36 <read_encoder+0x7c>
   (dir == ENCO_CCW) ? (--(enco_trend[enco_num])): 0; 
     afc:	32 30       	cpi	r19, 0x02	; 2
     afe:	29 f0       	breq	.+10     	; 0xb0a <read_encoder+0x50>

   if( cur_enco == 0b11 ){
     b00:	23 30       	cpi	r18, 0x03	; 3
     b02:	59 f0       	breq	.+22     	; 0xb1a <read_encoder+0x60>
   static uint8_t enco_history[NUM_OF_ENCO] = {0};

   uint8_t cur_enco = 0;
   uint8_t idx = 0;
   uint8_t dir = 0;
   uint8_t out = 0;
     b04:	80 e0       	ldi	r24, 0x00	; 0
      if( (enco_trend[enco_num]<=0xFF) && (enco_trend[enco_num]>0x90) ){
	 out = ENCO_CCW;
      }
      enco_trend[enco_num] = 0;
   }
   enco_history[enco_num] = cur_enco;
     b06:	2c 93       	st	X, r18

   return out;
}
     b08:	08 95       	ret
   uint8_t out = 0;

   idx = (enco_history[enco_num]<<2) | ( cur_enco=(((0x3<<(enco_num*2)) & spdr_val)>>(enco_num*2)) );
   dir = enco_lookup_table[idx];
   (dir == ENCO_CW) ? (++(enco_trend[enco_num])): 0; 
   (dir == ENCO_CCW) ? (--(enco_trend[enco_num])): 0; 
     b0a:	fc 01       	movw	r30, r24
     b0c:	ea 58       	subi	r30, 0x8A	; 138
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	30 81       	ld	r19, Z
     b12:	31 50       	subi	r19, 0x01	; 1
     b14:	30 83       	st	Z, r19

   if( cur_enco == 0b11 ){
     b16:	23 30       	cpi	r18, 0x03	; 3
     b18:	a9 f7       	brne	.-22     	; 0xb04 <read_encoder+0x4a>
      if( (enco_trend[enco_num]>1) && (enco_trend[enco_num]<100) ){
     b1a:	fc 01       	movw	r30, r24
     b1c:	ea 58       	subi	r30, 0x8A	; 138
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	80 81       	ld	r24, Z
     b22:	98 2f       	mov	r25, r24
     b24:	92 50       	subi	r25, 0x02	; 2
     b26:	92 36       	cpi	r25, 0x62	; 98
     b28:	68 f0       	brcs	.+26     	; 0xb44 <read_encoder+0x8a>
	 out = ENCO_CW;
      }
      if( (enco_trend[enco_num]<=0xFF) && (enco_trend[enco_num]>0x90) ){
     b2a:	81 39       	cpi	r24, 0x91	; 145
     b2c:	70 f0       	brcs	.+28     	; 0xb4a <read_encoder+0x90>
	 out = ENCO_CCW;
     b2e:	82 e0       	ldi	r24, 0x02	; 2
      }
      enco_trend[enco_num] = 0;
     b30:	10 82       	st	Z, r1
   }
   enco_history[enco_num] = cur_enco;
     b32:	2c 93       	st	X, r18

   return out;
}
     b34:	08 95       	ret
   uint8_t dir = 0;
   uint8_t out = 0;

   idx = (enco_history[enco_num]<<2) | ( cur_enco=(((0x3<<(enco_num*2)) & spdr_val)>>(enco_num*2)) );
   dir = enco_lookup_table[idx];
   (dir == ENCO_CW) ? (++(enco_trend[enco_num])): 0; 
     b36:	fc 01       	movw	r30, r24
     b38:	ea 58       	subi	r30, 0x8A	; 138
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	30 81       	ld	r19, Z
     b3e:	3f 5f       	subi	r19, 0xFF	; 255
     b40:	30 83       	st	Z, r19
     b42:	de cf       	rjmp	.-68     	; 0xb00 <read_encoder+0x46>
   (dir == ENCO_CCW) ? (--(enco_trend[enco_num])): 0; 

   if( cur_enco == 0b11 ){
      if( (enco_trend[enco_num]>1) && (enco_trend[enco_num]<100) ){
	 out = ENCO_CW;
     b44:	81 e0       	ldi	r24, 0x01	; 1
      }
      if( (enco_trend[enco_num]<=0xFF) && (enco_trend[enco_num]>0x90) ){
	 out = ENCO_CCW;
      }
      enco_trend[enco_num] = 0;
     b46:	10 82       	st	Z, r1
     b48:	f4 cf       	rjmp	.-24     	; 0xb32 <read_encoder+0x78>
   static uint8_t enco_history[NUM_OF_ENCO] = {0};

   uint8_t cur_enco = 0;
   uint8_t idx = 0;
   uint8_t dir = 0;
   uint8_t out = 0;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
	 out = ENCO_CW;
      }
      if( (enco_trend[enco_num]<=0xFF) && (enco_trend[enco_num]>0x90) ){
	 out = ENCO_CCW;
      }
      enco_trend[enco_num] = 0;
     b4c:	10 82       	st	Z, r1
     b4e:	f1 cf       	rjmp	.-30     	; 0xb32 <read_encoder+0x78>

00000b50 <mega128_temperature>:
 */
void mega128_temperature(){
   uint16_t mega128_temp;
   char temp_unit = 'C';
   //read temperature data from LM73 (2 bytes) (twi_mas ter.h)
   twi_start_rd(LM73_ADDRESS,lm73_rd_buf,2); 
     b50:	80 e9       	ldi	r24, 0x90	; 144
     b52:	69 e8       	ldi	r22, 0x89	; 137
     b54:	71 e0       	ldi	r23, 0x01	; 1
     b56:	42 e0       	ldi	r20, 0x02	; 2
     b58:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <twi_start_rd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	9f e1       	ldi	r25, 0x1F	; 31
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <mega128_temperature+0x10>
   //wait for it to finish
   _delay_ms(2); 
   //save high temperature byte into mega128_temp
   mega128_temp = lm73_rd_buf[0]; 
   //shift it into upper byte
   mega128_temp = mega128_temp << 8; 
     b64:	90 91 89 01 	lds	r25, 0x0189
     b68:	80 e0       	ldi	r24, 0x00	; 0
   //"OR" in the low temp byte to mega128_temp
   mega128_temp |= lm73_rd_buf[1];
     b6a:	60 91 8a 01 	lds	r22, 0x018A
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	68 2b       	or	r22, r24
     b72:	79 2b       	or	r23, r25
   //Convert the unit if needed
   //FIXME
   if(bare_status & (1<<FAHRENHEIT)){
     b74:	80 91 94 01 	lds	r24, 0x0194
     b78:	81 ff       	sbrs	r24, 1
     b7a:	5a c0       	rjmp	.+180    	; 0xc30 <mega128_temperature+0xe0>
      mega128_temp = ((mega128_temp*9)+160)/5;
     b7c:	cb 01       	movw	r24, r22
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	86 0f       	add	r24, r22
     b8c:	97 1f       	adc	r25, r23
     b8e:	80 56       	subi	r24, 0x60	; 96
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	65 e0       	ldi	r22, 0x05	; 5
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
     b9a:	26 e4       	ldi	r18, 0x46	; 70
     b9c:	30 e0       	ldi	r19, 0x00	; 0
      temp_unit = 'F';
   }

   //Formatting the output
   if(mega128_temp & (1<<0xF))//Check signed bit
     b9e:	77 fd       	sbrc	r23, 7
     ba0:	4b c0       	rjmp	.+150    	; 0xc38 <mega128_temperature+0xe8>
      snprintf(mega128_temp_str,9, "-%d.%-2d %c",mega128_temp>>7, ((mega128_temp & (0x3<<5))*25)>>5, temp_unit);
   else
      snprintf(mega128_temp_str,9, " %d.%-2d %c",mega128_temp>>7, ((mega128_temp & (0x3<<5))*25)>>5, temp_unit);
     ba2:	ad b7       	in	r26, 0x3d	; 61
     ba4:	be b7       	in	r27, 0x3e	; 62
     ba6:	1c 97       	sbiw	r26, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	be bf       	out	0x3e, r27	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	ad bf       	out	0x3d, r26	; 61
     bb2:	ed b7       	in	r30, 0x3d	; 61
     bb4:	fe b7       	in	r31, 0x3e	; 62
     bb6:	31 96       	adiw	r30, 0x01	; 1
     bb8:	80 e8       	ldi	r24, 0x80	; 128
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	9c 93       	st	X, r25
     bc0:	8e 93       	st	-X, r24
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	89 e0       	ldi	r24, 0x09	; 9
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	93 83       	std	Z+3, r25	; 0x03
     bca:	82 83       	std	Z+2, r24	; 0x02
     bcc:	8c e0       	ldi	r24, 0x0C	; 12
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	95 83       	std	Z+5, r25	; 0x05
     bd2:	84 83       	std	Z+4, r24	; 0x04
     bd4:	cb 01       	movw	r24, r22
     bd6:	88 0f       	add	r24, r24
     bd8:	89 2f       	mov	r24, r25
     bda:	88 1f       	adc	r24, r24
     bdc:	99 0b       	sbc	r25, r25
     bde:	91 95       	neg	r25
     be0:	97 83       	std	Z+7, r25	; 0x07
     be2:	86 83       	std	Z+6, r24	; 0x06
     be4:	60 76       	andi	r22, 0x60	; 96
     be6:	70 70       	andi	r23, 0x00	; 0
     be8:	cb 01       	movw	r24, r22
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	86 0f       	add	r24, r22
     bf0:	97 1f       	adc	r25, r23
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	86 0f       	add	r24, r22
     c00:	97 1f       	adc	r25, r23
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	92 95       	swap	r25
     c08:	82 95       	swap	r24
     c0a:	8f 70       	andi	r24, 0x0F	; 15
     c0c:	89 27       	eor	r24, r25
     c0e:	9f 70       	andi	r25, 0x0F	; 15
     c10:	89 27       	eor	r24, r25
     c12:	91 87       	std	Z+9, r25	; 0x09
     c14:	80 87       	std	Z+8, r24	; 0x08
     c16:	33 87       	std	Z+11, r19	; 0x0b
     c18:	22 87       	std	Z+10, r18	; 0x0a
     c1a:	0e 94 3b 10 	call	0x2076	; 0x2076 <snprintf>
     c1e:	8d b7       	in	r24, 0x3d	; 61
     c20:	9e b7       	in	r25, 0x3e	; 62
     c22:	0c 96       	adiw	r24, 0x0c	; 12
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	9e bf       	out	0x3e, r25	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	8d bf       	out	0x3d, r24	; 61
     c2e:	08 95       	ret
   mega128_temp = mega128_temp << 8; 
   //"OR" in the low temp byte to mega128_temp
   mega128_temp |= lm73_rd_buf[1];
   //Convert the unit if needed
   //FIXME
   if(bare_status & (1<<FAHRENHEIT)){
     c30:	23 e4       	ldi	r18, 0x43	; 67
     c32:	30 e0       	ldi	r19, 0x00	; 0
      mega128_temp = ((mega128_temp*9)+160)/5;
      temp_unit = 'F';
   }

   //Formatting the output
   if(mega128_temp & (1<<0xF))//Check signed bit
     c34:	77 ff       	sbrs	r23, 7
     c36:	b5 cf       	rjmp	.-150    	; 0xba2 <mega128_temperature+0x52>
      snprintf(mega128_temp_str,9, "-%d.%-2d %c",mega128_temp>>7, ((mega128_temp & (0x3<<5))*25)>>5, temp_unit);
     c38:	8d b7       	in	r24, 0x3d	; 61
     c3a:	9e b7       	in	r25, 0x3e	; 62
     c3c:	0c 97       	sbiw	r24, 0x0c	; 12
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	9e bf       	out	0x3e, r25	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	8d bf       	out	0x3d, r24	; 61
     c48:	ed b7       	in	r30, 0x3d	; 61
     c4a:	fe b7       	in	r31, 0x3e	; 62
     c4c:	31 96       	adiw	r30, 0x01	; 1
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	ad b7       	in	r26, 0x3d	; 61
     c54:	be b7       	in	r27, 0x3e	; 62
     c56:	12 96       	adiw	r26, 0x02	; 2
     c58:	9c 93       	st	X, r25
     c5a:	8e 93       	st	-X, r24
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	89 e0       	ldi	r24, 0x09	; 9
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	93 83       	std	Z+3, r25	; 0x03
     c64:	82 83       	std	Z+2, r24	; 0x02
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	b2 cf       	rjmp	.-156    	; 0xbd0 <mega128_temperature+0x80>

00000c6c <bluetooth>:
 * Desc: set the barestatus as you wish 
 */
void bluetooth(){
   char cmd;
   //save high temperature byte into mega128_temp
   cmd = USART_receive(); 
     c6c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <USART_receive>
}
     c70:	08 95       	ret

00000c72 <__vector_21>:

///////////////////////////////////////////////////////////  ISR_SECTION


//-------------------------------------------------------------- ADC_ISR
ISR(ADC_vect){
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
   OCR2 = (ADCH < 100) ? (100-ADCH) : 1; 
     c80:	85 b1       	in	r24, 0x05	; 5
     c82:	84 36       	cpi	r24, 0x64	; 100
     c84:	58 f4       	brcc	.+22     	; 0xc9c <__vector_21+0x2a>
     c86:	95 b1       	in	r25, 0x05	; 5
     c88:	84 e6       	ldi	r24, 0x64	; 100
     c8a:	89 1b       	sub	r24, r25
     c8c:	83 bd       	out	0x23, r24	; 35
}
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	0f 90       	pop	r0
     c98:	1f 90       	pop	r1
     c9a:	18 95       	reti
///////////////////////////////////////////////////////////  ISR_SECTION


//-------------------------------------------------------------- ADC_ISR
ISR(ADC_vect){
   OCR2 = (ADCH < 100) ? (100-ADCH) : 1; 
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	83 bd       	out	0x23, r24	; 35
}
     ca0:	9f 91       	pop	r25
     ca2:	8f 91       	pop	r24
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <__vector_16>:


//-------------------------------------------------------------- ISR_TIMER0
ISR(TIMER0_OVF_vect){
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	2f 93       	push	r18
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
   //------------------------------------------------------- Time Keeper (sec)
   ++now.tick;
     cbe:	80 91 5b 01 	lds	r24, 0x015B
     cc2:	90 91 5c 01 	lds	r25, 0x015C
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 5c 01 	sts	0x015C, r25
     ccc:	80 93 5b 01 	sts	0x015B, r24
   if(now.tick == 245)
     cd0:	85 3f       	cpi	r24, 0xF5	; 245
     cd2:	91 05       	cpc	r25, r1
     cd4:	91 f1       	breq	.+100    	; 0xd3a <__vector_16+0x8c>
      ++run_led;
   if(now.tick == 489){
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	89 3e       	cpi	r24, 0xE9	; 233
     cda:	92 07       	cpc	r25, r18
     cdc:	c1 f0       	breq	.+48     	; 0xd0e <__vector_16+0x60>
      }
      */

   //----------------------------------------------------------- Music Timing
   static uint8_t ms = 0;
   ms++;
     cde:	80 91 73 01 	lds	r24, 0x0173
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	80 93 73 01 	sts	0x0173, r24
   if(ms % 8 == 0) {
     ce8:	87 70       	andi	r24, 0x07	; 7
     cea:	49 f4       	brne	.+18     	; 0xcfe <__vector_16+0x50>
      //for note duration (64th notes) 
      beat++;
     cec:	80 91 6f 01 	lds	r24, 0x016F
     cf0:	90 91 70 01 	lds	r25, 0x0170
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	90 93 70 01 	sts	0x0170, r25
     cfa:	80 93 6f 01 	sts	0x016F, r24
   }        

}
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti
   //------------------------------------------------------- Time Keeper (sec)
   ++now.tick;
   if(now.tick == 245)
      ++run_led;
   if(now.tick == 489){
      ++run_led;
     d0e:	80 91 9a 01 	lds	r24, 0x019A
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	80 93 9a 01 	sts	0x019A, r24
      ++now.sec;
     d18:	80 91 5a 01 	lds	r24, 0x015A
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	80 93 5a 01 	sts	0x015A, r24
      now.tick = 0;
     d22:	10 92 5c 01 	sts	0x015C, r1
     d26:	10 92 5b 01 	sts	0x015B, r1
      if(bare_status & (1<<COLON_DISP))
     d2a:	80 91 94 01 	lds	r24, 0x0194
     d2e:	87 fd       	sbrc	r24, 7
     d30:	0a c0       	rjmp	.+20     	; 0xd46 <__vector_16+0x98>
	 segment_data[2] = (segment_data[2] == 10) ? 11 : 10;
      //Update the LCD
      bare_status |= (1<<TEMP_LCD_DISP);
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	80 93 94 01 	sts	0x0194, r24
     d38:	d2 cf       	rjmp	.-92     	; 0xcde <__vector_16+0x30>
//-------------------------------------------------------------- ISR_TIMER0
ISR(TIMER0_OVF_vect){
   //------------------------------------------------------- Time Keeper (sec)
   ++now.tick;
   if(now.tick == 245)
      ++run_led;
     d3a:	80 91 9a 01 	lds	r24, 0x019A
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	80 93 9a 01 	sts	0x019A, r24
     d44:	cc cf       	rjmp	.-104    	; 0xcde <__vector_16+0x30>
   if(now.tick == 489){
      ++run_led;
      ++now.sec;
      now.tick = 0;
      if(bare_status & (1<<COLON_DISP))
	 segment_data[2] = (segment_data[2] == 10) ? 11 : 10;
     d46:	90 91 97 01 	lds	r25, 0x0197
     d4a:	9a 30       	cpi	r25, 0x0A	; 10
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__vector_16+0xa8>
     d4e:	9a e0       	ldi	r25, 0x0A	; 10
     d50:	90 93 97 01 	sts	0x0197, r25
     d54:	ee cf       	rjmp	.-36     	; 0xd32 <__vector_16+0x84>
     d56:	9b e0       	ldi	r25, 0x0B	; 11
     d58:	fb cf       	rjmp	.-10     	; 0xd50 <__vector_16+0xa2>

00000d5a <__vector_12>:
 * Composer: Bear's AVR Mega128
 * Date 10 Nov 2015
 *
 */
//TODO: time this ISR!
ISR(TIMER1_COMPA_vect){
     d5a:	1f 92       	push	r1
     d5c:	0f 92       	push	r0
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	0f 92       	push	r0
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
   //Should it be making sound? 
   if(bare_status & (1<<SOUND_ALARM)){
     d8c:	80 91 94 01 	lds	r24, 0x0194
     d90:	85 ff       	sbrs	r24, 5
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <__vector_12+0x58>
      //Using PORTC Pin2 as an output
      PORTC ^= (1<<PC2);
     d94:	85 b3       	in	r24, 0x15	; 21
     d96:	94 e0       	ldi	r25, 0x04	; 4
     d98:	89 27       	eor	r24, r25
     d9a:	85 bb       	out	0x15, r24	; 21
      if(beat >= max_beat){
     d9c:	20 91 6f 01 	lds	r18, 0x016F
     da0:	30 91 70 01 	lds	r19, 0x0170
     da4:	80 91 71 01 	lds	r24, 0x0171
     da8:	90 91 72 01 	lds	r25, 0x0172
     dac:	28 17       	cp	r18, r24
     dae:	39 07       	cpc	r19, r25
     db0:	c8 f4       	brcc	.+50     	; 0xde4 <__vector_12+0x8a>
	 play_note('A'+(rand()%7),rand()%2,6+(rand()%3),rand()%16);
      }
   }
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	0f 90       	pop	r0
     dd8:	0b be       	out	0x3b, r0	; 59
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti
   //Should it be making sound? 
   if(bare_status & (1<<SOUND_ALARM)){
      //Using PORTC Pin2 as an output
      PORTC ^= (1<<PC2);
      if(beat >= max_beat){
	 play_note('A'+(rand()%7),rand()%2,6+(rand()%3),rand()%16);
     de4:	0e 94 2b 10 	call	0x2056	; 0x2056 <rand>
     de8:	8c 01       	movw	r16, r24
     dea:	0e 94 2b 10 	call	0x2056	; 0x2056 <rand>
     dee:	ec 01       	movw	r28, r24
     df0:	0e 94 2b 10 	call	0x2056	; 0x2056 <rand>
     df4:	7c 01       	movw	r14, r24
     df6:	0e 94 2b 10 	call	0x2056	; 0x2056 <rand>
     dfa:	9c 01       	movw	r18, r24
     dfc:	c8 01       	movw	r24, r16
     dfe:	67 e0       	ldi	r22, 0x07	; 7
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     e06:	e8 2f       	mov	r30, r24
     e08:	ce 01       	movw	r24, r28
     e0a:	62 e0       	ldi	r22, 0x02	; 2
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     e12:	f8 2f       	mov	r31, r24
     e14:	c7 01       	movw	r24, r14
     e16:	63 e0       	ldi	r22, 0x03	; 3
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     e1e:	48 2f       	mov	r20, r24
     e20:	4a 5f       	subi	r20, 0xFA	; 250
     e22:	c9 01       	movw	r24, r18
     e24:	60 e1       	ldi	r22, 0x10	; 16
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     e2c:	28 2f       	mov	r18, r24
     e2e:	8e 2f       	mov	r24, r30
     e30:	8f 5b       	subi	r24, 0xBF	; 191
     e32:	6f 2f       	mov	r22, r31
     e34:	0e 94 72 00 	call	0xe4	; 0xe4 <play_note>
     e38:	bc cf       	rjmp	.-136    	; 0xdb2 <__vector_12+0x58>

00000e3a <__vector_10>:
 *     tick 0x3: Mode Enforcer (Mealy Output)
 *     tick 0x4: Check Alarm! 
 *     tick 0xF: SPI
 *
 */
ISR(TIMER2_OVF_vect){
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	0b b6       	in	r0, 0x3b	; 59
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
   //Use toggler to check if the bit value has been change from the previos 
   //interrupt (you want to change it only once) 
   //toggler = [ EDIT_12_24 | EDIT_ALREN | SNOOZE | sound_alarm | change_vol ...?]
   static uint8_t toggler;

   if(!(pressed_button & (1<<7)))
     e6a:	20 91 53 01 	lds	r18, 0x0153
     e6e:	27 fd       	sbrc	r18, 7
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <__vector_10+0x3c>
      toggler = 0x00;
     e72:	10 92 6c 01 	sts	0x016C, r1

   switch (tcnt2_cntr){
     e76:	f0 90 6e 01 	lds	r15, 0x016E
     e7a:	3f 2d       	mov	r19, r15
     e7c:	32 30       	cpi	r19, 0x02	; 2
     e7e:	09 f4       	brne	.+2      	; 0xe82 <__vector_10+0x48>
     e80:	9a c0       	rjmp	.+308    	; 0xfb6 <__vector_10+0x17c>
     e82:	33 30       	cpi	r19, 0x03	; 3
     e84:	10 f1       	brcs	.+68     	; 0xeca <__vector_10+0x90>
     e86:	8f 2d       	mov	r24, r15
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	09 f4       	brne	.+2      	; 0xe8e <__vector_10+0x54>
     e8c:	ab c0       	rjmp	.+342    	; 0xfe4 <__vector_10+0x1aa>
     e8e:	84 30       	cpi	r24, 0x04	; 4
     e90:	09 f4       	brne	.+2      	; 0xe94 <__vector_10+0x5a>
     e92:	68 c0       	rjmp	.+208    	; 0xf64 <__vector_10+0x12a>
	    }
	 }
	 break;

   }
   ++tcnt2_cntr;
     e94:	f3 94       	inc	r15
     e96:	f0 92 6e 01 	sts	0x016E, r15
}
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti
   static uint8_t toggler;

   if(!(pressed_button & (1<<7)))
      toggler = 0x00;

   switch (tcnt2_cntr){
     eca:	ff 20       	and	r15, r15
     ecc:	11 f5       	brne	.+68     	; 0xf12 <__vector_10+0xd8>
      case 0x0:
	 //----------------------------------------------------- BUTTON_&_7-SEG
	 //make PORTA an input port with pullups 
	 PORTA = 0xFF;
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	8b bb       	out	0x1b, r24	; 27
	 DDRA = 0x00;
     ed2:	1a ba       	out	0x1a, r1	; 26
	 //enable tristate buffer for pushbutton switches
	 PORTB = 0x70;
     ed4:	80 e7       	ldi	r24, 0x70	; 112
     ed6:	88 bb       	out	0x18, r24	; 24
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	d0 e0       	ldi	r29, 0x00	; 0
	 //now check each button and increment the count as needed
	 for(uint8_t i=0; i<8; ++i){
	    if(chk_buttons(i))
	       pressed_button ^= (1<<i);
     edc:	01 e0       	ldi	r16, 0x01	; 1
     ede:	10 e0       	ldi	r17, 0x00	; 0
	 DDRA = 0x00;
	 //enable tristate buffer for pushbutton switches
	 PORTB = 0x70;
	 //now check each button and increment the count as needed
	 for(uint8_t i=0; i<8; ++i){
	    if(chk_buttons(i))
     ee0:	8c 2f       	mov	r24, r28
     ee2:	0e 94 1b 04 	call	0x836	; 0x836 <chk_buttons>
     ee6:	88 23       	and	r24, r24
     ee8:	61 f0       	breq	.+24     	; 0xf02 <__vector_10+0xc8>
	       pressed_button ^= (1<<i);
     eea:	c8 01       	movw	r24, r16
     eec:	0c 2e       	mov	r0, r28
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <__vector_10+0xba>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <__vector_10+0xb6>
     ef8:	20 91 53 01 	lds	r18, 0x0153
     efc:	28 27       	eor	r18, r24
     efe:	20 93 53 01 	sts	0x0153, r18
     f02:	21 96       	adiw	r28, 0x01	; 1
	 PORTA = 0xFF;
	 DDRA = 0x00;
	 //enable tristate buffer for pushbutton switches
	 PORTB = 0x70;
	 //now check each button and increment the count as needed
	 for(uint8_t i=0; i<8; ++i){
     f04:	c8 30       	cpi	r28, 0x08	; 8
     f06:	d1 05       	cpc	r29, r1
     f08:	59 f7       	brne	.-42     	; 0xee0 <__vector_10+0xa6>
	    if(chk_buttons(i))
	       pressed_button ^= (1<<i);
	 }
	 //disable tristate buffer for pushbutton switches
	 //To do so, we use enable Y5 on the decoder (NC)
	 PORTB &= 0x5F;
     f0a:	88 b3       	in	r24, 0x18	; 24
     f0c:	8f 75       	andi	r24, 0x5F	; 95
     f0e:	88 bb       	out	0x18, r24	; 24
	 break;
     f10:	c1 cf       	rjmp	.-126    	; 0xe94 <__vector_10+0x5a>
   static uint8_t toggler;

   if(!(pressed_button & (1<<7)))
      toggler = 0x00;

   switch (tcnt2_cntr){
     f12:	31 30       	cpi	r19, 0x01	; 1
     f14:	09 f0       	breq	.+2      	; 0xf18 <__vector_10+0xde>
     f16:	be cf       	rjmp	.-132    	; 0xe94 <__vector_10+0x5a>
	 PORTB &= 0x5F;
	 break;

      case 0x1:
	 //----------------------------------------------------- STATE_MACHINE 
	 switch(mode){
     f18:	80 91 7e 01 	lds	r24, 0x017E
     f1c:	90 91 7f 01 	lds	r25, 0x017F
     f20:	81 38       	cpi	r24, 0x81	; 129
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <__vector_10+0xee>
     f26:	b5 c1       	rjmp	.+874    	; 0x1292 <__stack+0x193>
     f28:	82 38       	cpi	r24, 0x82	; 130
     f2a:	91 05       	cpc	r25, r1
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <__vector_10+0xf6>
     f2e:	b8 c0       	rjmp	.+368    	; 0x10a0 <__vector_10+0x266>
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_10+0xfc>
     f34:	12 c1       	rjmp	.+548    	; 0x115a <__stack+0x5b>
		  }
	       }
	       break;

	    case SNOOZE:
	       if(pressed_button & (1<<7)){
     f36:	27 fd       	sbrc	r18, 7
     f38:	6e c1       	rjmp	.+732    	; 0x1216 <__stack+0x117>
		     mode = EDIT_ATIME;
		  }else if(pressed_button & (1<<3)){
		     mode = EDIT_ALREN;
		  }
	       }else if( ~(pressed_button & (1<<7)) ){
		  pressed_button &= 0b10100000;
     f3a:	20 7a       	andi	r18, 0xA0	; 160
     f3c:	20 93 53 01 	sts	0x0153, r18
		  if(pressed_button & (1<<snooze_button)){
     f40:	82 2f       	mov	r24, r18
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	00 90 2c 01 	lds	r0, 0x012C
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <__vector_10+0x114>
     f4a:	95 95       	asr	r25
     f4c:	87 95       	ror	r24
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <__vector_10+0x110>
     f52:	80 ff       	sbrs	r24, 0
     f54:	b1 c0       	rjmp	.+354    	; 0x10b8 <__vector_10+0x27e>
		     mode = SNOOZE;
     f56:	8f e7       	ldi	r24, 0x7F	; 127
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	90 93 7f 01 	sts	0x017F, r25
     f5e:	80 93 7e 01 	sts	0x017E, r24
     f62:	98 cf       	rjmp	.-208    	; 0xe94 <__vector_10+0x5a>
	 }
	 break;

      case 0x4:
	 //------------------------------------------------- Setting Alarm Off 
	 if(bare_status & (1<<ARM_ALARM)){
     f64:	80 91 94 01 	lds	r24, 0x0194
     f68:	86 ff       	sbrs	r24, 6
     f6a:	8f c0       	rjmp	.+286    	; 0x108a <__vector_10+0x250>
	    if(((now.hr == alarm_time.hr)&&(now.min == alarm_time.min)
     f6c:	90 91 58 01 	lds	r25, 0x0158
     f70:	20 91 5d 01 	lds	r18, 0x015D
     f74:	92 17       	cp	r25, r18
     f76:	09 f4       	brne	.+2      	; 0xf7a <__vector_10+0x140>
     f78:	a2 c1       	rjmp	.+836    	; 0x12be <__stack+0x1bf>
		     &&(now.sec == alarm_time.sec)) || ((now.hr == snooze_time.hr)&&
     f7a:	20 91 62 01 	lds	r18, 0x0162
     f7e:	92 17       	cp	r25, r18
     f80:	09 f0       	breq	.+2      	; 0xf84 <__vector_10+0x14a>
     f82:	88 cf       	rjmp	.-240    	; 0xe94 <__vector_10+0x5a>
     f84:	20 91 59 01 	lds	r18, 0x0159
     f88:	90 91 63 01 	lds	r25, 0x0163
     f8c:	29 17       	cp	r18, r25
     f8e:	09 f0       	breq	.+2      	; 0xf92 <__vector_10+0x158>
     f90:	81 cf       	rjmp	.-254    	; 0xe94 <__vector_10+0x5a>
		     (now.min == snooze_time.min)&&(now.sec == snooze_time.sec)))
     f92:	20 91 5a 01 	lds	r18, 0x015A
     f96:	90 91 64 01 	lds	r25, 0x0164
     f9a:	29 17       	cp	r18, r25
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <__vector_10+0x166>
     f9e:	7a cf       	rjmp	.-268    	; 0xe94 <__vector_10+0x5a>
	       if(!(toggler & (1<<4))){//Has the bare_status been toggled?
     fa0:	90 91 6c 01 	lds	r25, 0x016C
     fa4:	94 fd       	sbrc	r25, 4
     fa6:	76 cf       	rjmp	.-276    	; 0xe94 <__vector_10+0x5a>

		  //Set the alarm off
		  bare_status |= (1<<SOUND_ALARM); 
     fa8:	80 62       	ori	r24, 0x20	; 32
     faa:	80 93 94 01 	sts	0x0194, r24
		  toggler |= (1<<4);
     fae:	90 61       	ori	r25, 0x10	; 16
     fb0:	90 93 6c 01 	sts	0x016C, r25
     fb4:	6f cf       	rjmp	.-290    	; 0xe94 <__vector_10+0x5a>

      case 0x2:
	 //------------------------------------------------------ Time Keeper

	 //Check if a delayed second has been full.
	 if((sec_calibrate == 11) && (now.sec == 20)){
     fb6:	90 91 6d 01 	lds	r25, 0x016D
     fba:	9b 30       	cpi	r25, 0x0B	; 11
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <__vector_10+0x186>
     fbe:	20 c1       	rjmp	.+576    	; 0x1200 <__stack+0x101>
     fc0:	80 91 5a 01 	lds	r24, 0x015A
	    ++now.sec;
	    sec_calibrate = 0;
	 }

	 //Check if a full minute
	 if(now.sec == 60){
     fc4:	8c 33       	cpi	r24, 0x3C	; 60
     fc6:	09 f4       	brne	.+2      	; 0xfca <__vector_10+0x190>
     fc8:	10 c1       	rjmp	.+544    	; 0x11ea <__stack+0xeb>
     fca:	80 91 59 01 	lds	r24, 0x0159
	    ++sec_calibrate;
	    now.sec = 0;
	 }

	 //Check if a full hour
	 if(now.min == 60){
     fce:	8c 33       	cpi	r24, 0x3C	; 60
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <__vector_10+0x19a>
     fd2:	03 c1       	rjmp	.+518    	; 0x11da <__stack+0xdb>
     fd4:	80 91 58 01 	lds	r24, 0x0158
	    now.min = 0;
	    ++now.hr;
	 }

	 //Check if a full day
	 if(now.hr ==24){
     fd8:	88 31       	cpi	r24, 0x18	; 24
     fda:	09 f4       	brne	.+2      	; 0xfde <__vector_10+0x1a4>
     fdc:	fb c0       	rjmp	.+502    	; 0x11d4 <__stack+0xd5>
	    now.hr = 0;
     fde:	32 e0       	ldi	r19, 0x02	; 2
     fe0:	f3 2e       	mov	r15, r19
     fe2:	58 cf       	rjmp	.-336    	; 0xe94 <__vector_10+0x5a>
	 break;

      case 0x3:
	 //----------------------------------------------------- SM Enforcer
	 //Enforcing no colon policy
	 if( !(bare_status & (1<<COLON_DISP)) )
     fe4:	20 91 94 01 	lds	r18, 0x0194
     fe8:	27 fd       	sbrc	r18, 7
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <__vector_10+0x1b8>
	    segment_data[2] = 0x10;
     fec:	80 e1       	ldi	r24, 0x10	; 16
     fee:	80 93 97 01 	sts	0x0197, r24
	 switch(mode){
     ff2:	80 91 7e 01 	lds	r24, 0x017E
     ff6:	90 91 7f 01 	lds	r25, 0x017F
     ffa:	81 38       	cpi	r24, 0x81	; 129
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__vector_10+0x1c8>
    1000:	19 c1       	rjmp	.+562    	; 0x1234 <__stack+0x135>
    1002:	82 38       	cpi	r24, 0x82	; 130
    1004:	91 05       	cpc	r25, r1
    1006:	08 f0       	brcs	.+2      	; 0x100a <__vector_10+0x1d0>
    1008:	5c c0       	rjmp	.+184    	; 0x10c2 <__vector_10+0x288>
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	09 f0       	breq	.+2      	; 0x1010 <__vector_10+0x1d6>
    100e:	71 c0       	rjmp	.+226    	; 0x10f2 <__vector_10+0x2b8>
	       }
	       break;

	    case NONE:
	       // make the sound adjustment AND segsum-disp_time select
	       ret_enc = read_encoder(0, spdr_val);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	60 91 55 01 	lds	r22, 0x0155
    1016:	0e 94 5d 05 	call	0xaba	; 0xaba <read_encoder>
    101a:	80 93 54 01 	sts	0x0154, r24
	       //Inc/Dec the volume accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the minute
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	09 f4       	brne	.+2      	; 0x1024 <__vector_10+0x1ea>
    1022:	9a c1       	rjmp	.+820    	; 0x1358 <__stack+0x259>
		     cur_vol += 10;
		  bare_status |= (1<<CHANGING_VOL);
		  vol_disp_time.hr = now.hr;
		  vol_disp_time.min= now.min;
		  vol_disp_time.sec = now.sec + 3;
	       }else if(ret_enc == ENCO_CCW){
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	09 f4       	brne	.+2      	; 0x102a <__vector_10+0x1f0>
    1028:	e0 c1       	rjmp	.+960    	; 0x13ea <__stack+0x2eb>
    102a:	80 91 69 01 	lds	r24, 0x0169
    102e:	50 91 68 01 	lds	r21, 0x0168
    1032:	e0 91 58 01 	lds	r30, 0x0158
    1036:	20 91 2d 01 	lds	r18, 0x012D
    103a:	30 91 2e 01 	lds	r19, 0x012E
		  vol_disp_time.min= now.min;
		  vol_disp_time.sec = now.sec + 3;
	       }

	       //Wrap around
	       if(vol_disp_time.sec >=60 ){
    103e:	8c 33       	cpi	r24, 0x3C	; 60
    1040:	40 f0       	brcs	.+16     	; 0x1052 <__vector_10+0x218>
		  ++vol_disp_time.min;
    1042:	5f 5f       	subi	r21, 0xFF	; 255
    1044:	50 93 68 01 	sts	0x0168, r21
		  vol_disp_time.sec %= 60;
    1048:	6c e3       	ldi	r22, 0x3C	; 60
    104a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    104e:	90 93 69 01 	sts	0x0169, r25
	       }
	       if(vol_disp_time.min>=60 ){
    1052:	5c 33       	cpi	r21, 0x3C	; 60
    1054:	08 f0       	brcs	.+2      	; 0x1058 <__vector_10+0x21e>
    1056:	49 c1       	rjmp	.+658    	; 0x12ea <__stack+0x1eb>
    1058:	40 91 67 01 	lds	r20, 0x0167
		  ++vol_disp_time.hr;
		  vol_disp_time.min %= 60;
	       }
	       if(vol_disp_time.hr>=24 ){
    105c:	48 31       	cpi	r20, 0x18	; 24
    105e:	38 f0       	brcs	.+14     	; 0x106e <__vector_10+0x234>
		  vol_disp_time.hr %= 24;
    1060:	84 2f       	mov	r24, r20
    1062:	68 e1       	ldi	r22, 0x18	; 24
    1064:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    1068:	49 2f       	mov	r20, r25
    106a:	90 93 67 01 	sts	0x0167, r25
	       }


	       if( (now.hr == vol_disp_time.hr)&&(now.min == vol_disp_time.min)
    106e:	4e 17       	cp	r20, r30
    1070:	09 f4       	brne	.+2      	; 0x1074 <__vector_10+0x23a>
    1072:	47 c1       	rjmp	.+654    	; 0x1302 <__stack+0x203>
		     segment_data[2]=11;
		     toggler |= (1<<3);
		  }
	       }//End Here -- check now == vol_disp_time

	       OCR3A = 100 - cur_vol;
    1074:	84 e6       	ldi	r24, 0x64	; 100
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	82 1b       	sub	r24, r18
    107a:	93 0b       	sbc	r25, r19
    107c:	90 93 87 00 	sts	0x0087, r25
    1080:	80 93 86 00 	sts	0x0086, r24
    1084:	f0 90 6e 01 	lds	r15, 0x016E
	       break;
    1088:	05 cf       	rjmp	.-502    	; 0xe94 <__vector_10+0x5a>
		  toggler |= (1<<4);
	       }


	 }else{
	    if(!(toggler & (1<<4))){//Has the bare_status been toggled?
    108a:	90 91 6c 01 	lds	r25, 0x016C
    108e:	94 fd       	sbrc	r25, 4
    1090:	01 cf       	rjmp	.-510    	; 0xe94 <__vector_10+0x5a>
	       //Turn off alarm if alarm is not set
	       bare_status &= ~(1<<SOUND_ALARM); 
    1092:	8f 7d       	andi	r24, 0xDF	; 223
    1094:	80 93 94 01 	sts	0x0194, r24
	       toggler |= (1<<4);
    1098:	90 61       	ori	r25, 0x10	; 16
    109a:	90 93 6c 01 	sts	0x016C, r25
    109e:	fa ce       	rjmp	.-524    	; 0xe94 <__vector_10+0x5a>
	 PORTB &= 0x5F;
	 break;

      case 0x1:
	 //----------------------------------------------------- STATE_MACHINE 
	 switch(mode){
    10a0:	84 38       	cpi	r24, 0x84	; 132
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__vector_10+0x26e>
    10a6:	47 cf       	rjmp	.-370    	; 0xf36 <__vector_10+0xfc>
    10a8:	88 38       	cpi	r24, 0x88	; 136
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <__vector_10+0x276>
    10ae:	43 cf       	rjmp	.-378    	; 0xf36 <__vector_10+0xfc>
    10b0:	82 38       	cpi	r24, 0x82	; 130
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__vector_10+0x27e>
    10b6:	3f cf       	rjmp	.-386    	; 0xf36 <__vector_10+0xfc>
		  }
	       }
	       break;

	    default:
	       mode = NONE;
    10b8:	10 92 7f 01 	sts	0x017F, r1
    10bc:	10 92 7e 01 	sts	0x017E, r1
	       break;
    10c0:	e9 ce       	rjmp	.-558    	; 0xe94 <__vector_10+0x5a>
      case 0x3:
	 //----------------------------------------------------- SM Enforcer
	 //Enforcing no colon policy
	 if( !(bare_status & (1<<COLON_DISP)) )
	    segment_data[2] = 0x10;
	 switch(mode){
    10c2:	84 38       	cpi	r24, 0x84	; 132
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <__vector_10+0x290>
    10c8:	4d c0       	rjmp	.+154    	; 0x1164 <__stack+0x65>
    10ca:	88 38       	cpi	r24, 0x88	; 136
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <__vector_10+0x298>
    10d0:	e5 c0       	rjmp	.+458    	; 0x129c <__stack+0x19d>
    10d2:	82 38       	cpi	r24, 0x82	; 130
    10d4:	91 05       	cpc	r25, r1
    10d6:	09 f0       	breq	.+2      	; 0x10da <__vector_10+0x2a0>
    10d8:	dd ce       	rjmp	.-582    	; 0xe94 <__vector_10+0x5a>
		  ++now.hr;
	       }
	       break;

	    case EDIT_12_24:
	       if(!(toggler & (1<<7))){
    10da:	90 91 6c 01 	lds	r25, 0x016C
    10de:	97 fd       	sbrc	r25, 7
    10e0:	d9 ce       	rjmp	.-590    	; 0xe94 <__vector_10+0x5a>
		  bare_status ^= (1<<MIL_TIME);
    10e2:	80 e1       	ldi	r24, 0x10	; 16
    10e4:	82 27       	eor	r24, r18
    10e6:	80 93 94 01 	sts	0x0194, r24
		  toggler |= (1<<7);
    10ea:	90 68       	ori	r25, 0x80	; 128
    10ec:	90 93 6c 01 	sts	0x016C, r25
    10f0:	d1 ce       	rjmp	.-606    	; 0xe94 <__vector_10+0x5a>
      case 0x3:
	 //----------------------------------------------------- SM Enforcer
	 //Enforcing no colon policy
	 if( !(bare_status & (1<<COLON_DISP)) )
	    segment_data[2] = 0x10;
	 switch(mode){
    10f2:	8f 37       	cpi	r24, 0x7F	; 127
    10f4:	91 05       	cpc	r25, r1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__vector_10+0x2c0>
    10f8:	cd ce       	rjmp	.-614    	; 0xe94 <__vector_10+0x5a>
		  }
	       }
	       break;

	    case SNOOZE:
	       if(!(toggler & (1<<5))){//Has the bare_status been toggled?
    10fa:	80 91 6c 01 	lds	r24, 0x016C
    10fe:	85 fd       	sbrc	r24, 5
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <__stack+0x13>
		  //Turn off the noise
		  bare_status ^= (1<<SOUND_ALARM); 
    1102:	90 e2       	ldi	r25, 0x20	; 32
    1104:	92 27       	eor	r25, r18
    1106:	90 93 94 01 	sts	0x0194, r25
		  toggler |= (1<<5);
    110a:	80 62       	ori	r24, 0x20	; 32
		  //Clear alarm bit so it can go off again
		  toggler &= ~(1<<4);
    110c:	8f 7e       	andi	r24, 0xEF	; 239
    110e:	80 93 6c 01 	sts	0x016C, r24
	       }

	       //Set snooze time
	       snooze_time.hr = now.hr;
    1112:	30 91 58 01 	lds	r19, 0x0158
    1116:	30 93 62 01 	sts	0x0162, r19
	       snooze_time.min = now.min + SNOOZE_GAP_M;
    111a:	20 91 59 01 	lds	r18, 0x0159
    111e:	20 93 63 01 	sts	0x0163, r18
	       snooze_time.sec = now.sec + SNOOZE_GAP_S;
    1122:	80 91 5a 01 	lds	r24, 0x015A
    1126:	86 5f       	subi	r24, 0xF6	; 246
    1128:	80 93 64 01 	sts	0x0164, r24

	       if(snooze_time.sec >= 60){
    112c:	8c 33       	cpi	r24, 0x3C	; 60
    112e:	40 f0       	brcs	.+16     	; 0x1140 <__stack+0x41>
		  snooze_time.sec %= 60;
    1130:	6c e3       	ldi	r22, 0x3C	; 60
    1132:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    1136:	90 93 64 01 	sts	0x0164, r25
		  ++snooze_time.min;
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	20 93 63 01 	sts	0x0163, r18
	       }

	       if(snooze_time.min >= 60){
    1140:	2c 33       	cpi	r18, 0x3C	; 60
    1142:	08 f4       	brcc	.+2      	; 0x1146 <__stack+0x47>
    1144:	a7 ce       	rjmp	.-690    	; 0xe94 <__vector_10+0x5a>
		  snooze_time.min %= 60;
    1146:	82 2f       	mov	r24, r18
    1148:	6c e3       	ldi	r22, 0x3C	; 60
    114a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    114e:	90 93 63 01 	sts	0x0163, r25
		  ++snooze_time.hr;
    1152:	3f 5f       	subi	r19, 0xFF	; 255
    1154:	30 93 62 01 	sts	0x0162, r19
    1158:	9d ce       	rjmp	.-710    	; 0xe94 <__vector_10+0x5a>
	 PORTB &= 0x5F;
	 break;

      case 0x1:
	 //----------------------------------------------------- STATE_MACHINE 
	 switch(mode){
    115a:	8f 37       	cpi	r24, 0x7F	; 127
    115c:	91 05       	cpc	r25, r1
    115e:	09 f0       	breq	.+2      	; 0x1162 <__stack+0x63>
    1160:	ab cf       	rjmp	.-170    	; 0x10b8 <__vector_10+0x27e>
    1162:	e9 ce       	rjmp	.-558    	; 0xf36 <__vector_10+0xfc>
	       break;

	    case EDIT_ATIME:
	       //Send the value to read_encoder(num_enco, spdr_val);
	       //Store the returning value to decide if inc or dec
	       ret_enc = read_encoder(1, spdr_val);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	60 91 55 01 	lds	r22, 0x0155
    116a:	0e 94 5d 05 	call	0xaba	; 0xaba <read_encoder>
    116e:	80 93 54 01 	sts	0x0154, r24
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	09 f4       	brne	.+2      	; 0x1178 <__stack+0x79>
    1176:	ea c0       	rjmp	.+468    	; 0x134c <__stack+0x24d>
		  alarm_time.hr += 1;
	       }else if(ret_enc == ENCO_CCW){
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	09 f4       	brne	.+2      	; 0x117e <__stack+0x7f>
    117c:	50 c1       	rjmp	.+672    	; 0x141e <__stack+0x31f>
		  alarm_time.hr -= 1;
	       }

	       ret_enc = read_encoder(0, spdr_val);
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	60 91 55 01 	lds	r22, 0x0155
    1184:	0e 94 5d 05 	call	0xaba	; 0xaba <read_encoder>
    1188:	80 93 54 01 	sts	0x0154, r24
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	09 f4       	brne	.+2      	; 0x1192 <__stack+0x93>
    1190:	03 c1       	rjmp	.+518    	; 0x1398 <__stack+0x299>
		  alarm_time.min += 1;
	       }else if(ret_enc == ENCO_CCW){
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	09 f4       	brne	.+2      	; 0x1198 <__stack+0x99>
    1196:	19 c1       	rjmp	.+562    	; 0x13ca <__stack+0x2cb>
    1198:	80 91 5e 01 	lds	r24, 0x015E
		  if(alarm_time.min != 0)
		     alarm_time.min -= 1;
	       }

	       if(alarm_time.hr >= 24){
    119c:	90 91 5d 01 	lds	r25, 0x015D
    11a0:	98 31       	cpi	r25, 0x18	; 24
    11a2:	10 f0       	brcs	.+4      	; 0x11a8 <__stack+0xa9>
		  alarm_time.hr = 0;
    11a4:	10 92 5d 01 	sts	0x015D, r1
	       }
	       if(alarm_time.min >= 60){
    11a8:	8c 33       	cpi	r24, 0x3C	; 60
    11aa:	38 f0       	brcs	.+14     	; 0x11ba <__stack+0xbb>
		  alarm_time.min = 0;
    11ac:	10 92 5e 01 	sts	0x015E, r1
		  ++alarm_time.hr;
    11b0:	80 91 5d 01 	lds	r24, 0x015D
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 5d 01 	sts	0x015D, r24
	       }
	       if(!(toggler & (1<<6))){//Has the bare_status been toggled?
    11ba:	80 91 6c 01 	lds	r24, 0x016C
    11be:	86 fd       	sbrc	r24, 6
    11c0:	61 cf       	rjmp	.-318    	; 0x1084 <__vector_10+0x24a>

		  //Enable arm the alarm
		  bare_status |= (1<<ARM_ALARM); 
    11c2:	90 91 94 01 	lds	r25, 0x0194
    11c6:	90 64       	ori	r25, 0x40	; 64
    11c8:	90 93 94 01 	sts	0x0194, r25
		  toggler |= (1<<6);
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	80 93 6c 01 	sts	0x016C, r24
    11d2:	58 cf       	rjmp	.-336    	; 0x1084 <__vector_10+0x24a>
	    ++now.hr;
	 }

	 //Check if a full day
	 if(now.hr ==24){
	    now.hr = 0;
    11d4:	10 92 58 01 	sts	0x0158, r1
    11d8:	02 cf       	rjmp	.-508    	; 0xfde <__vector_10+0x1a4>
	    now.sec = 0;
	 }

	 //Check if a full hour
	 if(now.min == 60){
	    now.min = 0;
    11da:	10 92 59 01 	sts	0x0159, r1
	    ++now.hr;
    11de:	80 91 58 01 	lds	r24, 0x0158
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 58 01 	sts	0x0158, r24
    11e8:	f7 ce       	rjmp	.-530    	; 0xfd8 <__vector_10+0x19e>
	    sec_calibrate = 0;
	 }

	 //Check if a full minute
	 if(now.sec == 60){
	    ++now.min;
    11ea:	80 91 59 01 	lds	r24, 0x0159
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	80 93 59 01 	sts	0x0159, r24
	    ++sec_calibrate;
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	90 93 6d 01 	sts	0x016D, r25
	    now.sec = 0;
    11fa:	10 92 5a 01 	sts	0x015A, r1
    11fe:	e7 ce       	rjmp	.-562    	; 0xfce <__vector_10+0x194>

      case 0x2:
	 //------------------------------------------------------ Time Keeper

	 //Check if a delayed second has been full.
	 if((sec_calibrate == 11) && (now.sec == 20)){
    1200:	80 91 5a 01 	lds	r24, 0x015A
    1204:	84 31       	cpi	r24, 0x14	; 20
    1206:	09 f0       	breq	.+2      	; 0x120a <__stack+0x10b>
    1208:	dd ce       	rjmp	.-582    	; 0xfc4 <__vector_10+0x18a>
	    ++now.sec;
    120a:	85 e1       	ldi	r24, 0x15	; 21
    120c:	80 93 5a 01 	sts	0x015A, r24
	    sec_calibrate = 0;
    1210:	10 92 6d 01 	sts	0x016D, r1
    1214:	da ce       	rjmp	.-588    	; 0xfca <__vector_10+0x190>
	       }
	       break;

	    case SNOOZE:
	       if(pressed_button & (1<<7)){
		  if (pressed_button & (1<<0)){
    1216:	20 fd       	sbrc	r18, 0
    1218:	61 c0       	rjmp	.+194    	; 0x12dc <__stack+0x1dd>
		     mode = EDIT_STIME;
		  }else if(pressed_button & (1<<1)){
    121a:	21 fd       	sbrc	r18, 1
    121c:	90 c0       	rjmp	.+288    	; 0x133e <__stack+0x23f>
		     mode = EDIT_12_24;
		  }else if(pressed_button & (1<<2)){
    121e:	22 fd       	sbrc	r18, 2
    1220:	cd c0       	rjmp	.+410    	; 0x13bc <__stack+0x2bd>
		     mode = EDIT_ATIME;
		  }else if(pressed_button & (1<<3)){
    1222:	23 ff       	sbrs	r18, 3
    1224:	37 ce       	rjmp	.-914    	; 0xe94 <__vector_10+0x5a>
		     mode = EDIT_ALREN;
    1226:	88 e8       	ldi	r24, 0x88	; 136
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	90 93 7f 01 	sts	0x017F, r25
    122e:	80 93 7e 01 	sts	0x017E, r24
    1232:	30 ce       	rjmp	.-928    	; 0xe94 <__vector_10+0x5a>
	    segment_data[2] = 0x10;
	 switch(mode){
	    case EDIT_STIME:
	       //Send the value to read_encoder(num_enco, spdr_val);
	       //Store the returning value to decide if inc or dec
	       ret_enc = read_encoder(1, spdr_val);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	60 91 55 01 	lds	r22, 0x0155
    123a:	0e 94 5d 05 	call	0xaba	; 0xaba <read_encoder>
    123e:	80 93 54 01 	sts	0x0154, r24
	       //Inc/Dec the hour accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the hour
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	09 f4       	brne	.+2      	; 0x1248 <__stack+0x149>
    1246:	b4 c0       	rjmp	.+360    	; 0x13b0 <__stack+0x2b1>
		  now.hr += 1;
	       }else if(ret_enc == ENCO_CCW){
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	09 f4       	brne	.+2      	; 0x124e <__stack+0x14f>
    124c:	e2 c0       	rjmp	.+452    	; 0x1412 <__stack+0x313>
		  now.hr -= 1;
	       }

	       ret_enc = read_encoder(0, spdr_val);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	60 91 55 01 	lds	r22, 0x0155
    1254:	0e 94 5d 05 	call	0xaba	; 0xaba <read_encoder>
    1258:	80 93 54 01 	sts	0x0154, r24
	       //Inc/Dec the minute accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the minute
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	09 f4       	brne	.+2      	; 0x1262 <__stack+0x163>
    1260:	a1 c0       	rjmp	.+322    	; 0x13a4 <__stack+0x2a5>
		  now.min += 1;
	       }else if(ret_enc == ENCO_CCW){
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	09 f4       	brne	.+2      	; 0x1268 <__stack+0x169>
    1266:	b9 c0       	rjmp	.+370    	; 0x13da <__stack+0x2db>
    1268:	80 91 59 01 	lds	r24, 0x0159
		  if(now.min != 0)
		     now.min -= 1;
	       }

	       if(now.hr >= 24){
    126c:	90 91 58 01 	lds	r25, 0x0158
    1270:	98 31       	cpi	r25, 0x18	; 24
    1272:	10 f0       	brcs	.+4      	; 0x1278 <__stack+0x179>
		  now.hr = 0;
    1274:	10 92 58 01 	sts	0x0158, r1
	       }
	       if(now.min >= 60){
    1278:	8c 33       	cpi	r24, 0x3C	; 60
    127a:	08 f4       	brcc	.+2      	; 0x127e <__stack+0x17f>
    127c:	03 cf       	rjmp	.-506    	; 0x1084 <__vector_10+0x24a>
		  now.min = 0;
    127e:	10 92 59 01 	sts	0x0159, r1
		  ++now.hr;
    1282:	80 91 58 01 	lds	r24, 0x0158
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	80 93 58 01 	sts	0x0158, r24
    128c:	f0 90 6e 01 	lds	r15, 0x016E
    1290:	01 ce       	rjmp	.-1022   	; 0xe94 <__vector_10+0x5a>
		  }
	       }
	       break;

	    case EDIT_STIME:
	       if(pressed_button & (1<<7)){
    1292:	27 ff       	sbrs	r18, 7
    1294:	52 ce       	rjmp	.-860    	; 0xf3a <__vector_10+0x100>
		  if (pressed_button & (1<<0)){
    1296:	20 ff       	sbrs	r18, 0
    1298:	c0 cf       	rjmp	.-128    	; 0x121a <__stack+0x11b>
    129a:	c7 cf       	rjmp	.-114    	; 0x122a <__stack+0x12b>
		  toggler |= (1<<6);
	       }
	       break;

	    case EDIT_ALREN:
	       if(!(toggler & (1<<6))){//Has the bare_status been toggled?
    129c:	90 91 6c 01 	lds	r25, 0x016C
    12a0:	96 fd       	sbrc	r25, 6
    12a2:	f8 cd       	rjmp	.-1040   	; 0xe94 <__vector_10+0x5a>

		  //Enable arm the alarm
		  bare_status ^= (1<<ARM_ALARM); 
    12a4:	80 e4       	ldi	r24, 0x40	; 64
    12a6:	82 27       	eor	r24, r18
    12a8:	80 93 94 01 	sts	0x0194, r24
		  toggler |= (1<<6);
    12ac:	90 64       	ori	r25, 0x40	; 64
    12ae:	90 93 6c 01 	sts	0x016C, r25

		  if(!(bare_status & (1<<ARM_ALARM))){
    12b2:	86 fd       	sbrc	r24, 6
    12b4:	ef cd       	rjmp	.-1058   	; 0xe94 <__vector_10+0x5a>
		     //Turn off the alarm
		     bare_status &= ~(1<<SOUND_ALARM);
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	80 93 94 01 	sts	0x0194, r24
    12bc:	eb cd       	rjmp	.-1066   	; 0xe94 <__vector_10+0x5a>
	 break;

      case 0x4:
	 //------------------------------------------------- Setting Alarm Off 
	 if(bare_status & (1<<ARM_ALARM)){
	    if(((now.hr == alarm_time.hr)&&(now.min == alarm_time.min)
    12be:	30 91 59 01 	lds	r19, 0x0159
    12c2:	20 91 5e 01 	lds	r18, 0x015E
    12c6:	32 17       	cp	r19, r18
    12c8:	09 f0       	breq	.+2      	; 0x12cc <__stack+0x1cd>
    12ca:	57 ce       	rjmp	.-850    	; 0xf7a <__vector_10+0x140>
		     &&(now.sec == alarm_time.sec)) || ((now.hr == snooze_time.hr)&&
    12cc:	30 91 5a 01 	lds	r19, 0x015A
    12d0:	20 91 5f 01 	lds	r18, 0x015F
    12d4:	32 17       	cp	r19, r18
    12d6:	09 f0       	breq	.+2      	; 0x12da <__stack+0x1db>
    12d8:	50 ce       	rjmp	.-864    	; 0xf7a <__vector_10+0x140>
    12da:	62 ce       	rjmp	.-828    	; 0xfa0 <__vector_10+0x166>
	       break;

	    case SNOOZE:
	       if(pressed_button & (1<<7)){
		  if (pressed_button & (1<<0)){
		     mode = EDIT_STIME;
    12dc:	81 e8       	ldi	r24, 0x81	; 129
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	90 93 7f 01 	sts	0x017F, r25
    12e4:	80 93 7e 01 	sts	0x017E, r24
    12e8:	d5 cd       	rjmp	.-1110   	; 0xe94 <__vector_10+0x5a>
	       if(vol_disp_time.sec >=60 ){
		  ++vol_disp_time.min;
		  vol_disp_time.sec %= 60;
	       }
	       if(vol_disp_time.min>=60 ){
		  ++vol_disp_time.hr;
    12ea:	40 91 67 01 	lds	r20, 0x0167
    12ee:	4f 5f       	subi	r20, 0xFF	; 255
    12f0:	40 93 67 01 	sts	0x0167, r20
		  vol_disp_time.min %= 60;
    12f4:	85 2f       	mov	r24, r21
    12f6:	6c e3       	ldi	r22, 0x3C	; 60
    12f8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    12fc:	90 93 68 01 	sts	0x0168, r25
    1300:	ad ce       	rjmp	.-678    	; 0x105c <__vector_10+0x222>
	       if(vol_disp_time.hr>=24 ){
		  vol_disp_time.hr %= 24;
	       }


	       if( (now.hr == vol_disp_time.hr)&&(now.min == vol_disp_time.min)
    1302:	90 91 59 01 	lds	r25, 0x0159
    1306:	80 91 68 01 	lds	r24, 0x0168
    130a:	98 17       	cp	r25, r24
    130c:	09 f0       	breq	.+2      	; 0x1310 <__stack+0x211>
    130e:	b2 ce       	rjmp	.-668    	; 0x1074 <__vector_10+0x23a>
		     &&(now.sec == vol_disp_time.sec) ){
    1310:	90 91 5a 01 	lds	r25, 0x015A
    1314:	80 91 69 01 	lds	r24, 0x0169
    1318:	98 17       	cp	r25, r24
    131a:	09 f0       	breq	.+2      	; 0x131e <__stack+0x21f>
    131c:	ab ce       	rjmp	.-682    	; 0x1074 <__vector_10+0x23a>
		  if(!(toggler & (1<<3))){
    131e:	90 91 6c 01 	lds	r25, 0x016C
    1322:	93 fd       	sbrc	r25, 3
    1324:	a7 ce       	rjmp	.-690    	; 0x1074 <__vector_10+0x23a>

		     //Back to time display mode 
		     bare_status &= ~(1<<CHANGING_VOL); 
    1326:	80 91 94 01 	lds	r24, 0x0194
    132a:	87 7f       	andi	r24, 0xF7	; 247
    132c:	80 93 94 01 	sts	0x0194, r24
		     segment_data[2]=11;
    1330:	8b e0       	ldi	r24, 0x0B	; 11
    1332:	80 93 97 01 	sts	0x0197, r24
		     toggler |= (1<<3);
    1336:	98 60       	ori	r25, 0x08	; 8
    1338:	90 93 6c 01 	sts	0x016C, r25
    133c:	9b ce       	rjmp	.-714    	; 0x1074 <__vector_10+0x23a>
	    case SNOOZE:
	       if(pressed_button & (1<<7)){
		  if (pressed_button & (1<<0)){
		     mode = EDIT_STIME;
		  }else if(pressed_button & (1<<1)){
		     mode = EDIT_12_24;
    133e:	82 e8       	ldi	r24, 0x82	; 130
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	90 93 7f 01 	sts	0x017F, r25
    1346:	80 93 7e 01 	sts	0x017E, r24
    134a:	a4 cd       	rjmp	.-1208   	; 0xe94 <__vector_10+0x5a>
	       //Send the value to read_encoder(num_enco, spdr_val);
	       //Store the returning value to decide if inc or dec
	       ret_enc = read_encoder(1, spdr_val);
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
		  alarm_time.hr += 1;
    134c:	80 91 5d 01 	lds	r24, 0x015D
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	80 93 5d 01 	sts	0x015D, r24
    1356:	13 cf       	rjmp	.-474    	; 0x117e <__stack+0x7f>
	    case NONE:
	       // make the sound adjustment AND segsum-disp_time select
	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the volume accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the minute
		  if(cur_vol < 100)
    1358:	20 91 2d 01 	lds	r18, 0x012D
    135c:	30 91 2e 01 	lds	r19, 0x012E
    1360:	24 36       	cpi	r18, 0x64	; 100
    1362:	31 05       	cpc	r19, r1
    1364:	30 f4       	brcc	.+12     	; 0x1372 <__stack+0x273>
		     cur_vol += 10;
    1366:	26 5f       	subi	r18, 0xF6	; 246
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	30 93 2e 01 	sts	0x012E, r19
    136e:	20 93 2d 01 	sts	0x012D, r18
		  bare_status |= (1<<CHANGING_VOL);
    1372:	80 91 94 01 	lds	r24, 0x0194
    1376:	88 60       	ori	r24, 0x08	; 8
    1378:	80 93 94 01 	sts	0x0194, r24
		  vol_disp_time.sec = now.sec + 3;
	       }else if(ret_enc == ENCO_CCW){
		  bare_status |= (1<<CHANGING_VOL);
		  if(cur_vol != 0)
		     cur_vol -= 10;
		  vol_disp_time.hr = now.hr;
    137c:	e0 91 58 01 	lds	r30, 0x0158
    1380:	e0 93 67 01 	sts	0x0167, r30
		  vol_disp_time.min= now.min;
    1384:	50 91 59 01 	lds	r21, 0x0159
    1388:	50 93 68 01 	sts	0x0168, r21
		  vol_disp_time.sec = now.sec + 3;
    138c:	80 91 5a 01 	lds	r24, 0x015A
    1390:	8d 5f       	subi	r24, 0xFD	; 253
    1392:	80 93 69 01 	sts	0x0169, r24
    1396:	53 ce       	rjmp	.-858    	; 0x103e <__vector_10+0x204>
	       }

	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
		  alarm_time.min += 1;
    1398:	80 91 5e 01 	lds	r24, 0x015E
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 5e 01 	sts	0x015E, r24
    13a2:	fc ce       	rjmp	.-520    	; 0x119c <__stack+0x9d>
	       }

	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the minute accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the minute
		  now.min += 1;
    13a4:	80 91 59 01 	lds	r24, 0x0159
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	80 93 59 01 	sts	0x0159, r24
    13ae:	5e cf       	rjmp	.-324    	; 0x126c <__stack+0x16d>
	       //Send the value to read_encoder(num_enco, spdr_val);
	       //Store the returning value to decide if inc or dec
	       ret_enc = read_encoder(1, spdr_val);
	       //Inc/Dec the hour accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the hour
		  now.hr += 1;
    13b0:	80 91 58 01 	lds	r24, 0x0158
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	80 93 58 01 	sts	0x0158, r24
    13ba:	49 cf       	rjmp	.-366    	; 0x124e <__stack+0x14f>
		  if (pressed_button & (1<<0)){
		     mode = EDIT_STIME;
		  }else if(pressed_button & (1<<1)){
		     mode = EDIT_12_24;
		  }else if(pressed_button & (1<<2)){
		     mode = EDIT_ATIME;
    13bc:	84 e8       	ldi	r24, 0x84	; 132
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	90 93 7f 01 	sts	0x017F, r25
    13c4:	80 93 7e 01 	sts	0x017E, r24
    13c8:	65 cd       	rjmp	.-1334   	; 0xe94 <__vector_10+0x5a>
	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
		  alarm_time.min += 1;
	       }else if(ret_enc == ENCO_CCW){
		  if(alarm_time.min != 0)
    13ca:	80 91 5e 01 	lds	r24, 0x015E
    13ce:	88 23       	and	r24, r24
    13d0:	61 f1       	breq	.+88     	; 0x142a <__stack+0x32b>
		     alarm_time.min -= 1;
    13d2:	81 50       	subi	r24, 0x01	; 1
    13d4:	80 93 5e 01 	sts	0x015E, r24
    13d8:	e1 ce       	rjmp	.-574    	; 0x119c <__stack+0x9d>
	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the minute accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the minute
		  now.min += 1;
	       }else if(ret_enc == ENCO_CCW){
		  if(now.min != 0)
    13da:	80 91 59 01 	lds	r24, 0x0159
    13de:	88 23       	and	r24, r24
    13e0:	31 f1       	breq	.+76     	; 0x142e <__stack+0x32f>
		     now.min -= 1;
    13e2:	81 50       	subi	r24, 0x01	; 1
    13e4:	80 93 59 01 	sts	0x0159, r24
    13e8:	41 cf       	rjmp	.-382    	; 0x126c <__stack+0x16d>
		  bare_status |= (1<<CHANGING_VOL);
		  vol_disp_time.hr = now.hr;
		  vol_disp_time.min= now.min;
		  vol_disp_time.sec = now.sec + 3;
	       }else if(ret_enc == ENCO_CCW){
		  bare_status |= (1<<CHANGING_VOL);
    13ea:	80 91 94 01 	lds	r24, 0x0194
    13ee:	88 60       	ori	r24, 0x08	; 8
    13f0:	80 93 94 01 	sts	0x0194, r24
		  if(cur_vol != 0)
    13f4:	20 91 2d 01 	lds	r18, 0x012D
    13f8:	30 91 2e 01 	lds	r19, 0x012E
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <__stack+0x305>
    1402:	bc cf       	rjmp	.-136    	; 0x137c <__stack+0x27d>
		     cur_vol -= 10;
    1404:	2a 50       	subi	r18, 0x0A	; 10
    1406:	30 40       	sbci	r19, 0x00	; 0
    1408:	30 93 2e 01 	sts	0x012E, r19
    140c:	20 93 2d 01 	sts	0x012D, r18
    1410:	b5 cf       	rjmp	.-150    	; 0x137c <__stack+0x27d>
	       ret_enc = read_encoder(1, spdr_val);
	       //Inc/Dec the hour accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the hour
		  now.hr += 1;
	       }else if(ret_enc == ENCO_CCW){
		  now.hr -= 1;
    1412:	80 91 58 01 	lds	r24, 0x0158
    1416:	81 50       	subi	r24, 0x01	; 1
    1418:	80 93 58 01 	sts	0x0158, r24
    141c:	18 cf       	rjmp	.-464    	; 0x124e <__stack+0x14f>
	       ret_enc = read_encoder(1, spdr_val);
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
		  alarm_time.hr += 1;
	       }else if(ret_enc == ENCO_CCW){
		  alarm_time.hr -= 1;
    141e:	80 91 5d 01 	lds	r24, 0x015D
    1422:	81 50       	subi	r24, 0x01	; 1
    1424:	80 93 5d 01 	sts	0x015D, r24
    1428:	aa ce       	rjmp	.-684    	; 0x117e <__stack+0x7f>
	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the sum accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the sum
		  alarm_time.min += 1;
	       }else if(ret_enc == ENCO_CCW){
		  if(alarm_time.min != 0)
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	b7 ce       	rjmp	.-658    	; 0x119c <__stack+0x9d>
	       ret_enc = read_encoder(0, spdr_val);
	       //Inc/Dec the minute accordingly
	       if(ret_enc == ENCO_CW){ //CW adding the minute
		  now.min += 1;
	       }else if(ret_enc == ENCO_CCW){
		  if(now.min != 0)
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	1d cf       	rjmp	.-454    	; 0x126c <__stack+0x16d>

00001432 <main>:
}



////////////////////////////////////////////////////////////////////////  MAIN
uint8_t main(){
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
 * Desc: Initilize an ADC
 */
void ADC_init(void){

   //Set all PORTF to be inputs
   DDRF &= ~(1<<0);
    143e:	80 91 61 00 	lds	r24, 0x0061
    1442:	8e 7f       	andi	r24, 0xFE	; 254
    1444:	80 93 61 00 	sts	0x0061, r24
   //Active high 
   PORTF = 0x00;
    1448:	10 92 62 00 	sts	0x0062, r1

   //Using external common GND, Left-Aligned. 
   ADMUX = (1<<REFS0 | 1<<ADLAR);
    144c:	80 e6       	ldi	r24, 0x60	; 96
    144e:	87 b9       	out	0x07, r24	; 7

   //Enable ADC, Start Conversion, Free Running Mode, Interrupt, /128 prescale.
   ADCSRA = (1<<ADEN | 1<<ADSC | 1<<ADFR | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1450:	8f ee       	ldi	r24, 0xEF	; 239
    1452:	86 b9       	out	0x06, r24	; 6
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
   TIMSK |= (1<<TOIE0);
    1454:	87 b7       	in	r24, 0x37	; 55
    1456:	81 60       	ori	r24, 0x01	; 1
    1458:	87 bf       	out	0x37, r24	; 55
   TCCR0 |= (1<<CS02 | 1<<CS00);
    145a:	83 b7       	in	r24, 0x33	; 51
    145c:	85 60       	ori	r24, 0x05	; 5
    145e:	83 bf       	out	0x33, r24	; 51
 * Input : None
 * Output: None
 */
void tcnt1_init(void){
   //PORTC Pin2 as an output for TCNT waveform
   DDRC  |= (1<<PC2);
    1460:	a2 9a       	sbi	0x14, 2	; 20
   //Enable timer interrupt mask, comparing w/ OCF1A
   TIMSK |= (1<<OCIE1A);
    1462:	87 b7       	in	r24, 0x37	; 55
    1464:	80 61       	ori	r24, 0x10	; 16
    1466:	87 bf       	out	0x37, r24	; 55
   //CTC mode, /1024 prescaling 
   TCCR1B = (1<<WGM12 | 1<<CS12 | 1<<CS10);
    1468:	8d e0       	ldi	r24, 0x0D	; 13
    146a:	8e bd       	out	0x2e, r24	; 46
   OCR1A = 0xFFFF;
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	9b bd       	out	0x2b, r25	; 43
    1472:	8a bd       	out	0x2a, r24	; 42
 * Input : None
 * Output: None
 */
void tcnt2_init(void){
   //PORTB Pin7 as an output for PWM waveform
   DDRB  |= (1<<PB7);
    1474:	bf 9a       	sbi	0x17, 7	; 23

   //Enable interrupt for the TCNT2 for button check and encoder
   TIMSK |= (1<<TOIE2);
    1476:	87 b7       	in	r24, 0x37	; 55
    1478:	80 64       	ori	r24, 0x40	; 64
    147a:	87 bf       	out	0x37, r24	; 55

   //Fast-PWM mode, no prescaling, Set OCR2 on compare match
   TCCR2 = (1<<WGM21 | 1<<WGM20 | 1<<CS20 | 1<<COM21 | 1<<COM20);
    147c:	89 e7       	ldi	r24, 0x79	; 121
    147e:	85 bd       	out	0x25, r24	; 37

   //Clear at 0x64
   OCR2  = 0xFF; 
    1480:	1f ef       	ldi	r17, 0xFF	; 255
    1482:	13 bd       	out	0x23, r17	; 35
 * Input : None
 * Output: None
 */
void tcnt3_init(void){
   //PORTE Pin3 as an output for PWM waveform
   DDRE  |= (1<<PE3);
    1484:	13 9a       	sbi	0x02, 3	; 2

   //Fast-PWM mode, no prescaling, ICR3 top, OCR3A comp (clear on match) 
   TCCR3A = (1<<COM3A1 | 1<<COM3A0 | 1<<WGM31);
    1486:	82 ec       	ldi	r24, 0xC2	; 194
    1488:	80 93 8b 00 	sts	0x008B, r24
   TCCR3B = (1<<WGM33 | 1<<WGM32 | 1<<CS30);
    148c:	89 e1       	ldi	r24, 0x19	; 25
    148e:	80 93 8a 00 	sts	0x008A, r24

   ICR3   = 0x64;
    1492:	84 e6       	ldi	r24, 0x64	; 100
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	90 93 81 00 	sts	0x0081, r25
    149a:	80 93 80 00 	sts	0x0080, r24
   OCR3A  = 90; 
    149e:	8a e5       	ldi	r24, 0x5A	; 90
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	90 93 87 00 	sts	0x0087, r25
    14a6:	80 93 86 00 	sts	0x0086, r24
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
   DDRB  |=  (1<<PB2) | (1<<PB1) | (1<<PB0);           //Turn on SS, MOSI, SCLK
    14aa:	87 b3       	in	r24, 0x17	; 23
    14ac:	87 60       	ori	r24, 0x07	; 7
    14ae:	87 bb       	out	0x17, r24	; 23
   SPCR  |=  ( 1<<SPE | 1<<MSTR );  //set up SPI mode
    14b0:	8d b1       	in	r24, 0x0d	; 13
    14b2:	80 65       	ori	r24, 0x50	; 80
    14b4:	8d b9       	out	0x0d, r24	; 13
   SPSR  |=  (1<<SPI2X);           // double speed operation
    14b6:	70 9a       	sbi	0x0e, 0	; 14
   tcnt0_init();
   tcnt1_init();
   tcnt2_init();
   tcnt3_init();
   spi_init();
   init_twi();
    14b8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <init_twi>
   LCD_Init();
    14bc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_Init>
   //lcd_init();
   USART0_init(103);
    14c0:	87 e6       	ldi	r24, 0x67	; 103
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <USART0_init>

   //Set TWI pointer to the temperature output
   lm73_set_ptr_to_read();
    14c8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <lm73_set_ptr_to_read>

   //Set a Colon display
   segment_data[2]=11;
    14cc:	8b e0       	ldi	r24, 0x0B	; 11
    14ce:	80 93 97 01 	sts	0x0197, r24
   //Set an initial state machine
   mode = NONE;
    14d2:	10 92 7f 01 	sts	0x017F, r1
    14d6:	10 92 7e 01 	sts	0x017E, r1

   //PortE Pin6 for Encoder strobe
   //PORTE Pin6 as an output for Encoder Strobe
   DDRE  |= (1<<PE6);
    14da:	16 9a       	sbi	0x02, 6	; 2
   PORTE = 0xFF;
    14dc:	13 b9       	out	0x03, r17	; 3

   //PORTD Pin as an output for the BarGraph
   DDRD |= (1<<PD2);	 
    14de:	8a 9a       	sbi	0x11, 2	; 17

   //Enable interrupt
   sei();
    14e0:	78 94       	sei
      DDRA = 0xFF;
      //prevent ghosting
      PORTA = 0xFF;

      if(digit==2 && !(bare_status&(1<<COLON_DISP)))
	 ++digit;
    14e2:	53 e0       	ldi	r21, 0x03	; 3
    14e4:	e5 2e       	mov	r14, r21
      //send 7 segment code to LED segments
      PORTA = dec_to_7seg[segment_data[digit]];
      //send PORTB the digit to display
      PORTB = ((0x8<<4) & PORTB)|(digit<<4); 
      //update digit to display
      digit = (++digit)%5;
    14e6:	05 e0       	ldi	r16, 0x05	; 5

      //----------------------------------------------- SPI
      DDRB |= 0xF1;
      //Load the mode into SPDR
      if(bare_status & (1<<ARM_ALARM)){
	 SPDR = (pressed_button & (1<<7)) | (0xFF & 1<<((run_led)%7)); 
    14e8:	47 e0       	ldi	r20, 0x07	; 7
    14ea:	f4 2e       	mov	r15, r20
    14ec:	c1 e0       	ldi	r28, 0x01	; 1
    14ee:	d0 e0       	ldi	r29, 0x00	; 0

   while(1){

      //------------------------------------------------ Display 7seg
      //break up the disp_value to 4, BCD digits in the array: call (segsum)
      if(bare_status & (1<<CHANGING_VOL) && mode==NONE)
    14f0:	80 91 94 01 	lds	r24, 0x0194
    14f4:	83 ff       	sbrs	r24, 3
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <main+0xd4>
    14f8:	80 91 7e 01 	lds	r24, 0x017E
    14fc:	90 91 7f 01 	lds	r25, 0x017F
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	09 f4       	brne	.+2      	; 0x1506 <main+0xd4>
    1504:	90 c0       	rjmp	.+288    	; 0x1626 <main+0x1f4>
	 segsum(cur_vol);
      else
	 disp_time();
    1506:	0e 94 80 04 	call	0x900	; 0x900 <disp_time>
      //make PORTA an output
      DDRA = 0xFF;
    150a:	1a bb       	out	0x1a, r17	; 26
      //prevent ghosting
      PORTA = 0xFF;
    150c:	1b bb       	out	0x1b, r17	; 27

      if(digit==2 && !(bare_status&(1<<COLON_DISP)))
    150e:	80 91 52 01 	lds	r24, 0x0152
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	09 f4       	brne	.+2      	; 0x1518 <main+0xe6>
    1516:	7d c0       	rjmp	.+250    	; 0x1612 <main+0x1e0>
    1518:	e8 2f       	mov	r30, r24
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	20 91 94 01 	lds	r18, 0x0194
	 ++digit;
      //send 7 segment code to LED segments
      PORTA = dec_to_7seg[segment_data[digit]];
    1520:	eb 56       	subi	r30, 0x6B	; 107
    1522:	fe 4f       	sbci	r31, 0xFE	; 254
    1524:	e0 81       	ld	r30, Z
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	e8 5e       	subi	r30, 0xE8	; 232
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	90 81       	ld	r25, Z
    152e:	9b bb       	out	0x1b, r25	; 27
      //send PORTB the digit to display
      PORTB = ((0x8<<4) & PORTB)|(digit<<4); 
    1530:	38 b3       	in	r19, 0x18	; 24
    1532:	98 2f       	mov	r25, r24
    1534:	92 95       	swap	r25
    1536:	90 7f       	andi	r25, 0xF0	; 240
    1538:	30 78       	andi	r19, 0x80	; 128
    153a:	93 2b       	or	r25, r19
    153c:	98 bb       	out	0x18, r25	; 24
      //update digit to display
      digit = (++digit)%5;
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	60 2f       	mov	r22, r16
    1542:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    1546:	90 93 52 01 	sts	0x0152, r25

      //----------------------------------------------- SPI
      DDRB |= 0xF1;
    154a:	87 b3       	in	r24, 0x17	; 23
    154c:	81 6f       	ori	r24, 0xF1	; 241
    154e:	87 bb       	out	0x17, r24	; 23
      //Load the mode into SPDR
      if(bare_status & (1<<ARM_ALARM)){
    1550:	26 ff       	sbrs	r18, 6
    1552:	36 c0       	rjmp	.+108    	; 0x15c0 <main+0x18e>
	 SPDR = (pressed_button & (1<<7)) | (0xFF & 1<<((run_led)%7)); 
    1554:	80 91 9a 01 	lds	r24, 0x019A
    1558:	6f 2d       	mov	r22, r15
    155a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodqi4>
    155e:	ae 01       	movw	r20, r28
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <main+0x134>
    1562:	44 0f       	add	r20, r20
    1564:	55 1f       	adc	r21, r21
    1566:	9a 95       	dec	r25
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <main+0x130>
    156a:	30 91 53 01 	lds	r19, 0x0153
    156e:	30 78       	andi	r19, 0x80	; 128
    1570:	34 2b       	or	r19, r20
    1572:	3f b9       	out	0x0f, r19	; 15
	 //        SPDR = pressed_button;
      }
      //Prevent ghosting for 7seg
      //PORTB = ((0x8<<4) & PORTB)|(5<<4); 
      //Wait until you're done sending
      while(!(SPSR & (1<<SPIF)));
    1574:	77 9b       	sbis	0x0e, 7	; 14
    1576:	fe cf       	rjmp	.-4      	; 0x1574 <main+0x142>

      //Strobe BarGraph
      PORTD |= (1<<PD2);
    1578:	92 9a       	sbi	0x12, 2	; 18
      PORTD &= ~(1<<PD2);
    157a:	92 98       	cbi	0x12, 2	; 18

      //Strobe Encoder 
      PORTE &= ~(1<<PD6);
    157c:	1e 98       	cbi	0x03, 6	; 3
      PORTE |= (1<<PD6);
    157e:	1e 9a       	sbi	0x03, 6	; 3

      //Wait for the SPDR to be filled
      while(!(SPSR & (1<<SPIF)));
    1580:	77 9b       	sbis	0x0e, 7	; 14
    1582:	fe cf       	rjmp	.-4      	; 0x1580 <main+0x14e>
      //Store the SPDR value
      spdr_val = SPDR;
    1584:	8f b1       	in	r24, 0x0f	; 15
    1586:	80 93 55 01 	sts	0x0155, r24

      //Once in so very often (1 sec) 
      if(bare_status & (1<<TEMP_LCD_DISP)){ 
    158a:	82 2f       	mov	r24, r18
    158c:	20 fd       	sbrc	r18, 0
    158e:	36 c0       	rjmp	.+108    	; 0x15fc <main+0x1ca>
      static uint8_t lcd_cursor=0;
      static uint8_t lcd_idx;
      static uint8_t lcd_line = 0;
      //TODO
      //if(bare_status & (1<<SOUND_ALARM))
      if(bare_status & (1<<ARM_ALARM)){
    1590:	86 fd       	sbrc	r24, 6
    1592:	1e c0       	rjmp	.+60     	; 0x15d0 <main+0x19e>
	    if(bare_status & (1<<CLR_LCD_DISP)){
	    LCD_Clr();
	    bare_status &= ~(1<<CLR_LCD_DISP);
	    }
	    */
	 if(lcd_line == 0){
    1594:	80 91 56 01 	lds	r24, 0x0156
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <main+0x16c>
    159c:	4b c0       	rjmp	.+150    	; 0x1634 <main+0x202>
	       ++lcd_line;
	    }else{
	       ++lcd_cursor;
	    }
	 }else{
	    LCD_PutChar(mega48_temp_str[lcd_cursor]);
    159e:	e0 91 57 01 	lds	r30, 0x0157
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	e5 57       	subi	r30, 0x75	; 117
    15a6:	fe 4f       	sbci	r31, 0xFE	; 254
    15a8:	80 81       	ld	r24, Z
    15aa:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_PutChar>
	    if(lcd_cursor == 7){
    15ae:	80 91 57 01 	lds	r24, 0x0157
    15b2:	87 30       	cpi	r24, 0x07	; 7
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <main+0x186>
    15b6:	5a c0       	rjmp	.+180    	; 0x166c <main+0x23a>
	       lcd_cursor=0;
	       LCD_MovCursor(1,0);
	       --lcd_line;
	    }else{
	       ++lcd_cursor;
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 57 01 	sts	0x0157, r24
    15be:	98 cf       	rjmp	.-208    	; 0x14f0 <main+0xbe>
      DDRB |= 0xF1;
      //Load the mode into SPDR
      if(bare_status & (1<<ARM_ALARM)){
	 SPDR = (pressed_button & (1<<7)) | (0xFF & 1<<((run_led)%7)); 
      }else{
	 SPDR = mode | (pressed_button & 0b10000000);
    15c0:	80 91 53 01 	lds	r24, 0x0153
    15c4:	80 78       	andi	r24, 0x80	; 128
    15c6:	90 91 7e 01 	lds	r25, 0x017E
    15ca:	89 2b       	or	r24, r25
    15cc:	8f b9       	out	0x0f, r24	; 15
    15ce:	d2 cf       	rjmp	.-92     	; 0x1574 <main+0x142>
      static uint8_t lcd_idx;
      static uint8_t lcd_line = 0;
      //TODO
      //if(bare_status & (1<<SOUND_ALARM))
      if(bare_status & (1<<ARM_ALARM)){
	 bare_status |= 1<<CLR_LCD_DISP;
    15d0:	24 60       	ori	r18, 0x04	; 4
    15d2:	20 93 94 01 	sts	0x0194, r18
	 LCD_PutChar(lcd_string[lcd_cursor]);
    15d6:	e0 91 57 01 	lds	r30, 0x0157
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	e1 5d       	subi	r30, 0xD1	; 209
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	80 81       	ld	r24, Z
    15e2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_PutChar>
	 if(lcd_cursor == (LCD_STR_LENGTH-1)){
    15e6:	80 91 57 01 	lds	r24, 0x0157
    15ea:	8d 30       	cpi	r24, 0x0D	; 13
    15ec:	29 f7       	brne	.-54     	; 0x15b8 <main+0x186>
	    lcd_cursor=0;
    15ee:	10 92 57 01 	sts	0x0157, r1
	    LCD_MovCursor(1,0);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_MovCursor>
    15fa:	7a cf       	rjmp	.-268    	; 0x14f0 <main+0xbe>
      spdr_val = SPDR;

      //Once in so very often (1 sec) 
      if(bare_status & (1<<TEMP_LCD_DISP)){ 
	 //------------------------------------------------ TWI Control
	 mega128_temperature();
    15fc:	0e 94 a8 05 	call	0xb50	; 0xb50 <mega128_temperature>

	 //----------------------------------------------- USART
	 bluetooth();
    1600:	0e 94 36 06 	call	0xc6c	; 0xc6c <bluetooth>

	 bare_status &= ~(1<<TEMP_LCD_DISP);
    1604:	20 91 94 01 	lds	r18, 0x0194
    1608:	2e 7f       	andi	r18, 0xFE	; 254
    160a:	20 93 94 01 	sts	0x0194, r18
    160e:	82 2f       	mov	r24, r18
    1610:	bf cf       	rjmp	.-130    	; 0x1590 <main+0x15e>
      //make PORTA an output
      DDRA = 0xFF;
      //prevent ghosting
      PORTA = 0xFF;

      if(digit==2 && !(bare_status&(1<<COLON_DISP)))
    1612:	20 91 94 01 	lds	r18, 0x0194
    1616:	27 fd       	sbrc	r18, 7
    1618:	26 c0       	rjmp	.+76     	; 0x1666 <main+0x234>
	 ++digit;
    161a:	e0 92 52 01 	sts	0x0152, r14
    161e:	e3 e0       	ldi	r30, 0x03	; 3
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	7d cf       	rjmp	.-262    	; 0x1520 <main+0xee>
   while(1){

      //------------------------------------------------ Display 7seg
      //break up the disp_value to 4, BCD digits in the array: call (segsum)
      if(bare_status & (1<<CHANGING_VOL) && mode==NONE)
	 segsum(cur_vol);
    1626:	80 91 2d 01 	lds	r24, 0x012D
    162a:	90 91 2e 01 	lds	r25, 0x012E
    162e:	0e 94 3c 04 	call	0x878	; 0x878 <segsum>
    1632:	6b cf       	rjmp	.-298    	; 0x150a <main+0xd8>
	    LCD_Clr();
	    bare_status &= ~(1<<CLR_LCD_DISP);
	    }
	    */
	 if(lcd_line == 0){
	    LCD_PutChar(mega128_temp_str[lcd_cursor]);
    1634:	e0 91 57 01 	lds	r30, 0x0157
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	e0 58       	subi	r30, 0x80	; 128
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	80 81       	ld	r24, Z
    1640:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_PutChar>
	    if(lcd_cursor == 7){
    1644:	80 91 57 01 	lds	r24, 0x0157
    1648:	87 30       	cpi	r24, 0x07	; 7
    164a:	09 f0       	breq	.+2      	; 0x164e <main+0x21c>
    164c:	b5 cf       	rjmp	.-150    	; 0x15b8 <main+0x186>
	       lcd_cursor=0;
    164e:	10 92 57 01 	sts	0x0157, r1
	       LCD_MovCursor(2,0);
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_MovCursor>
	       ++lcd_line;
    165a:	80 91 56 01 	lds	r24, 0x0156
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	80 93 56 01 	sts	0x0156, r24
    1664:	45 cf       	rjmp	.-374    	; 0x14f0 <main+0xbe>
      //make PORTA an output
      DDRA = 0xFF;
      //prevent ghosting
      PORTA = 0xFF;

      if(digit==2 && !(bare_status&(1<<COLON_DISP)))
    1666:	e2 e0       	ldi	r30, 0x02	; 2
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	5a cf       	rjmp	.-332    	; 0x1520 <main+0xee>
	       ++lcd_cursor;
	    }
	 }else{
	    LCD_PutChar(mega48_temp_str[lcd_cursor]);
	    if(lcd_cursor == 7){
	       lcd_cursor=0;
    166c:	10 92 57 01 	sts	0x0157, r1
	       LCD_MovCursor(1,0);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_MovCursor>
	       --lcd_line;
    1678:	80 91 56 01 	lds	r24, 0x0156
    167c:	81 50       	subi	r24, 0x01	; 1
    167e:	80 93 56 01 	sts	0x0156, r24
    1682:	36 cf       	rjmp	.-404    	; 0x14f0 <main+0xbe>

00001684 <strobe_lcd>:
}


void strobe_lcd(void) {
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
    1684:	e2 e6       	ldi	r30, 0x62	; 98
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	88 60       	ori	r24, 0x08	; 8
    168c:	80 83       	st	Z, r24
	PORTF &= ~0x08;
    168e:	80 81       	ld	r24, Z
    1690:	87 7f       	andi	r24, 0xF7	; 247
    1692:	80 83       	st	Z, r24
}
    1694:	08 95       	ret

00001696 <LCD_Clr>:

void LCD_Clr(void) {
	LCD_CMD(0x01);
    1696:	1f b8       	out	0x0f, r1	; 15
    1698:	77 9b       	sbis	0x0e, 7	; 14
    169a:	fe cf       	rjmp	.-4      	; 0x1698 <LCD_Clr+0x2>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	8f b9       	out	0x0f, r24	; 15
    16a0:	77 9b       	sbis	0x0e, 7	; 14
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <LCD_Clr+0xa>
    16a4:	80 91 62 00 	lds	r24, 0x0062
    16a8:	88 60       	ori	r24, 0x08	; 8
    16aa:	80 93 62 00 	sts	0x0062, r24
    16ae:	80 91 62 00 	lds	r24, 0x0062
    16b2:	87 7f       	andi	r24, 0xF7	; 247
    16b4:	80 93 62 00 	sts	0x0062, r24
    16b8:	80 e9       	ldi	r24, 0x90	; 144
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_Clr+0x26>
    16c0:	80 e4       	ldi	r24, 0x40	; 64
    16c2:	9f e1       	ldi	r25, 0x1F	; 31
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_Clr+0x2e>
	_delay_ms(2);   //obligatory waiting for slow LCD
}
    16c8:	08 95       	ret

000016ca <LCD_MovCursorLn1>:

void LCD_MovCursorLn1(void) {
	LCD_CMD(0x80);
    16ca:	1f b8       	out	0x0f, r1	; 15
    16cc:	77 9b       	sbis	0x0e, 7	; 14
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <LCD_MovCursorLn1+0x2>
    16d0:	80 e8       	ldi	r24, 0x80	; 128
    16d2:	8f b9       	out	0x0f, r24	; 15
    16d4:	77 9b       	sbis	0x0e, 7	; 14
    16d6:	fe cf       	rjmp	.-4      	; 0x16d4 <LCD_MovCursorLn1+0xa>
    16d8:	80 91 62 00 	lds	r24, 0x0062
    16dc:	88 60       	ori	r24, 0x08	; 8
    16de:	80 93 62 00 	sts	0x0062, r24
    16e2:	80 91 62 00 	lds	r24, 0x0062
    16e6:	87 7f       	andi	r24, 0xF7	; 247
    16e8:	80 93 62 00 	sts	0x0062, r24
    16ec:	80 e9       	ldi	r24, 0x90	; 144
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_MovCursorLn1+0x26>
}
    16f4:	08 95       	ret

000016f6 <LCD_MovCursorLn2>:

void LCD_MovCursorLn2(void) {
	LCD_CMD(0xC0);
    16f6:	1f b8       	out	0x0f, r1	; 15
    16f8:	77 9b       	sbis	0x0e, 7	; 14
    16fa:	fe cf       	rjmp	.-4      	; 0x16f8 <LCD_MovCursorLn2+0x2>
    16fc:	80 ec       	ldi	r24, 0xC0	; 192
    16fe:	8f b9       	out	0x0f, r24	; 15
    1700:	77 9b       	sbis	0x0e, 7	; 14
    1702:	fe cf       	rjmp	.-4      	; 0x1700 <LCD_MovCursorLn2+0xa>
    1704:	80 91 62 00 	lds	r24, 0x0062
    1708:	88 60       	ori	r24, 0x08	; 8
    170a:	80 93 62 00 	sts	0x0062, r24
    170e:	80 91 62 00 	lds	r24, 0x0062
    1712:	87 7f       	andi	r24, 0xF7	; 247
    1714:	80 93 62 00 	sts	0x0062, r24
    1718:	80 e9       	ldi	r24, 0x90	; 144
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_MovCursorLn2+0x26>
}
    1720:	08 95       	ret

00001722 <LCD_CursorBlinkOn>:

void LCD_CursorBlinkOn(void) {
	LCD_CMD(0x0F);
    1722:	1f b8       	out	0x0f, r1	; 15
    1724:	77 9b       	sbis	0x0e, 7	; 14
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <LCD_CursorBlinkOn+0x2>
    1728:	8f e0       	ldi	r24, 0x0F	; 15
    172a:	8f b9       	out	0x0f, r24	; 15
    172c:	77 9b       	sbis	0x0e, 7	; 14
    172e:	fe cf       	rjmp	.-4      	; 0x172c <LCD_CursorBlinkOn+0xa>
    1730:	80 91 62 00 	lds	r24, 0x0062
    1734:	88 60       	ori	r24, 0x08	; 8
    1736:	80 93 62 00 	sts	0x0062, r24
    173a:	80 91 62 00 	lds	r24, 0x0062
    173e:	87 7f       	andi	r24, 0xF7	; 247
    1740:	80 93 62 00 	sts	0x0062, r24
    1744:	80 e9       	ldi	r24, 0x90	; 144
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_CursorBlinkOn+0x26>
}
    174c:	08 95       	ret

0000174e <LCD_CursorBlinkOff>:

void LCD_CursorBlinkOff(void) {
	LCD_CMD(0x0C);
    174e:	1f b8       	out	0x0f, r1	; 15
    1750:	77 9b       	sbis	0x0e, 7	; 14
    1752:	fe cf       	rjmp	.-4      	; 0x1750 <LCD_CursorBlinkOff+0x2>
    1754:	8c e0       	ldi	r24, 0x0C	; 12
    1756:	8f b9       	out	0x0f, r24	; 15
    1758:	77 9b       	sbis	0x0e, 7	; 14
    175a:	fe cf       	rjmp	.-4      	; 0x1758 <LCD_CursorBlinkOff+0xa>
    175c:	80 91 62 00 	lds	r24, 0x0062
    1760:	88 60       	ori	r24, 0x08	; 8
    1762:	80 93 62 00 	sts	0x0062, r24
    1766:	80 91 62 00 	lds	r24, 0x0062
    176a:	87 7f       	andi	r24, 0xF7	; 247
    176c:	80 93 62 00 	sts	0x0062, r24
    1770:	80 e9       	ldi	r24, 0x90	; 144
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_CursorBlinkOff+0x26>
}
    1778:	08 95       	ret

0000177a <LCD_MovCursor>:
		
	The cursor will not be moved if an invalid location is provided
*/
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
    177a:	60 31       	cpi	r22, 0x10	; 16
    177c:	20 f4       	brcc	.+8      	; 0x1786 <LCD_MovCursor+0xc>
		return;
	if (line == 1) {
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	19 f0       	breq	.+6      	; 0x1788 <LCD_MovCursor+0xe>
		addr = 0x80 + position;
	} else if (line == 2) {
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	b9 f0       	breq	.+46     	; 0x17b4 <LCD_MovCursor+0x3a>
    1786:	08 95       	ret
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
    1788:	60 58       	subi	r22, 0x80	; 128
		addr = 0xC0 + position;
	} else {
		// invalid line number
		return;
	}
	LCD_CMD(addr);
    178a:	1f b8       	out	0x0f, r1	; 15
    178c:	77 9b       	sbis	0x0e, 7	; 14
    178e:	fe cf       	rjmp	.-4      	; 0x178c <LCD_MovCursor+0x12>
    1790:	6f b9       	out	0x0f, r22	; 15
    1792:	77 9b       	sbis	0x0e, 7	; 14
    1794:	fe cf       	rjmp	.-4      	; 0x1792 <LCD_MovCursor+0x18>
    1796:	80 91 62 00 	lds	r24, 0x0062
    179a:	88 60       	ori	r24, 0x08	; 8
    179c:	80 93 62 00 	sts	0x0062, r24
    17a0:	80 91 62 00 	lds	r24, 0x0062
    17a4:	87 7f       	andi	r24, 0xF7	; 247
    17a6:	80 93 62 00 	sts	0x0062, r24
    17aa:	80 e9       	ldi	r24, 0x90	; 144
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_MovCursor+0x34>
    17b2:	08 95       	ret
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
	} else if (line == 2) {
		addr = 0xC0 + position;
    17b4:	60 54       	subi	r22, 0x40	; 64
    17b6:	e9 cf       	rjmp	.-46     	; 0x178a <LCD_MovCursor+0x10>

000017b8 <LCD_FillSpaces>:
		return;
	}
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
    17b8:	80 e1       	ldi	r24, 0x10	; 16
    17ba:	90 e0       	ldi	r25, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		LCD_DATA(' ');
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	50 e2       	ldi	r21, 0x20	; 32
    17c0:	20 e9       	ldi	r18, 0x90	; 144
    17c2:	31 e0       	ldi	r19, 0x01	; 1
    17c4:	6f b9       	out	0x0f, r22	; 15
    17c6:	77 9b       	sbis	0x0e, 7	; 14
    17c8:	fe cf       	rjmp	.-4      	; 0x17c6 <LCD_FillSpaces+0xe>
    17ca:	5f b9       	out	0x0f, r21	; 15
    17cc:	77 9b       	sbis	0x0e, 7	; 14
    17ce:	fe cf       	rjmp	.-4      	; 0x17cc <LCD_FillSpaces+0x14>
    17d0:	40 91 62 00 	lds	r20, 0x0062
    17d4:	48 60       	ori	r20, 0x08	; 8
    17d6:	40 93 62 00 	sts	0x0062, r20
    17da:	40 91 62 00 	lds	r20, 0x0062
    17de:	47 7f       	andi	r20, 0xF7	; 247
    17e0:	40 93 62 00 	sts	0x0062, r20
    17e4:	f9 01       	movw	r30, r18
    17e6:	31 97       	sbiw	r30, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_FillSpaces+0x2e>
    17ea:	01 97       	sbiw	r24, 0x01	; 1
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
	int count;
	for (count=0; count<=15; count++){
    17ec:	59 f7       	brne	.-42     	; 0x17c4 <LCD_FillSpaces+0xc>
		LCD_DATA(' ');
	}
}
    17ee:	08 95       	ret

000017f0 <LCD_PutDec8>:
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
    17f0:	84 36       	cpi	r24, 0x64	; 100
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <LCD_PutDec8+0x6>
    17f4:	5b c0       	rjmp	.+182    	; 0x18ac <LCD_PutDec8+0xbc>
    17f6:	90 e0       	ldi	r25, 0x00	; 0
		digit++;
    17f8:	9f 5f       	subi	r25, 0xFF	; 255
		num -= 100;
    17fa:	84 56       	subi	r24, 0x64	; 100
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
    17fc:	84 36       	cpi	r24, 0x64	; 100
    17fe:	e0 f7       	brcc	.-8      	; 0x17f8 <LCD_PutDec8+0x8>
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
    1800:	99 23       	and	r25, r25
    1802:	09 f4       	brne	.+2      	; 0x1806 <LCD_PutDec8+0x16>
    1804:	53 c0       	rjmp	.+166    	; 0x18ac <LCD_PutDec8+0xbc>
		LCD_DATA(digit + 48);
    1806:	21 e0       	ldi	r18, 0x01	; 1
    1808:	2f b9       	out	0x0f, r18	; 15
    180a:	77 9b       	sbis	0x0e, 7	; 14
    180c:	fe cf       	rjmp	.-4      	; 0x180a <LCD_PutDec8+0x1a>
    180e:	90 5d       	subi	r25, 0xD0	; 208
    1810:	9f b9       	out	0x0f, r25	; 15
    1812:	77 9b       	sbis	0x0e, 7	; 14
    1814:	fe cf       	rjmp	.-4      	; 0x1812 <LCD_PutDec8+0x22>
    1816:	90 91 62 00 	lds	r25, 0x0062
    181a:	98 60       	ori	r25, 0x08	; 8
    181c:	90 93 62 00 	sts	0x0062, r25
    1820:	90 91 62 00 	lds	r25, 0x0062
    1824:	97 7f       	andi	r25, 0xF7	; 247
    1826:	90 93 62 00 	sts	0x0062, r25
    182a:	e0 e9       	ldi	r30, 0x90	; 144
    182c:	f1 e0       	ldi	r31, 0x01	; 1
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_PutDec8+0x3e>
		flag = 1;
    1832:	21 e0       	ldi	r18, 0x01	; 1
	}
	digit = 0;
	while (num >= 10) {
    1834:	8a 30       	cpi	r24, 0x0A	; 10
    1836:	b0 f1       	brcs	.+108    	; 0x18a4 <LCD_PutDec8+0xb4>
    1838:	90 e0       	ldi	r25, 0x00	; 0
		digit++;
    183a:	9f 5f       	subi	r25, 0xFF	; 255
		num -= 10;
    183c:	8a 50       	subi	r24, 0x0A	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
    183e:	8a 30       	cpi	r24, 0x0A	; 10
    1840:	e0 f7       	brcc	.-8      	; 0x183a <LCD_PutDec8+0x4a>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
    1842:	99 23       	and	r25, r25
    1844:	79 f1       	breq	.+94     	; 0x18a4 <LCD_PutDec8+0xb4>
		LCD_DATA(digit + 48);
    1846:	21 e0       	ldi	r18, 0x01	; 1
    1848:	2f b9       	out	0x0f, r18	; 15
    184a:	77 9b       	sbis	0x0e, 7	; 14
    184c:	fe cf       	rjmp	.-4      	; 0x184a <LCD_PutDec8+0x5a>
    184e:	90 5d       	subi	r25, 0xD0	; 208
    1850:	9f b9       	out	0x0f, r25	; 15
    1852:	77 9b       	sbis	0x0e, 7	; 14
    1854:	fe cf       	rjmp	.-4      	; 0x1852 <LCD_PutDec8+0x62>
    1856:	90 91 62 00 	lds	r25, 0x0062
    185a:	98 60       	ori	r25, 0x08	; 8
    185c:	90 93 62 00 	sts	0x0062, r25
    1860:	90 91 62 00 	lds	r25, 0x0062
    1864:	97 7f       	andi	r25, 0xF7	; 247
    1866:	90 93 62 00 	sts	0x0062, r25
    186a:	e0 e9       	ldi	r30, 0x90	; 144
    186c:	f1 e0       	ldi	r31, 0x01	; 1
    186e:	31 97       	sbiw	r30, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_PutDec8+0x7e>
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
    1872:	88 23       	and	r24, r24
    1874:	e9 f0       	breq	.+58     	; 0x18b0 <LCD_PutDec8+0xc0>
    1876:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	9f b9       	out	0x0f, r25	; 15
    187c:	77 9b       	sbis	0x0e, 7	; 14
    187e:	fe cf       	rjmp	.-4      	; 0x187c <LCD_PutDec8+0x8c>
    1880:	8f b9       	out	0x0f, r24	; 15
    1882:	77 9b       	sbis	0x0e, 7	; 14
    1884:	fe cf       	rjmp	.-4      	; 0x1882 <LCD_PutDec8+0x92>
    1886:	80 91 62 00 	lds	r24, 0x0062
    188a:	88 60       	ori	r24, 0x08	; 8
    188c:	80 93 62 00 	sts	0x0062, r24
    1890:	80 91 62 00 	lds	r24, 0x0062
    1894:	87 7f       	andi	r24, 0xF7	; 247
    1896:	80 93 62 00 	sts	0x0062, r24
    189a:	80 e9       	ldi	r24, 0x90	; 144
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_PutDec8+0xae>
}
    18a2:	08 95       	ret
	digit = 0;
	while (num >= 10) {
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
    18a4:	21 30       	cpi	r18, 0x01	; 1
    18a6:	29 f7       	brne	.-54     	; 0x1872 <LCD_PutDec8+0x82>
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	cd cf       	rjmp	.-102    	; 0x1846 <LCD_PutDec8+0x56>
	Convert an 8 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	c2 cf       	rjmp	.-124    	; 0x1834 <LCD_PutDec8+0x44>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
    18b0:	80 e3       	ldi	r24, 0x30	; 48
    18b2:	e2 cf       	rjmp	.-60     	; 0x1878 <LCD_PutDec8+0x88>

000018b4 <LCD_PutDec16>:
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
    18b4:	27 e2       	ldi	r18, 0x27	; 39
    18b6:	80 31       	cpi	r24, 0x10	; 16
    18b8:	92 07       	cpc	r25, r18
    18ba:	08 f4       	brcc	.+2      	; 0x18be <LCD_PutDec16+0xa>
    18bc:	b4 c0       	rjmp	.+360    	; 0x1a26 <LCD_PutDec16+0x172>
    18be:	20 e0       	ldi	r18, 0x00	; 0
		digit++;
    18c0:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 10000;
    18c2:	80 51       	subi	r24, 0x10	; 16
    18c4:	97 42       	sbci	r25, 0x27	; 39
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
    18c6:	37 e2       	ldi	r19, 0x27	; 39
    18c8:	80 31       	cpi	r24, 0x10	; 16
    18ca:	93 07       	cpc	r25, r19
    18cc:	c8 f7       	brcc	.-14     	; 0x18c0 <LCD_PutDec16+0xc>
		digit++;
		num -= 10000;
	}
	if (digit > 0 || flag == 1) {
    18ce:	22 23       	and	r18, r18
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <LCD_PutDec16+0x20>
    18d2:	a9 c0       	rjmp	.+338    	; 0x1a26 <LCD_PutDec16+0x172>
		LCD_DATA(digit + 48);
    18d4:	31 e0       	ldi	r19, 0x01	; 1
    18d6:	3f b9       	out	0x0f, r19	; 15
    18d8:	77 9b       	sbis	0x0e, 7	; 14
    18da:	fe cf       	rjmp	.-4      	; 0x18d8 <LCD_PutDec16+0x24>
    18dc:	20 5d       	subi	r18, 0xD0	; 208
    18de:	2f b9       	out	0x0f, r18	; 15
    18e0:	77 9b       	sbis	0x0e, 7	; 14
    18e2:	fe cf       	rjmp	.-4      	; 0x18e0 <LCD_PutDec16+0x2c>
    18e4:	20 91 62 00 	lds	r18, 0x0062
    18e8:	28 60       	ori	r18, 0x08	; 8
    18ea:	20 93 62 00 	sts	0x0062, r18
    18ee:	20 91 62 00 	lds	r18, 0x0062
    18f2:	27 7f       	andi	r18, 0xF7	; 247
    18f4:	20 93 62 00 	sts	0x0062, r18
    18f8:	e0 e9       	ldi	r30, 0x90	; 144
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	31 97       	sbiw	r30, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_PutDec16+0x48>
		flag = 1;
    1900:	31 e0       	ldi	r19, 0x01	; 1
	}
	digit = 0;
	while (num >= 1000) {
    1902:	43 e0       	ldi	r20, 0x03	; 3
    1904:	88 3e       	cpi	r24, 0xE8	; 232
    1906:	94 07       	cpc	r25, r20
    1908:	08 f4       	brcc	.+2      	; 0x190c <LCD_PutDec16+0x58>
    190a:	89 c0       	rjmp	.+274    	; 0x1a1e <LCD_PutDec16+0x16a>
    190c:	20 e0       	ldi	r18, 0x00	; 0
		digit++;
    190e:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 1000;
    1910:	88 5e       	subi	r24, 0xE8	; 232
    1912:	93 40       	sbci	r25, 0x03	; 3
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
    1914:	43 e0       	ldi	r20, 0x03	; 3
    1916:	88 3e       	cpi	r24, 0xE8	; 232
    1918:	94 07       	cpc	r25, r20
    191a:	c8 f7       	brcc	.-14     	; 0x190e <LCD_PutDec16+0x5a>
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
    191c:	22 23       	and	r18, r18
    191e:	09 f4       	brne	.+2      	; 0x1922 <LCD_PutDec16+0x6e>
    1920:	7e c0       	rjmp	.+252    	; 0x1a1e <LCD_PutDec16+0x16a>
		LCD_DATA(digit + 48);
    1922:	31 e0       	ldi	r19, 0x01	; 1
    1924:	3f b9       	out	0x0f, r19	; 15
    1926:	77 9b       	sbis	0x0e, 7	; 14
    1928:	fe cf       	rjmp	.-4      	; 0x1926 <LCD_PutDec16+0x72>
    192a:	20 5d       	subi	r18, 0xD0	; 208
    192c:	2f b9       	out	0x0f, r18	; 15
    192e:	77 9b       	sbis	0x0e, 7	; 14
    1930:	fe cf       	rjmp	.-4      	; 0x192e <LCD_PutDec16+0x7a>
    1932:	20 91 62 00 	lds	r18, 0x0062
    1936:	28 60       	ori	r18, 0x08	; 8
    1938:	20 93 62 00 	sts	0x0062, r18
    193c:	20 91 62 00 	lds	r18, 0x0062
    1940:	27 7f       	andi	r18, 0xF7	; 247
    1942:	20 93 62 00 	sts	0x0062, r18
    1946:	e0 e9       	ldi	r30, 0x90	; 144
    1948:	f1 e0       	ldi	r31, 0x01	; 1
    194a:	31 97       	sbiw	r30, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCD_PutDec16+0x96>
		flag = 1;
    194e:	31 e0       	ldi	r19, 0x01	; 1
	}
	digit = 0;
	while (num >= 100) {
    1950:	84 36       	cpi	r24, 0x64	; 100
    1952:	91 05       	cpc	r25, r1
    1954:	08 f4       	brcc	.+2      	; 0x1958 <LCD_PutDec16+0xa4>
    1956:	5f c0       	rjmp	.+190    	; 0x1a16 <LCD_PutDec16+0x162>
    1958:	20 e0       	ldi	r18, 0x00	; 0
		digit++;
    195a:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 100;
    195c:	84 56       	subi	r24, 0x64	; 100
    195e:	90 40       	sbci	r25, 0x00	; 0
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
    1960:	84 36       	cpi	r24, 0x64	; 100
    1962:	91 05       	cpc	r25, r1
    1964:	d0 f7       	brcc	.-12     	; 0x195a <LCD_PutDec16+0xa6>
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
    1966:	22 23       	and	r18, r18
    1968:	09 f4       	brne	.+2      	; 0x196c <LCD_PutDec16+0xb8>
    196a:	55 c0       	rjmp	.+170    	; 0x1a16 <LCD_PutDec16+0x162>
		LCD_DATA(digit + 48);
    196c:	31 e0       	ldi	r19, 0x01	; 1
    196e:	3f b9       	out	0x0f, r19	; 15
    1970:	77 9b       	sbis	0x0e, 7	; 14
    1972:	fe cf       	rjmp	.-4      	; 0x1970 <LCD_PutDec16+0xbc>
    1974:	20 5d       	subi	r18, 0xD0	; 208
    1976:	2f b9       	out	0x0f, r18	; 15
    1978:	77 9b       	sbis	0x0e, 7	; 14
    197a:	fe cf       	rjmp	.-4      	; 0x1978 <LCD_PutDec16+0xc4>
    197c:	20 91 62 00 	lds	r18, 0x0062
    1980:	28 60       	ori	r18, 0x08	; 8
    1982:	20 93 62 00 	sts	0x0062, r18
    1986:	20 91 62 00 	lds	r18, 0x0062
    198a:	27 7f       	andi	r18, 0xF7	; 247
    198c:	20 93 62 00 	sts	0x0062, r18
    1990:	e0 e9       	ldi	r30, 0x90	; 144
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_PutDec16+0xe0>
		flag = 1;
    1998:	31 e0       	ldi	r19, 0x01	; 1
	}
	digit = 0;
	while (num >= 10) {
    199a:	8a 30       	cpi	r24, 0x0A	; 10
    199c:	91 05       	cpc	r25, r1
    199e:	b8 f1       	brcs	.+110    	; 0x1a0e <LCD_PutDec16+0x15a>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
		digit++;
    19a2:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 10;
    19a4:	0a 97       	sbiw	r24, 0x0a	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
    19a6:	8a 30       	cpi	r24, 0x0A	; 10
    19a8:	91 05       	cpc	r25, r1
    19aa:	d8 f7       	brcc	.-10     	; 0x19a2 <LCD_PutDec16+0xee>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
    19ac:	22 23       	and	r18, r18
    19ae:	79 f1       	breq	.+94     	; 0x1a0e <LCD_PutDec16+0x15a>
		LCD_DATA(digit + 48);
    19b0:	31 e0       	ldi	r19, 0x01	; 1
    19b2:	3f b9       	out	0x0f, r19	; 15
    19b4:	77 9b       	sbis	0x0e, 7	; 14
    19b6:	fe cf       	rjmp	.-4      	; 0x19b4 <LCD_PutDec16+0x100>
    19b8:	20 5d       	subi	r18, 0xD0	; 208
    19ba:	2f b9       	out	0x0f, r18	; 15
    19bc:	77 9b       	sbis	0x0e, 7	; 14
    19be:	fe cf       	rjmp	.-4      	; 0x19bc <LCD_PutDec16+0x108>
    19c0:	20 91 62 00 	lds	r18, 0x0062
    19c4:	28 60       	ori	r18, 0x08	; 8
    19c6:	20 93 62 00 	sts	0x0062, r18
    19ca:	20 91 62 00 	lds	r18, 0x0062
    19ce:	27 7f       	andi	r18, 0xF7	; 247
    19d0:	20 93 62 00 	sts	0x0062, r18
    19d4:	e0 e9       	ldi	r30, 0x90	; 144
    19d6:	f1 e0       	ldi	r31, 0x01	; 1
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_PutDec16+0x124>
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	49 f1       	breq	.+82     	; 0x1a32 <LCD_PutDec16+0x17e>
    19e0:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	9f b9       	out	0x0f, r25	; 15
    19e6:	77 9b       	sbis	0x0e, 7	; 14
    19e8:	fe cf       	rjmp	.-4      	; 0x19e6 <LCD_PutDec16+0x132>
    19ea:	8f b9       	out	0x0f, r24	; 15
    19ec:	77 9b       	sbis	0x0e, 7	; 14
    19ee:	fe cf       	rjmp	.-4      	; 0x19ec <LCD_PutDec16+0x138>
    19f0:	80 91 62 00 	lds	r24, 0x0062
    19f4:	88 60       	ori	r24, 0x08	; 8
    19f6:	80 93 62 00 	sts	0x0062, r24
    19fa:	80 91 62 00 	lds	r24, 0x0062
    19fe:	87 7f       	andi	r24, 0xF7	; 247
    1a00:	80 93 62 00 	sts	0x0062, r24
    1a04:	80 e9       	ldi	r24, 0x90	; 144
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_PutDec16+0x154>
}
    1a0c:	08 95       	ret
	digit = 0;
	while (num >= 10) {
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
    1a0e:	31 30       	cpi	r19, 0x01	; 1
    1a10:	29 f7       	brne	.-54     	; 0x19dc <LCD_PutDec16+0x128>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	cd cf       	rjmp	.-102    	; 0x19b0 <LCD_PutDec16+0xfc>
	digit = 0;
	while (num >= 100) {
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
    1a16:	31 30       	cpi	r19, 0x01	; 1
    1a18:	51 f0       	breq	.+20     	; 0x1a2e <LCD_PutDec16+0x17a>
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	be cf       	rjmp	.-132    	; 0x199a <LCD_PutDec16+0xe6>
	digit = 0;
	while (num >= 1000) {
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
    1a1e:	31 30       	cpi	r19, 0x01	; 1
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <LCD_PutDec16+0x176>
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	95 cf       	rjmp	.-214    	; 0x1950 <LCD_PutDec16+0x9c>
	Convert a 16 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	6c cf       	rjmp	.-296    	; 0x1902 <LCD_PutDec16+0x4e>
	digit = 0;
	while (num >= 1000) {
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	7a cf       	rjmp	.-268    	; 0x1922 <LCD_PutDec16+0x6e>
	digit = 0;
	while (num >= 100) {
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	9d cf       	rjmp	.-198    	; 0x196c <LCD_PutDec16+0xb8>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
    1a32:	80 e3       	ldi	r24, 0x30	; 48
    1a34:	d6 cf       	rjmp	.-84     	; 0x19e2 <LCD_PutDec16+0x12e>

00001a36 <LCD_PutChar>:
/*
	Send an ASCII character to the LCD
	usage: LCD_PutChar('H');
*/
void LCD_PutChar(char a_char) {
	LCD_DATA(a_char);
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	9f b9       	out	0x0f, r25	; 15
    1a3a:	77 9b       	sbis	0x0e, 7	; 14
    1a3c:	fe cf       	rjmp	.-4      	; 0x1a3a <LCD_PutChar+0x4>
    1a3e:	8f b9       	out	0x0f, r24	; 15
    1a40:	77 9b       	sbis	0x0e, 7	; 14
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <LCD_PutChar+0xa>
    1a44:	80 91 62 00 	lds	r24, 0x0062
    1a48:	88 60       	ori	r24, 0x08	; 8
    1a4a:	80 93 62 00 	sts	0x0062, r24
    1a4e:	80 91 62 00 	lds	r24, 0x0062
    1a52:	87 7f       	andi	r24, 0xF7	; 247
    1a54:	80 93 62 00 	sts	0x0062, r24
    1a58:	80 e9       	ldi	r24, 0x90	; 144
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_PutChar+0x26>
}
    1a60:	08 95       	ret

00001a62 <LCD_PutStr>:
/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	60 e0       	ldi	r22, 0x00	; 0
		LCD_DATA(lcd_str[count]);
    1a68:	71 e0       	ldi	r23, 0x01	; 1
    1a6a:	40 e9       	ldi	r20, 0x90	; 144
    1a6c:	51 e0       	ldi	r21, 0x01	; 1
    1a6e:	7f b9       	out	0x0f, r23	; 15
    1a70:	77 9b       	sbis	0x0e, 7	; 14
    1a72:	fe cf       	rjmp	.-4      	; 0x1a70 <LCD_PutStr+0xe>
    1a74:	28 0f       	add	r18, r24
    1a76:	39 1f       	adc	r19, r25
    1a78:	f9 01       	movw	r30, r18
    1a7a:	20 81       	ld	r18, Z
    1a7c:	2f b9       	out	0x0f, r18	; 15
    1a7e:	77 9b       	sbis	0x0e, 7	; 14
    1a80:	fe cf       	rjmp	.-4      	; 0x1a7e <LCD_PutStr+0x1c>
    1a82:	20 91 62 00 	lds	r18, 0x0062
    1a86:	28 60       	ori	r18, 0x08	; 8
    1a88:	20 93 62 00 	sts	0x0062, r18
    1a8c:	20 91 62 00 	lds	r18, 0x0062
    1a90:	27 7f       	andi	r18, 0xF7	; 247
    1a92:	20 93 62 00 	sts	0x0062, r18
    1a96:	fa 01       	movw	r30, r20
    1a98:	31 97       	sbiw	r30, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_PutStr+0x36>
/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
    1a9c:	6f 5f       	subi	r22, 0xFF	; 255
    1a9e:	26 2f       	mov	r18, r22
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	01 90       	ld	r0, Z+
    1aa6:	00 20       	and	r0, r0
    1aa8:	e9 f7       	brne	.-6      	; 0x1aa4 <LCD_PutStr+0x42>
    1aaa:	e8 1b       	sub	r30, r24
    1aac:	f9 0b       	sbc	r31, r25
    1aae:	32 97       	sbiw	r30, 0x02	; 2
    1ab0:	e2 17       	cp	r30, r18
    1ab2:	f3 07       	cpc	r31, r19
    1ab4:	e0 f6       	brcc	.-72     	; 0x1a6e <LCD_PutStr+0xc>
		LCD_DATA(lcd_str[count]);
	}
}
    1ab6:	08 95       	ret

00001ab8 <LCD_SPIInit>:

void LCD_SPIInit(void) {
	DDRF |= 0x08;  //port F bit 3 is enable for LCD
    1ab8:	e1 e6       	ldi	r30, 0x61	; 97
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 60       	ori	r24, 0x08	; 8
    1ac0:	80 83       	st	Z, r24
	PORTB |= 0x00; //port B initialization for SPI
    1ac2:	88 b3       	in	r24, 0x18	; 24
    1ac4:	88 bb       	out	0x18, r24	; 24
	DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
    1ac6:	87 b3       	in	r24, 0x17	; 23
    1ac8:	87 60       	ori	r24, 0x07	; 7
    1aca:	87 bb       	out	0x17, r24	; 23
	//Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
	SPCR = 0x50;
    1acc:	80 e5       	ldi	r24, 0x50	; 80
    1ace:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x01;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8e b9       	out	0x0e, r24	; 14
}
    1ad4:	08 95       	ret

00001ad6 <LCD_Init>:
	*/
	
	// Set the SPI settings
//	LCD_SPIInit();

	DDRF |= 0x08;  // port F bit 3 is the enable strobe for the LCD
    1ad6:	80 91 61 00 	lds	r24, 0x0061
    1ada:	88 60       	ori	r24, 0x08	; 8
    1adc:	80 93 61 00 	sts	0x0061, r24
    1ae0:	80 e6       	ldi	r24, 0x60	; 96
    1ae2:	9a ee       	ldi	r25, 0xEA	; 234
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_Init+0xe>
	_delay_ms(15);

	// request 8 bit interface mode
	LCD_CMD(0x38);
    1ae8:	1f b8       	out	0x0f, r1	; 15
    1aea:	77 9b       	sbis	0x0e, 7	; 14
    1aec:	fe cf       	rjmp	.-4      	; 0x1aea <LCD_Init+0x14>
    1aee:	88 e3       	ldi	r24, 0x38	; 56
    1af0:	8f b9       	out	0x0f, r24	; 15
    1af2:	77 9b       	sbis	0x0e, 7	; 14
    1af4:	fe cf       	rjmp	.-4      	; 0x1af2 <LCD_Init+0x1c>
    1af6:	80 91 62 00 	lds	r24, 0x0062
    1afa:	88 60       	ori	r24, 0x08	; 8
    1afc:	80 93 62 00 	sts	0x0062, r24
    1b00:	80 91 62 00 	lds	r24, 0x0062
    1b04:	87 7f       	andi	r24, 0xF7	; 247
    1b06:	80 93 62 00 	sts	0x0062, r24
    1b0a:	80 e9       	ldi	r24, 0x90	; 144
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_Init+0x38>
    1b12:	80 e2       	ldi	r24, 0x20	; 32
    1b14:	9e e4       	ldi	r25, 0x4E	; 78
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_Init+0x40>
	_delay_ms(5);

	// display off
	LCD_CMD(0x08);
    1b1a:	1f b8       	out	0x0f, r1	; 15
    1b1c:	77 9b       	sbis	0x0e, 7	; 14
    1b1e:	fe cf       	rjmp	.-4      	; 0x1b1c <LCD_Init+0x46>
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	8f b9       	out	0x0f, r24	; 15
    1b24:	77 9b       	sbis	0x0e, 7	; 14
    1b26:	fe cf       	rjmp	.-4      	; 0x1b24 <LCD_Init+0x4e>
    1b28:	80 91 62 00 	lds	r24, 0x0062
    1b2c:	88 60       	ori	r24, 0x08	; 8
    1b2e:	80 93 62 00 	sts	0x0062, r24
    1b32:	80 91 62 00 	lds	r24, 0x0062
    1b36:	87 7f       	andi	r24, 0xF7	; 247
    1b38:	80 93 62 00 	sts	0x0062, r24
    1b3c:	80 e9       	ldi	r24, 0x90	; 144
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_Init+0x6a>
    1b44:	80 e4       	ldi	r24, 0x40	; 64
    1b46:	9f e1       	ldi	r25, 0x1F	; 31
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_Init+0x72>
	_delay_ms(2);

	// choose entry mode so that the cursor is incremented
	LCD_CMD(0x06);
    1b4c:	1f b8       	out	0x0f, r1	; 15
    1b4e:	77 9b       	sbis	0x0e, 7	; 14
    1b50:	fe cf       	rjmp	.-4      	; 0x1b4e <LCD_Init+0x78>
    1b52:	86 e0       	ldi	r24, 0x06	; 6
    1b54:	8f b9       	out	0x0f, r24	; 15
    1b56:	77 9b       	sbis	0x0e, 7	; 14
    1b58:	fe cf       	rjmp	.-4      	; 0x1b56 <LCD_Init+0x80>
    1b5a:	80 91 62 00 	lds	r24, 0x0062
    1b5e:	88 60       	ori	r24, 0x08	; 8
    1b60:	80 93 62 00 	sts	0x0062, r24
    1b64:	80 91 62 00 	lds	r24, 0x0062
    1b68:	87 7f       	andi	r24, 0xF7	; 247
    1b6a:	80 93 62 00 	sts	0x0062, r24
    1b6e:	80 e9       	ldi	r24, 0x90	; 144
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_Init+0x9c>
		Each digit on the display uses a 5x8 matrix
		In order to customize the icon, you specify 5 bits
		for each of the 8 rows.
	*/
	// Create a custom battery logo in slot 0
	LCD_CMD(0x40); // <-- address of custom slot 0
    1b76:	1f b8       	out	0x0f, r1	; 15
    1b78:	77 9b       	sbis	0x0e, 7	; 14
    1b7a:	fe cf       	rjmp	.-4      	; 0x1b78 <LCD_Init+0xa2>
    1b7c:	80 e4       	ldi	r24, 0x40	; 64
    1b7e:	8f b9       	out	0x0f, r24	; 15
    1b80:	77 9b       	sbis	0x0e, 7	; 14
    1b82:	fe cf       	rjmp	.-4      	; 0x1b80 <LCD_Init+0xaa>
    1b84:	80 91 62 00 	lds	r24, 0x0062
    1b88:	88 60       	ori	r24, 0x08	; 8
    1b8a:	80 93 62 00 	sts	0x0062, r24
    1b8e:	80 91 62 00 	lds	r24, 0x0062
    1b92:	87 7f       	andi	r24, 0xF7	; 247
    1b94:	80 93 62 00 	sts	0x0062, r24
    1b98:	80 e9       	ldi	r24, 0x90	; 144
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_Init+0xc6>
	LCD_DATA(0x0E); // <-- top 5 pixels of icon
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	8f b9       	out	0x0f, r24	; 15
    1ba4:	77 9b       	sbis	0x0e, 7	; 14
    1ba6:	fe cf       	rjmp	.-4      	; 0x1ba4 <LCD_Init+0xce>
    1ba8:	8e e0       	ldi	r24, 0x0E	; 14
    1baa:	8f b9       	out	0x0f, r24	; 15
    1bac:	77 9b       	sbis	0x0e, 7	; 14
    1bae:	fe cf       	rjmp	.-4      	; 0x1bac <LCD_Init+0xd6>
    1bb0:	80 91 62 00 	lds	r24, 0x0062
    1bb4:	88 60       	ori	r24, 0x08	; 8
    1bb6:	80 93 62 00 	sts	0x0062, r24
    1bba:	80 91 62 00 	lds	r24, 0x0062
    1bbe:	87 7f       	andi	r24, 0xF7	; 247
    1bc0:	80 93 62 00 	sts	0x0062, r24
    1bc4:	80 e9       	ldi	r24, 0x90	; 144
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_Init+0xf2>
	LCD_DATA(0x1B); // <-- next 5 pixels of icon
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	8f b9       	out	0x0f, r24	; 15
    1bd0:	77 9b       	sbis	0x0e, 7	; 14
    1bd2:	fe cf       	rjmp	.-4      	; 0x1bd0 <LCD_Init+0xfa>
    1bd4:	8b e1       	ldi	r24, 0x1B	; 27
    1bd6:	8f b9       	out	0x0f, r24	; 15
    1bd8:	77 9b       	sbis	0x0e, 7	; 14
    1bda:	fe cf       	rjmp	.-4      	; 0x1bd8 <LCD_Init+0x102>
    1bdc:	80 91 62 00 	lds	r24, 0x0062
    1be0:	88 60       	ori	r24, 0x08	; 8
    1be2:	80 93 62 00 	sts	0x0062, r24
    1be6:	80 91 62 00 	lds	r24, 0x0062
    1bea:	87 7f       	andi	r24, 0xF7	; 247
    1bec:	80 93 62 00 	sts	0x0062, r24
    1bf0:	80 e9       	ldi	r24, 0x90	; 144
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_Init+0x11e>
	LCD_DATA(0x11);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	8f b9       	out	0x0f, r24	; 15
    1bfc:	77 9b       	sbis	0x0e, 7	; 14
    1bfe:	fe cf       	rjmp	.-4      	; 0x1bfc <LCD_Init+0x126>
    1c00:	81 e1       	ldi	r24, 0x11	; 17
    1c02:	8f b9       	out	0x0f, r24	; 15
    1c04:	77 9b       	sbis	0x0e, 7	; 14
    1c06:	fe cf       	rjmp	.-4      	; 0x1c04 <LCD_Init+0x12e>
    1c08:	80 91 62 00 	lds	r24, 0x0062
    1c0c:	88 60       	ori	r24, 0x08	; 8
    1c0e:	80 93 62 00 	sts	0x0062, r24
    1c12:	80 91 62 00 	lds	r24, 0x0062
    1c16:	87 7f       	andi	r24, 0xF7	; 247
    1c18:	80 93 62 00 	sts	0x0062, r24
    1c1c:	80 e9       	ldi	r24, 0x90	; 144
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_Init+0x14a>
	LCD_DATA(0x11);
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	8f b9       	out	0x0f, r24	; 15
    1c28:	77 9b       	sbis	0x0e, 7	; 14
    1c2a:	fe cf       	rjmp	.-4      	; 0x1c28 <LCD_Init+0x152>
    1c2c:	81 e1       	ldi	r24, 0x11	; 17
    1c2e:	8f b9       	out	0x0f, r24	; 15
    1c30:	77 9b       	sbis	0x0e, 7	; 14
    1c32:	fe cf       	rjmp	.-4      	; 0x1c30 <LCD_Init+0x15a>
    1c34:	80 91 62 00 	lds	r24, 0x0062
    1c38:	88 60       	ori	r24, 0x08	; 8
    1c3a:	80 93 62 00 	sts	0x0062, r24
    1c3e:	80 91 62 00 	lds	r24, 0x0062
    1c42:	87 7f       	andi	r24, 0xF7	; 247
    1c44:	80 93 62 00 	sts	0x0062, r24
    1c48:	80 e9       	ldi	r24, 0x90	; 144
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_Init+0x176>
	LCD_DATA(0x11);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	8f b9       	out	0x0f, r24	; 15
    1c54:	77 9b       	sbis	0x0e, 7	; 14
    1c56:	fe cf       	rjmp	.-4      	; 0x1c54 <LCD_Init+0x17e>
    1c58:	81 e1       	ldi	r24, 0x11	; 17
    1c5a:	8f b9       	out	0x0f, r24	; 15
    1c5c:	77 9b       	sbis	0x0e, 7	; 14
    1c5e:	fe cf       	rjmp	.-4      	; 0x1c5c <LCD_Init+0x186>
    1c60:	80 91 62 00 	lds	r24, 0x0062
    1c64:	88 60       	ori	r24, 0x08	; 8
    1c66:	80 93 62 00 	sts	0x0062, r24
    1c6a:	80 91 62 00 	lds	r24, 0x0062
    1c6e:	87 7f       	andi	r24, 0xF7	; 247
    1c70:	80 93 62 00 	sts	0x0062, r24
    1c74:	80 e9       	ldi	r24, 0x90	; 144
    1c76:	91 e0       	ldi	r25, 0x01	; 1
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_Init+0x1a2>
	LCD_DATA(0x11);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	8f b9       	out	0x0f, r24	; 15
    1c80:	77 9b       	sbis	0x0e, 7	; 14
    1c82:	fe cf       	rjmp	.-4      	; 0x1c80 <LCD_Init+0x1aa>
    1c84:	81 e1       	ldi	r24, 0x11	; 17
    1c86:	8f b9       	out	0x0f, r24	; 15
    1c88:	77 9b       	sbis	0x0e, 7	; 14
    1c8a:	fe cf       	rjmp	.-4      	; 0x1c88 <LCD_Init+0x1b2>
    1c8c:	80 91 62 00 	lds	r24, 0x0062
    1c90:	88 60       	ori	r24, 0x08	; 8
    1c92:	80 93 62 00 	sts	0x0062, r24
    1c96:	80 91 62 00 	lds	r24, 0x0062
    1c9a:	87 7f       	andi	r24, 0xF7	; 247
    1c9c:	80 93 62 00 	sts	0x0062, r24
    1ca0:	80 e9       	ldi	r24, 0x90	; 144
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_Init+0x1ce>
	LCD_DATA(0x11);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	8f b9       	out	0x0f, r24	; 15
    1cac:	77 9b       	sbis	0x0e, 7	; 14
    1cae:	fe cf       	rjmp	.-4      	; 0x1cac <LCD_Init+0x1d6>
    1cb0:	81 e1       	ldi	r24, 0x11	; 17
    1cb2:	8f b9       	out	0x0f, r24	; 15
    1cb4:	77 9b       	sbis	0x0e, 7	; 14
    1cb6:	fe cf       	rjmp	.-4      	; 0x1cb4 <LCD_Init+0x1de>
    1cb8:	80 91 62 00 	lds	r24, 0x0062
    1cbc:	88 60       	ori	r24, 0x08	; 8
    1cbe:	80 93 62 00 	sts	0x0062, r24
    1cc2:	80 91 62 00 	lds	r24, 0x0062
    1cc6:	87 7f       	andi	r24, 0xF7	; 247
    1cc8:	80 93 62 00 	sts	0x0062, r24
    1ccc:	80 e9       	ldi	r24, 0x90	; 144
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_Init+0x1fa>
	LCD_DATA(0x1F); // <-- bottom 5 pixels of icon
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8f b9       	out	0x0f, r24	; 15
    1cd8:	77 9b       	sbis	0x0e, 7	; 14
    1cda:	fe cf       	rjmp	.-4      	; 0x1cd8 <LCD_Init+0x202>
    1cdc:	8f e1       	ldi	r24, 0x1F	; 31
    1cde:	8f b9       	out	0x0f, r24	; 15
    1ce0:	77 9b       	sbis	0x0e, 7	; 14
    1ce2:	fe cf       	rjmp	.-4      	; 0x1ce0 <LCD_Init+0x20a>
    1ce4:	80 91 62 00 	lds	r24, 0x0062
    1ce8:	88 60       	ori	r24, 0x08	; 8
    1cea:	80 93 62 00 	sts	0x0062, r24
    1cee:	80 91 62 00 	lds	r24, 0x0062
    1cf2:	87 7f       	andi	r24, 0xF7	; 247
    1cf4:	80 93 62 00 	sts	0x0062, r24
    1cf8:	80 e9       	ldi	r24, 0x90	; 144
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_Init+0x226>
	
	/*
		Clear the screen and enable the LCD
	*/	
	// clear display
	LCD_CMD(0x01);
    1d00:	1f b8       	out	0x0f, r1	; 15
    1d02:	77 9b       	sbis	0x0e, 7	; 14
    1d04:	fe cf       	rjmp	.-4      	; 0x1d02 <LCD_Init+0x22c>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	8f b9       	out	0x0f, r24	; 15
    1d0a:	77 9b       	sbis	0x0e, 7	; 14
    1d0c:	fe cf       	rjmp	.-4      	; 0x1d0a <LCD_Init+0x234>
    1d0e:	80 91 62 00 	lds	r24, 0x0062
    1d12:	88 60       	ori	r24, 0x08	; 8
    1d14:	80 93 62 00 	sts	0x0062, r24
    1d18:	80 91 62 00 	lds	r24, 0x0062
    1d1c:	87 7f       	andi	r24, 0xF7	; 247
    1d1e:	80 93 62 00 	sts	0x0062, r24
    1d22:	80 e9       	ldi	r24, 0x90	; 144
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_Init+0x250>
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	9e e4       	ldi	r25, 0x4E	; 78
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_Init+0x258>
	_delay_ms(5);
	
	// display on
	LCD_CMD(0x0C);
    1d32:	1f b8       	out	0x0f, r1	; 15
    1d34:	77 9b       	sbis	0x0e, 7	; 14
    1d36:	fe cf       	rjmp	.-4      	; 0x1d34 <LCD_Init+0x25e>
    1d38:	8c e0       	ldi	r24, 0x0C	; 12
    1d3a:	8f b9       	out	0x0f, r24	; 15
    1d3c:	77 9b       	sbis	0x0e, 7	; 14
    1d3e:	fe cf       	rjmp	.-4      	; 0x1d3c <LCD_Init+0x266>
    1d40:	80 91 62 00 	lds	r24, 0x0062
    1d44:	88 60       	ori	r24, 0x08	; 8
    1d46:	80 93 62 00 	sts	0x0062, r24
    1d4a:	80 91 62 00 	lds	r24, 0x0062
    1d4e:	87 7f       	andi	r24, 0xF7	; 247
    1d50:	80 93 62 00 	sts	0x0062, r24
    1d54:	80 e9       	ldi	r24, 0x90	; 144
    1d56:	91 e0       	ldi	r25, 0x01	; 1
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_Init+0x282>
}
    1d5c:	08 95       	ret

00001d5e <lm73_set_max_resolution>:
uint8_t lm73_rd_buf[2];

//******************************************************************************
void lm73_set_max_resolution(void){
   //FIXME
   lm73_wr_buf[0] = LM73_PTR_CTRL_STATUS;
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	80 93 7c 01 	sts	0x017C, r24
   //lm73_wr_buf[0] = LM73_PTR_TEMP;   
   lm73_wr_buf[1] = (1<<RES1 | 1<<RES0);
    1d64:	80 e6       	ldi	r24, 0x60	; 96
    1d66:	80 93 7d 01 	sts	0x017D, r24
   twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);
    1d6a:	80 e9       	ldi	r24, 0x90	; 144
    1d6c:	6c e7       	ldi	r22, 0x7C	; 124
    1d6e:	71 e0       	ldi	r23, 0x01	; 1
    1d70:	42 e0       	ldi	r20, 0x02	; 2
    1d72:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <twi_start_wr>
   //twi_start_wr(LM73_ADDRESS, lm73_wr_buf[1], 1);

   return ;
}
    1d76:	08 95       	ret

00001d78 <lm73_set_ptr_to_read>:
//******************************************************************************
void lm73_set_ptr_to_read(void){
   //set LM73 mode for reading temperature by loading pointer register
   //this is done outside of the normal interrupt mode of operation 
   //load lm73_wr_buf[0] with temperature pointer address
   lm73_wr_buf[0] = LM73_PTR_TEMP;   
    1d78:	10 92 7c 01 	sts	0x017C, r1
   //start the TWI write process (twi_start_wr())
   twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1);
    1d7c:	80 e9       	ldi	r24, 0x90	; 144
    1d7e:	6c e7       	ldi	r22, 0x7C	; 124
    1d80:	71 e0       	ldi	r23, 0x01	; 1
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <twi_start_wr>

   return;
}
    1d88:	08 95       	ret

00001d8a <lm73_temp_convert>:
   //the buffer pointed to by the arguement.
   //TODO:Returns what???(uint8_t)??? Probably a BUG?

   //Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    1d8a:	08 95       	ret

00001d8c <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1d8c:	1f 92       	push	r1
    1d8e:	0f 92       	push	r0
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	0f 92       	push	r0
    1d94:	0b b6       	in	r0, 0x3b	; 59
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	2f 93       	push	r18
    1d9c:	3f 93       	push	r19
    1d9e:	8f 93       	push	r24
    1da0:	9f 93       	push	r25
    1da2:	ef 93       	push	r30
    1da4:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1da6:	80 91 71 00 	lds	r24, 0x0071
    1daa:	88 32       	cpi	r24, 0x28	; 40
    1dac:	e1 f1       	breq	.+120    	; 0x1e26 <__vector_33+0x9a>
    1dae:	89 32       	cpi	r24, 0x29	; 41
    1db0:	c8 f0       	brcs	.+50     	; 0x1de4 <__vector_33+0x58>
    1db2:	80 34       	cpi	r24, 0x40	; 64
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <__vector_33+0x2c>
    1db6:	4d c0       	rjmp	.+154    	; 0x1e52 <__vector_33+0xc6>
    1db8:	81 34       	cpi	r24, 0x41	; 65
    1dba:	78 f1       	brcs	.+94     	; 0x1e1a <__vector_33+0x8e>
    1dbc:	80 35       	cpi	r24, 0x50	; 80
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <__vector_33+0x36>
    1dc0:	60 c0       	rjmp	.+192    	; 0x1e82 <__vector_33+0xf6>
    1dc2:	88 35       	cpi	r24, 0x58	; 88
    1dc4:	b1 f4       	brne	.+44     	; 0x1df2 <__vector_33+0x66>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1dc6:	80 91 7b 01 	lds	r24, 0x017B
    1dca:	e0 91 ac 01 	lds	r30, 0x01AC
    1dce:	f0 91 ad 01 	lds	r31, 0x01AD
    1dd2:	e8 0f       	add	r30, r24
    1dd4:	f1 1d       	adc	r31, r1
    1dd6:	80 91 73 00 	lds	r24, 0x0073
    1dda:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    1ddc:	84 e9       	ldi	r24, 0x94	; 148
    1dde:	80 93 74 00 	sts	0x0074, r24
      break;      
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <__vector_33+0x74>
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1de4:	80 31       	cpi	r24, 0x10	; 16
    1de6:	09 f4       	brne	.+2      	; 0x1dea <__vector_33+0x5e>
    1de8:	42 c0       	rjmp	.+132    	; 0x1e6e <__vector_33+0xe2>
    1dea:	88 31       	cpi	r24, 0x18	; 24
    1dec:	e1 f0       	breq	.+56     	; 0x1e26 <__vector_33+0x9a>
    1dee:	88 30       	cpi	r24, 0x08	; 8
    1df0:	f1 f1       	breq	.+124    	; 0x1e6e <__vector_33+0xe2>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1df2:	80 91 71 00 	lds	r24, 0x0071
    1df6:	80 93 ab 01 	sts	0x01AB, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
    1dfc:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	3f 91       	pop	r19
    1e0a:	2f 91       	pop	r18
    1e0c:	0f 90       	pop	r0
    1e0e:	0b be       	out	0x3b, r0	; 59
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1e1a:	88 33       	cpi	r24, 0x38	; 56
    1e1c:	51 f7       	brne	.-44     	; 0x1df2 <__vector_33+0x66>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1e1e:	85 ea       	ldi	r24, 0xA5	; 165
    1e20:	80 93 74 00 	sts	0x0074, r24
      break;
    1e24:	ed cf       	rjmp	.-38     	; 0x1e00 <__vector_33+0x74>
      twi_buf_ptr = 0;      //initalize buffer pointer 
      TWCR = TWCR_SEND;     //send SLA+RW
      break;
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1e26:	80 91 7b 01 	lds	r24, 0x017B
    1e2a:	90 91 af 01 	lds	r25, 0x01AF
    1e2e:	89 17       	cp	r24, r25
    1e30:	a8 f6       	brcc	.-86     	; 0x1ddc <__vector_33+0x50>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1e32:	e0 91 ac 01 	lds	r30, 0x01AC
    1e36:	f0 91 ad 01 	lds	r31, 0x01AD
    1e3a:	e8 0f       	add	r30, r24
    1e3c:	f1 1d       	adc	r31, r1
    1e3e:	90 81       	ld	r25, Z
    1e40:	90 93 73 00 	sts	0x0073, r25
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	80 93 7b 01 	sts	0x017B, r24
        TWCR = TWCR_SEND;               //send next byte 
    1e4a:	85 e8       	ldi	r24, 0x85	; 133
    1e4c:	80 93 74 00 	sts	0x0074, r24
    1e50:	d7 cf       	rjmp	.-82     	; 0x1e00 <__vector_33+0x74>
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1e52:	20 91 7b 01 	lds	r18, 0x017B
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1e56:	80 91 af 01 	lds	r24, 0x01AF
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	28 17       	cp	r18, r24
    1e62:	39 07       	cpc	r19, r25
    1e64:	24 f5       	brge	.+72     	; 0x1eae <__vector_33+0x122>
    1e66:	85 ec       	ldi	r24, 0xC5	; 197
    1e68:	80 93 74 00 	sts	0x0074, r24
    1e6c:	c9 cf       	rjmp	.-110    	; 0x1e00 <__vector_33+0x74>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1e6e:	80 91 ae 01 	lds	r24, 0x01AE
    1e72:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1e76:	10 92 7b 01 	sts	0x017B, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1e7a:	85 e8       	ldi	r24, 0x85	; 133
    1e7c:	80 93 74 00 	sts	0x0074, r24
      break;
    1e80:	bf cf       	rjmp	.-130    	; 0x1e00 <__vector_33+0x74>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1e82:	20 91 7b 01 	lds	r18, 0x017B
    1e86:	e0 91 ac 01 	lds	r30, 0x01AC
    1e8a:	f0 91 ad 01 	lds	r31, 0x01AD
    1e8e:	e2 0f       	add	r30, r18
    1e90:	f1 1d       	adc	r31, r1
    1e92:	80 91 73 00 	lds	r24, 0x0073
    1e96:	80 83       	st	Z, r24
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	20 93 7b 01 	sts	0x017B, r18
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1e9e:	80 91 af 01 	lds	r24, 0x01AF
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	28 17       	cp	r18, r24
    1eaa:	39 07       	cpc	r19, r25
    1eac:	e4 f2       	brlt	.-72     	; 0x1e66 <__vector_33+0xda>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1eae:	85 e8       	ldi	r24, 0x85	; 133
    1eb0:	80 93 74 00 	sts	0x0074, r24
    1eb4:	a5 cf       	rjmp	.-182    	; 0x1e00 <__vector_33+0x74>

00001eb6 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1eb6:	80 91 74 00 	lds	r24, 0x0074
}
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	08 95       	ret

00001ebe <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1ebe:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1ec2:	90 fd       	sbrc	r25, 0
    1ec4:	fc cf       	rjmp	.-8      	; 0x1ebe <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1ec6:	8e 7f       	andi	r24, 0xFE	; 254
    1ec8:	80 93 ae 01 	sts	0x01AE, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    1ecc:	70 93 ad 01 	sts	0x01AD, r23
    1ed0:	60 93 ac 01 	sts	0x01AC, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    1ed4:	40 93 af 01 	sts	0x01AF, r20
  TWCR = TWCR_START;                    //initiate START
    1ed8:	85 ea       	ldi	r24, 0xA5	; 165
    1eda:	80 93 74 00 	sts	0x0074, r24
}
    1ede:	08 95       	ret

00001ee0 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1ee0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1ee4:	90 fd       	sbrc	r25, 0
    1ee6:	fc cf       	rjmp	.-8      	; 0x1ee0 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1ee8:	81 60       	ori	r24, 0x01	; 1
    1eea:	80 93 ae 01 	sts	0x01AE, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    1eee:	70 93 ad 01 	sts	0x01AD, r23
    1ef2:	60 93 ac 01 	sts	0x01AC, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    1ef6:	40 93 af 01 	sts	0x01AF, r20
  TWCR = TWCR_START;                   //initiate START
    1efa:	85 ea       	ldi	r24, 0xA5	; 165
    1efc:	80 93 74 00 	sts	0x0074, r24
}
    1f00:	08 95       	ret

00001f02 <init_twi>:
//10K pullups are present on the board
//For the alarm clock, an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    1f08:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1f0c:	8c e0       	ldi	r24, 0x0C	; 12
    1f0e:	80 93 70 00 	sts	0x0070, r24
}
    1f12:	08 95       	ret

00001f14 <USART0_init>:
#include <avr/io.h>

void USART0_init(uint16_t baud)
{
	// Set baud rate
	UBRR0H = baud>>8;
    1f14:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = baud;
    1f18:	89 b9       	out	0x09, r24	; 9
	
	// Enable transmit and receive
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1f1a:	88 e1       	ldi	r24, 0x18	; 24
    1f1c:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1f1e:	86 e0       	ldi	r24, 0x06	; 6
    1f20:	80 93 95 00 	sts	0x0095, r24
}
    1f24:	08 95       	ret

00001f26 <USART_transmit>:

void USART_transmit(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
    1f26:	5d 9b       	sbis	0x0b, 5	; 11
    1f28:	fe cf       	rjmp	.-4      	; 0x1f26 <USART_transmit>
	
	UDR0 = data;
    1f2a:	8c b9       	out	0x0c, r24	; 12
}
    1f2c:	08 95       	ret

00001f2e <USART_available>:

unsigned char USART_available()
{
	return (UCSR0A & (1 << RXC0));
    1f2e:	8b b1       	in	r24, 0x0b	; 11
}
    1f30:	80 78       	andi	r24, 0x80	; 128
    1f32:	08 95       	ret

00001f34 <USART_receive>:

unsigned char USART_receive()
{
	while (!USART_available());
    1f34:	5f 9b       	sbis	0x0b, 7	; 11
    1f36:	fe cf       	rjmp	.-4      	; 0x1f34 <USART_receive>
	
	return UDR0;
    1f38:	8c b1       	in	r24, 0x0c	; 12
}
    1f3a:	08 95       	ret

00001f3c <USART_send_string>:

void USART_send_string(const char* str)
{
    1f3c:	fc 01       	movw	r30, r24
	while (*str){
    1f3e:	80 81       	ld	r24, Z
    1f40:	88 23       	and	r24, r24
    1f42:	39 f0       	breq	.+14     	; 0x1f52 <USART_send_string+0x16>
	while (!USART_available());
	
	return UDR0;
}

void USART_send_string(const char* str)
    1f44:	31 96       	adiw	r30, 0x01	; 1
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void USART_transmit(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
    1f46:	5d 9b       	sbis	0x0b, 5	; 11
    1f48:	fe cf       	rjmp	.-4      	; 0x1f46 <USART_send_string+0xa>
	
	UDR0 = data;
    1f4a:	8c b9       	out	0x0c, r24	; 12
	return UDR0;
}

void USART_send_string(const char* str)
{
	while (*str){
    1f4c:	81 91       	ld	r24, Z+
    1f4e:	88 23       	and	r24, r24
    1f50:	d1 f7       	brne	.-12     	; 0x1f46 <USART_send_string+0xa>
    1f52:	08 95       	ret

00001f54 <__udivmodqi4>:
    1f54:	99 1b       	sub	r25, r25
    1f56:	79 e0       	ldi	r23, 0x09	; 9
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <__udivmodqi4_ep>

00001f5a <__udivmodqi4_loop>:
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	96 17       	cp	r25, r22
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <__udivmodqi4_ep>
    1f60:	96 1b       	sub	r25, r22

00001f62 <__udivmodqi4_ep>:
    1f62:	88 1f       	adc	r24, r24
    1f64:	7a 95       	dec	r23
    1f66:	c9 f7       	brne	.-14     	; 0x1f5a <__udivmodqi4_loop>
    1f68:	80 95       	com	r24
    1f6a:	08 95       	ret

00001f6c <__udivmodhi4>:
    1f6c:	aa 1b       	sub	r26, r26
    1f6e:	bb 1b       	sub	r27, r27
    1f70:	51 e1       	ldi	r21, 0x11	; 17
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <__udivmodhi4_ep>

00001f74 <__udivmodhi4_loop>:
    1f74:	aa 1f       	adc	r26, r26
    1f76:	bb 1f       	adc	r27, r27
    1f78:	a6 17       	cp	r26, r22
    1f7a:	b7 07       	cpc	r27, r23
    1f7c:	10 f0       	brcs	.+4      	; 0x1f82 <__udivmodhi4_ep>
    1f7e:	a6 1b       	sub	r26, r22
    1f80:	b7 0b       	sbc	r27, r23

00001f82 <__udivmodhi4_ep>:
    1f82:	88 1f       	adc	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	5a 95       	dec	r21
    1f88:	a9 f7       	brne	.-22     	; 0x1f74 <__udivmodhi4_loop>
    1f8a:	80 95       	com	r24
    1f8c:	90 95       	com	r25
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	08 95       	ret

00001f94 <__divmodhi4>:
    1f94:	97 fb       	bst	r25, 7
    1f96:	09 2e       	mov	r0, r25
    1f98:	07 26       	eor	r0, r23
    1f9a:	0a d0       	rcall	.+20     	; 0x1fb0 <__divmodhi4_neg1>
    1f9c:	77 fd       	sbrc	r23, 7
    1f9e:	04 d0       	rcall	.+8      	; 0x1fa8 <__divmodhi4_neg2>
    1fa0:	e5 df       	rcall	.-54     	; 0x1f6c <__udivmodhi4>
    1fa2:	06 d0       	rcall	.+12     	; 0x1fb0 <__divmodhi4_neg1>
    1fa4:	00 20       	and	r0, r0
    1fa6:	1a f4       	brpl	.+6      	; 0x1fae <__divmodhi4_exit>

00001fa8 <__divmodhi4_neg2>:
    1fa8:	70 95       	com	r23
    1faa:	61 95       	neg	r22
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255

00001fae <__divmodhi4_exit>:
    1fae:	08 95       	ret

00001fb0 <__divmodhi4_neg1>:
    1fb0:	f6 f7       	brtc	.-4      	; 0x1fae <__divmodhi4_exit>
    1fb2:	90 95       	com	r25
    1fb4:	81 95       	neg	r24
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	08 95       	ret

00001fba <do_rand>:
    1fba:	af 92       	push	r10
    1fbc:	bf 92       	push	r11
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	68 81       	ld	r22, Y
    1fd2:	79 81       	ldd	r23, Y+1	; 0x01
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	61 15       	cp	r22, r1
    1fda:	71 05       	cpc	r23, r1
    1fdc:	81 05       	cpc	r24, r1
    1fde:	91 05       	cpc	r25, r1
    1fe0:	21 f4       	brne	.+8      	; 0x1fea <do_rand+0x30>
    1fe2:	64 e2       	ldi	r22, 0x24	; 36
    1fe4:	79 ed       	ldi	r23, 0xD9	; 217
    1fe6:	8b e5       	ldi	r24, 0x5B	; 91
    1fe8:	97 e0       	ldi	r25, 0x07	; 7
    1fea:	2d e1       	ldi	r18, 0x1D	; 29
    1fec:	33 ef       	ldi	r19, 0xF3	; 243
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	0e 94 48 13 	call	0x2690	; 0x2690 <__divmodsi4>
    1ff6:	79 01       	movw	r14, r18
    1ff8:	8a 01       	movw	r16, r20
    1ffa:	27 ea       	ldi	r18, 0xA7	; 167
    1ffc:	31 e4       	ldi	r19, 0x41	; 65
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulsi3>
    2006:	5b 01       	movw	r10, r22
    2008:	6c 01       	movw	r12, r24
    200a:	c8 01       	movw	r24, r16
    200c:	b7 01       	movw	r22, r14
    200e:	2c ee       	ldi	r18, 0xEC	; 236
    2010:	34 ef       	ldi	r19, 0xF4	; 244
    2012:	4f ef       	ldi	r20, 0xFF	; 255
    2014:	5f ef       	ldi	r21, 0xFF	; 255
    2016:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulsi3>
    201a:	6a 0d       	add	r22, r10
    201c:	7b 1d       	adc	r23, r11
    201e:	8c 1d       	adc	r24, r12
    2020:	9d 1d       	adc	r25, r13
    2022:	97 ff       	sbrs	r25, 7
    2024:	04 c0       	rjmp	.+8      	; 0x202e <do_rand+0x74>
    2026:	61 50       	subi	r22, 0x01	; 1
    2028:	70 40       	sbci	r23, 0x00	; 0
    202a:	80 40       	sbci	r24, 0x00	; 0
    202c:	90 48       	sbci	r25, 0x80	; 128
    202e:	68 83       	st	Y, r22
    2030:	79 83       	std	Y+1, r23	; 0x01
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	9b 83       	std	Y+3, r25	; 0x03
    2036:	7f 77       	andi	r23, 0x7F	; 127
    2038:	cb 01       	movw	r24, r22
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	cf 90       	pop	r12
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	08 95       	ret

00002050 <rand_r>:
    2050:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <do_rand>
    2054:	08 95       	ret

00002056 <rand>:
    2056:	8d e4       	ldi	r24, 0x4D	; 77
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <do_rand>
    205e:	08 95       	ret

00002060 <srand>:
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	80 93 4d 01 	sts	0x014D, r24
    2068:	90 93 4e 01 	sts	0x014E, r25
    206c:	a0 93 4f 01 	sts	0x014F, r26
    2070:	b0 93 50 01 	sts	0x0150, r27
    2074:	08 95       	ret

00002076 <snprintf>:
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	2e 97       	sbiw	r28, 0x0e	; 14
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	0d 89       	ldd	r16, Y+21	; 0x15
    2090:	1e 89       	ldd	r17, Y+22	; 0x16
    2092:	8f 89       	ldd	r24, Y+23	; 0x17
    2094:	98 8d       	ldd	r25, Y+24	; 0x18
    2096:	26 e0       	ldi	r18, 0x06	; 6
    2098:	2c 83       	std	Y+4, r18	; 0x04
    209a:	1a 83       	std	Y+2, r17	; 0x02
    209c:	09 83       	std	Y+1, r16	; 0x01
    209e:	97 ff       	sbrs	r25, 7
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <snprintf+0x30>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e8       	ldi	r25, 0x80	; 128
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	9e 01       	movw	r18, r28
    20ae:	25 5e       	subi	r18, 0xE5	; 229
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	ce 01       	movw	r24, r28
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	69 8d       	ldd	r22, Y+25	; 0x19
    20b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ba:	a9 01       	movw	r20, r18
    20bc:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vfprintf>
    20c0:	4d 81       	ldd	r20, Y+5	; 0x05
    20c2:	5e 81       	ldd	r21, Y+6	; 0x06
    20c4:	57 fd       	sbrc	r21, 7
    20c6:	0a c0       	rjmp	.+20     	; 0x20dc <snprintf+0x66>
    20c8:	2f 81       	ldd	r18, Y+7	; 0x07
    20ca:	38 85       	ldd	r19, Y+8	; 0x08
    20cc:	42 17       	cp	r20, r18
    20ce:	53 07       	cpc	r21, r19
    20d0:	0c f4       	brge	.+2      	; 0x20d4 <snprintf+0x5e>
    20d2:	9a 01       	movw	r18, r20
    20d4:	02 0f       	add	r16, r18
    20d6:	13 1f       	adc	r17, r19
    20d8:	f8 01       	movw	r30, r16
    20da:	10 82       	st	Z, r1
    20dc:	2e 96       	adiw	r28, 0x0e	; 14
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	08 95       	ret

000020f2 <vfprintf>:
    20f2:	2f 92       	push	r2
    20f4:	3f 92       	push	r3
    20f6:	4f 92       	push	r4
    20f8:	5f 92       	push	r5
    20fa:	6f 92       	push	r6
    20fc:	7f 92       	push	r7
    20fe:	8f 92       	push	r8
    2100:	9f 92       	push	r9
    2102:	af 92       	push	r10
    2104:	bf 92       	push	r11
    2106:	cf 92       	push	r12
    2108:	df 92       	push	r13
    210a:	ef 92       	push	r14
    210c:	ff 92       	push	r15
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	2c 97       	sbiw	r28, 0x0c	; 12
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	6c 01       	movw	r12, r24
    2128:	1b 01       	movw	r2, r22
    212a:	8a 01       	movw	r16, r20
    212c:	fc 01       	movw	r30, r24
    212e:	17 82       	std	Z+7, r1	; 0x07
    2130:	16 82       	std	Z+6, r1	; 0x06
    2132:	83 81       	ldd	r24, Z+3	; 0x03
    2134:	81 ff       	sbrs	r24, 1
    2136:	d1 c1       	rjmp	.+930    	; 0x24da <vfprintf+0x3e8>
    2138:	2e 01       	movw	r4, r28
    213a:	08 94       	sec
    213c:	41 1c       	adc	r4, r1
    213e:	51 1c       	adc	r5, r1
    2140:	f6 01       	movw	r30, r12
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	f1 01       	movw	r30, r2
    2146:	93 fd       	sbrc	r25, 3
    2148:	85 91       	lpm	r24, Z+
    214a:	93 ff       	sbrs	r25, 3
    214c:	81 91       	ld	r24, Z+
    214e:	1f 01       	movw	r2, r30
    2150:	88 23       	and	r24, r24
    2152:	09 f4       	brne	.+2      	; 0x2156 <vfprintf+0x64>
    2154:	be c1       	rjmp	.+892    	; 0x24d2 <vfprintf+0x3e0>
    2156:	85 32       	cpi	r24, 0x25	; 37
    2158:	39 f4       	brne	.+14     	; 0x2168 <vfprintf+0x76>
    215a:	93 fd       	sbrc	r25, 3
    215c:	85 91       	lpm	r24, Z+
    215e:	93 ff       	sbrs	r25, 3
    2160:	81 91       	ld	r24, Z+
    2162:	1f 01       	movw	r2, r30
    2164:	85 32       	cpi	r24, 0x25	; 37
    2166:	29 f4       	brne	.+10     	; 0x2172 <vfprintf+0x80>
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	b6 01       	movw	r22, r12
    216c:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    2170:	e7 cf       	rjmp	.-50     	; 0x2140 <vfprintf+0x4e>
    2172:	ee 24       	eor	r14, r14
    2174:	ff 24       	eor	r15, r15
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	20 32       	cpi	r18, 0x20	; 32
    217a:	b0 f4       	brcc	.+44     	; 0x21a8 <vfprintf+0xb6>
    217c:	8b 32       	cpi	r24, 0x2B	; 43
    217e:	69 f0       	breq	.+26     	; 0x219a <vfprintf+0xa8>
    2180:	8c 32       	cpi	r24, 0x2C	; 44
    2182:	28 f4       	brcc	.+10     	; 0x218e <vfprintf+0x9c>
    2184:	80 32       	cpi	r24, 0x20	; 32
    2186:	51 f0       	breq	.+20     	; 0x219c <vfprintf+0xaa>
    2188:	83 32       	cpi	r24, 0x23	; 35
    218a:	71 f4       	brne	.+28     	; 0x21a8 <vfprintf+0xb6>
    218c:	0b c0       	rjmp	.+22     	; 0x21a4 <vfprintf+0xb2>
    218e:	8d 32       	cpi	r24, 0x2D	; 45
    2190:	39 f0       	breq	.+14     	; 0x21a0 <vfprintf+0xae>
    2192:	80 33       	cpi	r24, 0x30	; 48
    2194:	49 f4       	brne	.+18     	; 0x21a8 <vfprintf+0xb6>
    2196:	21 60       	ori	r18, 0x01	; 1
    2198:	2c c0       	rjmp	.+88     	; 0x21f2 <vfprintf+0x100>
    219a:	22 60       	ori	r18, 0x02	; 2
    219c:	24 60       	ori	r18, 0x04	; 4
    219e:	29 c0       	rjmp	.+82     	; 0x21f2 <vfprintf+0x100>
    21a0:	28 60       	ori	r18, 0x08	; 8
    21a2:	27 c0       	rjmp	.+78     	; 0x21f2 <vfprintf+0x100>
    21a4:	20 61       	ori	r18, 0x10	; 16
    21a6:	25 c0       	rjmp	.+74     	; 0x21f2 <vfprintf+0x100>
    21a8:	27 fd       	sbrc	r18, 7
    21aa:	2c c0       	rjmp	.+88     	; 0x2204 <vfprintf+0x112>
    21ac:	38 2f       	mov	r19, r24
    21ae:	30 53       	subi	r19, 0x30	; 48
    21b0:	3a 30       	cpi	r19, 0x0A	; 10
    21b2:	98 f4       	brcc	.+38     	; 0x21da <vfprintf+0xe8>
    21b4:	26 ff       	sbrs	r18, 6
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <vfprintf+0xd6>
    21b8:	8e 2d       	mov	r24, r14
    21ba:	88 0f       	add	r24, r24
    21bc:	e8 2e       	mov	r14, r24
    21be:	ee 0c       	add	r14, r14
    21c0:	ee 0c       	add	r14, r14
    21c2:	e8 0e       	add	r14, r24
    21c4:	e3 0e       	add	r14, r19
    21c6:	15 c0       	rjmp	.+42     	; 0x21f2 <vfprintf+0x100>
    21c8:	8f 2d       	mov	r24, r15
    21ca:	88 0f       	add	r24, r24
    21cc:	f8 2e       	mov	r15, r24
    21ce:	ff 0c       	add	r15, r15
    21d0:	ff 0c       	add	r15, r15
    21d2:	f8 0e       	add	r15, r24
    21d4:	f3 0e       	add	r15, r19
    21d6:	20 62       	ori	r18, 0x20	; 32
    21d8:	0c c0       	rjmp	.+24     	; 0x21f2 <vfprintf+0x100>
    21da:	8e 32       	cpi	r24, 0x2E	; 46
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <vfprintf+0xf4>
    21de:	26 fd       	sbrc	r18, 6
    21e0:	78 c1       	rjmp	.+752    	; 0x24d2 <vfprintf+0x3e0>
    21e2:	20 64       	ori	r18, 0x40	; 64
    21e4:	06 c0       	rjmp	.+12     	; 0x21f2 <vfprintf+0x100>
    21e6:	8c 36       	cpi	r24, 0x6C	; 108
    21e8:	11 f4       	brne	.+4      	; 0x21ee <vfprintf+0xfc>
    21ea:	20 68       	ori	r18, 0x80	; 128
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <vfprintf+0x100>
    21ee:	88 36       	cpi	r24, 0x68	; 104
    21f0:	49 f4       	brne	.+18     	; 0x2204 <vfprintf+0x112>
    21f2:	f1 01       	movw	r30, r2
    21f4:	93 fd       	sbrc	r25, 3
    21f6:	85 91       	lpm	r24, Z+
    21f8:	93 ff       	sbrs	r25, 3
    21fa:	81 91       	ld	r24, Z+
    21fc:	1f 01       	movw	r2, r30
    21fe:	88 23       	and	r24, r24
    2200:	09 f0       	breq	.+2      	; 0x2204 <vfprintf+0x112>
    2202:	ba cf       	rjmp	.-140    	; 0x2178 <vfprintf+0x86>
    2204:	98 2f       	mov	r25, r24
    2206:	95 54       	subi	r25, 0x45	; 69
    2208:	93 30       	cpi	r25, 0x03	; 3
    220a:	18 f0       	brcs	.+6      	; 0x2212 <vfprintf+0x120>
    220c:	90 52       	subi	r25, 0x20	; 32
    220e:	93 30       	cpi	r25, 0x03	; 3
    2210:	28 f4       	brcc	.+10     	; 0x221c <vfprintf+0x12a>
    2212:	0c 5f       	subi	r16, 0xFC	; 252
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	ff e3       	ldi	r31, 0x3F	; 63
    2218:	f9 83       	std	Y+1, r31	; 0x01
    221a:	0d c0       	rjmp	.+26     	; 0x2236 <vfprintf+0x144>
    221c:	83 36       	cpi	r24, 0x63	; 99
    221e:	31 f0       	breq	.+12     	; 0x222c <vfprintf+0x13a>
    2220:	83 37       	cpi	r24, 0x73	; 115
    2222:	71 f0       	breq	.+28     	; 0x2240 <vfprintf+0x14e>
    2224:	83 35       	cpi	r24, 0x53	; 83
    2226:	09 f0       	breq	.+2      	; 0x222a <vfprintf+0x138>
    2228:	60 c0       	rjmp	.+192    	; 0x22ea <vfprintf+0x1f8>
    222a:	22 c0       	rjmp	.+68     	; 0x2270 <vfprintf+0x17e>
    222c:	f8 01       	movw	r30, r16
    222e:	80 81       	ld	r24, Z
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	0e 5f       	subi	r16, 0xFE	; 254
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	42 01       	movw	r8, r4
    2238:	71 e0       	ldi	r23, 0x01	; 1
    223a:	a7 2e       	mov	r10, r23
    223c:	b1 2c       	mov	r11, r1
    223e:	16 c0       	rjmp	.+44     	; 0x226c <vfprintf+0x17a>
    2240:	62 e0       	ldi	r22, 0x02	; 2
    2242:	66 2e       	mov	r6, r22
    2244:	71 2c       	mov	r7, r1
    2246:	60 0e       	add	r6, r16
    2248:	71 1e       	adc	r7, r17
    224a:	f8 01       	movw	r30, r16
    224c:	80 80       	ld	r8, Z
    224e:	91 80       	ldd	r9, Z+1	; 0x01
    2250:	26 ff       	sbrs	r18, 6
    2252:	03 c0       	rjmp	.+6      	; 0x225a <vfprintf+0x168>
    2254:	6e 2d       	mov	r22, r14
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	02 c0       	rjmp	.+4      	; 0x225e <vfprintf+0x16c>
    225a:	6f ef       	ldi	r22, 0xFF	; 255
    225c:	7f ef       	ldi	r23, 0xFF	; 255
    225e:	c4 01       	movw	r24, r8
    2260:	2c 87       	std	Y+12, r18	; 0x0c
    2262:	0e 94 94 12 	call	0x2528	; 0x2528 <strnlen>
    2266:	5c 01       	movw	r10, r24
    2268:	83 01       	movw	r16, r6
    226a:	2c 85       	ldd	r18, Y+12	; 0x0c
    226c:	2f 77       	andi	r18, 0x7F	; 127
    226e:	17 c0       	rjmp	.+46     	; 0x229e <vfprintf+0x1ac>
    2270:	52 e0       	ldi	r21, 0x02	; 2
    2272:	65 2e       	mov	r6, r21
    2274:	71 2c       	mov	r7, r1
    2276:	60 0e       	add	r6, r16
    2278:	71 1e       	adc	r7, r17
    227a:	f8 01       	movw	r30, r16
    227c:	80 80       	ld	r8, Z
    227e:	91 80       	ldd	r9, Z+1	; 0x01
    2280:	26 ff       	sbrs	r18, 6
    2282:	03 c0       	rjmp	.+6      	; 0x228a <vfprintf+0x198>
    2284:	6e 2d       	mov	r22, r14
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	02 c0       	rjmp	.+4      	; 0x228e <vfprintf+0x19c>
    228a:	6f ef       	ldi	r22, 0xFF	; 255
    228c:	7f ef       	ldi	r23, 0xFF	; 255
    228e:	c4 01       	movw	r24, r8
    2290:	2c 87       	std	Y+12, r18	; 0x0c
    2292:	0e 94 89 12 	call	0x2512	; 0x2512 <strnlen_P>
    2296:	5c 01       	movw	r10, r24
    2298:	2c 85       	ldd	r18, Y+12	; 0x0c
    229a:	20 68       	ori	r18, 0x80	; 128
    229c:	83 01       	movw	r16, r6
    229e:	23 fd       	sbrc	r18, 3
    22a0:	20 c0       	rjmp	.+64     	; 0x22e2 <vfprintf+0x1f0>
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <vfprintf+0x1c2>
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	b6 01       	movw	r22, r12
    22aa:	2c 87       	std	Y+12, r18	; 0x0c
    22ac:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    22b0:	fa 94       	dec	r15
    22b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    22b4:	8f 2d       	mov	r24, r15
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a8 16       	cp	r10, r24
    22ba:	b9 06       	cpc	r11, r25
    22bc:	98 f3       	brcs	.-26     	; 0x22a4 <vfprintf+0x1b2>
    22be:	11 c0       	rjmp	.+34     	; 0x22e2 <vfprintf+0x1f0>
    22c0:	f4 01       	movw	r30, r8
    22c2:	27 fd       	sbrc	r18, 7
    22c4:	85 91       	lpm	r24, Z+
    22c6:	27 ff       	sbrs	r18, 7
    22c8:	81 91       	ld	r24, Z+
    22ca:	4f 01       	movw	r8, r30
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	b6 01       	movw	r22, r12
    22d0:	2c 87       	std	Y+12, r18	; 0x0c
    22d2:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    22d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    22d8:	f1 10       	cpse	r15, r1
    22da:	fa 94       	dec	r15
    22dc:	08 94       	sec
    22de:	a1 08       	sbc	r10, r1
    22e0:	b1 08       	sbc	r11, r1
    22e2:	a1 14       	cp	r10, r1
    22e4:	b1 04       	cpc	r11, r1
    22e6:	61 f7       	brne	.-40     	; 0x22c0 <vfprintf+0x1ce>
    22e8:	f1 c0       	rjmp	.+482    	; 0x24cc <vfprintf+0x3da>
    22ea:	84 36       	cpi	r24, 0x64	; 100
    22ec:	11 f0       	breq	.+4      	; 0x22f2 <vfprintf+0x200>
    22ee:	89 36       	cpi	r24, 0x69	; 105
    22f0:	49 f5       	brne	.+82     	; 0x2344 <vfprintf+0x252>
    22f2:	27 ff       	sbrs	r18, 7
    22f4:	08 c0       	rjmp	.+16     	; 0x2306 <vfprintf+0x214>
    22f6:	f8 01       	movw	r30, r16
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	0c 5f       	subi	r16, 0xFC	; 252
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <vfprintf+0x226>
    2306:	f8 01       	movw	r30, r16
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	88 27       	eor	r24, r24
    230e:	77 fd       	sbrc	r23, 7
    2310:	80 95       	com	r24
    2312:	98 2f       	mov	r25, r24
    2314:	0e 5f       	subi	r16, 0xFE	; 254
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	4f e6       	ldi	r20, 0x6F	; 111
    231a:	b4 2e       	mov	r11, r20
    231c:	b2 22       	and	r11, r18
    231e:	97 ff       	sbrs	r25, 7
    2320:	09 c0       	rjmp	.+18     	; 0x2334 <vfprintf+0x242>
    2322:	90 95       	com	r25
    2324:	80 95       	com	r24
    2326:	70 95       	com	r23
    2328:	61 95       	neg	r22
    232a:	7f 4f       	sbci	r23, 0xFF	; 255
    232c:	8f 4f       	sbci	r24, 0xFF	; 255
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	f0 e8       	ldi	r31, 0x80	; 128
    2332:	bf 2a       	or	r11, r31
    2334:	a2 01       	movw	r20, r4
    2336:	2a e0       	ldi	r18, 0x0A	; 10
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	0e 94 cb 12 	call	0x2596	; 0x2596 <__ultoa_invert>
    233e:	78 2e       	mov	r7, r24
    2340:	74 18       	sub	r7, r4
    2342:	45 c0       	rjmp	.+138    	; 0x23ce <vfprintf+0x2dc>
    2344:	85 37       	cpi	r24, 0x75	; 117
    2346:	31 f4       	brne	.+12     	; 0x2354 <vfprintf+0x262>
    2348:	3f ee       	ldi	r19, 0xEF	; 239
    234a:	b3 2e       	mov	r11, r19
    234c:	b2 22       	and	r11, r18
    234e:	2a e0       	ldi	r18, 0x0A	; 10
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	25 c0       	rjmp	.+74     	; 0x239e <vfprintf+0x2ac>
    2354:	99 ef       	ldi	r25, 0xF9	; 249
    2356:	b9 2e       	mov	r11, r25
    2358:	b2 22       	and	r11, r18
    235a:	8f 36       	cpi	r24, 0x6F	; 111
    235c:	c1 f0       	breq	.+48     	; 0x238e <vfprintf+0x29c>
    235e:	80 37       	cpi	r24, 0x70	; 112
    2360:	20 f4       	brcc	.+8      	; 0x236a <vfprintf+0x278>
    2362:	88 35       	cpi	r24, 0x58	; 88
    2364:	09 f0       	breq	.+2      	; 0x2368 <vfprintf+0x276>
    2366:	b5 c0       	rjmp	.+362    	; 0x24d2 <vfprintf+0x3e0>
    2368:	0d c0       	rjmp	.+26     	; 0x2384 <vfprintf+0x292>
    236a:	80 37       	cpi	r24, 0x70	; 112
    236c:	21 f0       	breq	.+8      	; 0x2376 <vfprintf+0x284>
    236e:	88 37       	cpi	r24, 0x78	; 120
    2370:	09 f0       	breq	.+2      	; 0x2374 <vfprintf+0x282>
    2372:	af c0       	rjmp	.+350    	; 0x24d2 <vfprintf+0x3e0>
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0x288>
    2376:	20 e1       	ldi	r18, 0x10	; 16
    2378:	b2 2a       	or	r11, r18
    237a:	b4 fe       	sbrs	r11, 4
    237c:	0b c0       	rjmp	.+22     	; 0x2394 <vfprintf+0x2a2>
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	b8 2a       	or	r11, r24
    2382:	08 c0       	rjmp	.+16     	; 0x2394 <vfprintf+0x2a2>
    2384:	b4 fe       	sbrs	r11, 4
    2386:	09 c0       	rjmp	.+18     	; 0x239a <vfprintf+0x2a8>
    2388:	e6 e0       	ldi	r30, 0x06	; 6
    238a:	be 2a       	or	r11, r30
    238c:	06 c0       	rjmp	.+12     	; 0x239a <vfprintf+0x2a8>
    238e:	28 e0       	ldi	r18, 0x08	; 8
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	05 c0       	rjmp	.+10     	; 0x239e <vfprintf+0x2ac>
    2394:	20 e1       	ldi	r18, 0x10	; 16
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	02 c0       	rjmp	.+4      	; 0x239e <vfprintf+0x2ac>
    239a:	20 e1       	ldi	r18, 0x10	; 16
    239c:	32 e0       	ldi	r19, 0x02	; 2
    239e:	b7 fe       	sbrs	r11, 7
    23a0:	08 c0       	rjmp	.+16     	; 0x23b2 <vfprintf+0x2c0>
    23a2:	f8 01       	movw	r30, r16
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	0c 5f       	subi	r16, 0xFC	; 252
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	07 c0       	rjmp	.+14     	; 0x23c0 <vfprintf+0x2ce>
    23b2:	f8 01       	movw	r30, r16
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 5f       	subi	r16, 0xFE	; 254
    23be:	1f 4f       	sbci	r17, 0xFF	; 255
    23c0:	a2 01       	movw	r20, r4
    23c2:	0e 94 cb 12 	call	0x2596	; 0x2596 <__ultoa_invert>
    23c6:	78 2e       	mov	r7, r24
    23c8:	74 18       	sub	r7, r4
    23ca:	ff e7       	ldi	r31, 0x7F	; 127
    23cc:	bf 22       	and	r11, r31
    23ce:	b6 fe       	sbrs	r11, 6
    23d0:	0b c0       	rjmp	.+22     	; 0x23e8 <vfprintf+0x2f6>
    23d2:	2e ef       	ldi	r18, 0xFE	; 254
    23d4:	b2 22       	and	r11, r18
    23d6:	7e 14       	cp	r7, r14
    23d8:	38 f4       	brcc	.+14     	; 0x23e8 <vfprintf+0x2f6>
    23da:	b4 fe       	sbrs	r11, 4
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <vfprintf+0x2fa>
    23de:	b2 fc       	sbrc	r11, 2
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <vfprintf+0x2fa>
    23e2:	8f ee       	ldi	r24, 0xEF	; 239
    23e4:	b8 22       	and	r11, r24
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <vfprintf+0x2fa>
    23e8:	a7 2c       	mov	r10, r7
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <vfprintf+0x2fc>
    23ec:	ae 2c       	mov	r10, r14
    23ee:	8b 2d       	mov	r24, r11
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	b4 fe       	sbrs	r11, 4
    23f4:	0d c0       	rjmp	.+26     	; 0x2410 <vfprintf+0x31e>
    23f6:	fe 01       	movw	r30, r28
    23f8:	e7 0d       	add	r30, r7
    23fa:	f1 1d       	adc	r31, r1
    23fc:	20 81       	ld	r18, Z
    23fe:	20 33       	cpi	r18, 0x30	; 48
    2400:	19 f4       	brne	.+6      	; 0x2408 <vfprintf+0x316>
    2402:	e9 ee       	ldi	r30, 0xE9	; 233
    2404:	be 22       	and	r11, r30
    2406:	09 c0       	rjmp	.+18     	; 0x241a <vfprintf+0x328>
    2408:	a3 94       	inc	r10
    240a:	b2 fe       	sbrs	r11, 2
    240c:	06 c0       	rjmp	.+12     	; 0x241a <vfprintf+0x328>
    240e:	04 c0       	rjmp	.+8      	; 0x2418 <vfprintf+0x326>
    2410:	86 78       	andi	r24, 0x86	; 134
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	09 f0       	breq	.+2      	; 0x241a <vfprintf+0x328>
    2418:	a3 94       	inc	r10
    241a:	8b 2c       	mov	r8, r11
    241c:	99 24       	eor	r9, r9
    241e:	b3 fc       	sbrc	r11, 3
    2420:	14 c0       	rjmp	.+40     	; 0x244a <vfprintf+0x358>
    2422:	b0 fe       	sbrs	r11, 0
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <vfprintf+0x352>
    2426:	af 14       	cp	r10, r15
    2428:	28 f4       	brcc	.+10     	; 0x2434 <vfprintf+0x342>
    242a:	e7 2c       	mov	r14, r7
    242c:	ef 0c       	add	r14, r15
    242e:	ea 18       	sub	r14, r10
    2430:	af 2c       	mov	r10, r15
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <vfprintf+0x352>
    2434:	e7 2c       	mov	r14, r7
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <vfprintf+0x352>
    2438:	80 e2       	ldi	r24, 0x20	; 32
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	b6 01       	movw	r22, r12
    243e:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    2442:	a3 94       	inc	r10
    2444:	af 14       	cp	r10, r15
    2446:	c0 f3       	brcs	.-16     	; 0x2438 <vfprintf+0x346>
    2448:	04 c0       	rjmp	.+8      	; 0x2452 <vfprintf+0x360>
    244a:	af 14       	cp	r10, r15
    244c:	10 f4       	brcc	.+4      	; 0x2452 <vfprintf+0x360>
    244e:	fa 18       	sub	r15, r10
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <vfprintf+0x362>
    2452:	ff 24       	eor	r15, r15
    2454:	84 fe       	sbrs	r8, 4
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <vfprintf+0x384>
    2458:	80 e3       	ldi	r24, 0x30	; 48
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	b6 01       	movw	r22, r12
    245e:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    2462:	82 fe       	sbrs	r8, 2
    2464:	1f c0       	rjmp	.+62     	; 0x24a4 <vfprintf+0x3b2>
    2466:	81 fe       	sbrs	r8, 1
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <vfprintf+0x37e>
    246a:	88 e5       	ldi	r24, 0x58	; 88
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <vfprintf+0x39e>
    2470:	88 e7       	ldi	r24, 0x78	; 120
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0d c0       	rjmp	.+26     	; 0x2490 <vfprintf+0x39e>
    2476:	c4 01       	movw	r24, r8
    2478:	86 78       	andi	r24, 0x86	; 134
    247a:	90 70       	andi	r25, 0x00	; 0
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	91 f0       	breq	.+36     	; 0x24a4 <vfprintf+0x3b2>
    2480:	81 fc       	sbrc	r8, 1
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <vfprintf+0x396>
    2484:	80 e2       	ldi	r24, 0x20	; 32
    2486:	01 c0       	rjmp	.+2      	; 0x248a <vfprintf+0x398>
    2488:	8b e2       	ldi	r24, 0x2B	; 43
    248a:	b7 fc       	sbrc	r11, 7
    248c:	8d e2       	ldi	r24, 0x2D	; 45
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	b6 01       	movw	r22, r12
    2492:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <vfprintf+0x3b2>
    2498:	80 e3       	ldi	r24, 0x30	; 48
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	b6 01       	movw	r22, r12
    249e:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    24a2:	ea 94       	dec	r14
    24a4:	7e 14       	cp	r7, r14
    24a6:	c0 f3       	brcs	.-16     	; 0x2498 <vfprintf+0x3a6>
    24a8:	7a 94       	dec	r7
    24aa:	f2 01       	movw	r30, r4
    24ac:	e7 0d       	add	r30, r7
    24ae:	f1 1d       	adc	r31, r1
    24b0:	80 81       	ld	r24, Z
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	b6 01       	movw	r22, r12
    24b6:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    24ba:	77 20       	and	r7, r7
    24bc:	a9 f7       	brne	.-22     	; 0x24a8 <vfprintf+0x3b6>
    24be:	06 c0       	rjmp	.+12     	; 0x24cc <vfprintf+0x3da>
    24c0:	80 e2       	ldi	r24, 0x20	; 32
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	b6 01       	movw	r22, r12
    24c6:	0e 94 9f 12 	call	0x253e	; 0x253e <fputc>
    24ca:	fa 94       	dec	r15
    24cc:	ff 20       	and	r15, r15
    24ce:	c1 f7       	brne	.-16     	; 0x24c0 <vfprintf+0x3ce>
    24d0:	37 ce       	rjmp	.-914    	; 0x2140 <vfprintf+0x4e>
    24d2:	f6 01       	movw	r30, r12
    24d4:	26 81       	ldd	r18, Z+6	; 0x06
    24d6:	37 81       	ldd	r19, Z+7	; 0x07
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <vfprintf+0x3ec>
    24da:	2f ef       	ldi	r18, 0xFF	; 255
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	c9 01       	movw	r24, r18
    24e0:	2c 96       	adiw	r28, 0x0c	; 12
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	ff 90       	pop	r15
    24f6:	ef 90       	pop	r14
    24f8:	df 90       	pop	r13
    24fa:	cf 90       	pop	r12
    24fc:	bf 90       	pop	r11
    24fe:	af 90       	pop	r10
    2500:	9f 90       	pop	r9
    2502:	8f 90       	pop	r8
    2504:	7f 90       	pop	r7
    2506:	6f 90       	pop	r6
    2508:	5f 90       	pop	r5
    250a:	4f 90       	pop	r4
    250c:	3f 90       	pop	r3
    250e:	2f 90       	pop	r2
    2510:	08 95       	ret

00002512 <strnlen_P>:
    2512:	fc 01       	movw	r30, r24
    2514:	05 90       	lpm	r0, Z+
    2516:	61 50       	subi	r22, 0x01	; 1
    2518:	70 40       	sbci	r23, 0x00	; 0
    251a:	01 10       	cpse	r0, r1
    251c:	d8 f7       	brcc	.-10     	; 0x2514 <strnlen_P+0x2>
    251e:	80 95       	com	r24
    2520:	90 95       	com	r25
    2522:	8e 0f       	add	r24, r30
    2524:	9f 1f       	adc	r25, r31
    2526:	08 95       	ret

00002528 <strnlen>:
    2528:	fc 01       	movw	r30, r24
    252a:	61 50       	subi	r22, 0x01	; 1
    252c:	70 40       	sbci	r23, 0x00	; 0
    252e:	01 90       	ld	r0, Z+
    2530:	01 10       	cpse	r0, r1
    2532:	d8 f7       	brcc	.-10     	; 0x252a <strnlen+0x2>
    2534:	80 95       	com	r24
    2536:	90 95       	com	r25
    2538:	8e 0f       	add	r24, r30
    253a:	9f 1f       	adc	r25, r31
    253c:	08 95       	ret

0000253e <fputc>:
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	8c 01       	movw	r16, r24
    2548:	eb 01       	movw	r28, r22
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	81 ff       	sbrs	r24, 1
    254e:	1b c0       	rjmp	.+54     	; 0x2586 <fputc+0x48>
    2550:	82 ff       	sbrs	r24, 2
    2552:	0d c0       	rjmp	.+26     	; 0x256e <fputc+0x30>
    2554:	2e 81       	ldd	r18, Y+6	; 0x06
    2556:	3f 81       	ldd	r19, Y+7	; 0x07
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	9d 81       	ldd	r25, Y+5	; 0x05
    255c:	28 17       	cp	r18, r24
    255e:	39 07       	cpc	r19, r25
    2560:	64 f4       	brge	.+24     	; 0x257a <fputc+0x3c>
    2562:	e8 81       	ld	r30, Y
    2564:	f9 81       	ldd	r31, Y+1	; 0x01
    2566:	01 93       	st	Z+, r16
    2568:	f9 83       	std	Y+1, r31	; 0x01
    256a:	e8 83       	st	Y, r30
    256c:	06 c0       	rjmp	.+12     	; 0x257a <fputc+0x3c>
    256e:	e8 85       	ldd	r30, Y+8	; 0x08
    2570:	f9 85       	ldd	r31, Y+9	; 0x09
    2572:	80 2f       	mov	r24, r16
    2574:	09 95       	icall
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	31 f4       	brne	.+12     	; 0x2586 <fputc+0x48>
    257a:	8e 81       	ldd	r24, Y+6	; 0x06
    257c:	9f 81       	ldd	r25, Y+7	; 0x07
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	9f 83       	std	Y+7, r25	; 0x07
    2582:	8e 83       	std	Y+6, r24	; 0x06
    2584:	02 c0       	rjmp	.+4      	; 0x258a <fputc+0x4c>
    2586:	0f ef       	ldi	r16, 0xFF	; 255
    2588:	1f ef       	ldi	r17, 0xFF	; 255
    258a:	c8 01       	movw	r24, r16
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	08 95       	ret

00002596 <__ultoa_invert>:
    2596:	fa 01       	movw	r30, r20
    2598:	aa 27       	eor	r26, r26
    259a:	28 30       	cpi	r18, 0x08	; 8
    259c:	51 f1       	breq	.+84     	; 0x25f2 <__ultoa_invert+0x5c>
    259e:	20 31       	cpi	r18, 0x10	; 16
    25a0:	81 f1       	breq	.+96     	; 0x2602 <__ultoa_invert+0x6c>
    25a2:	e8 94       	clt
    25a4:	6f 93       	push	r22
    25a6:	6e 7f       	andi	r22, 0xFE	; 254
    25a8:	6e 5f       	subi	r22, 0xFE	; 254
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	8f 4f       	sbci	r24, 0xFF	; 255
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	af 4f       	sbci	r26, 0xFF	; 255
    25b2:	b1 e0       	ldi	r27, 0x01	; 1
    25b4:	3e d0       	rcall	.+124    	; 0x2632 <__ultoa_invert+0x9c>
    25b6:	b4 e0       	ldi	r27, 0x04	; 4
    25b8:	3c d0       	rcall	.+120    	; 0x2632 <__ultoa_invert+0x9c>
    25ba:	67 0f       	add	r22, r23
    25bc:	78 1f       	adc	r23, r24
    25be:	89 1f       	adc	r24, r25
    25c0:	9a 1f       	adc	r25, r26
    25c2:	a1 1d       	adc	r26, r1
    25c4:	68 0f       	add	r22, r24
    25c6:	79 1f       	adc	r23, r25
    25c8:	8a 1f       	adc	r24, r26
    25ca:	91 1d       	adc	r25, r1
    25cc:	a1 1d       	adc	r26, r1
    25ce:	6a 0f       	add	r22, r26
    25d0:	71 1d       	adc	r23, r1
    25d2:	81 1d       	adc	r24, r1
    25d4:	91 1d       	adc	r25, r1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	20 d0       	rcall	.+64     	; 0x261a <__ultoa_invert+0x84>
    25da:	09 f4       	brne	.+2      	; 0x25de <__ultoa_invert+0x48>
    25dc:	68 94       	set
    25de:	3f 91       	pop	r19
    25e0:	2a e0       	ldi	r18, 0x0A	; 10
    25e2:	26 9f       	mul	r18, r22
    25e4:	11 24       	eor	r1, r1
    25e6:	30 19       	sub	r19, r0
    25e8:	30 5d       	subi	r19, 0xD0	; 208
    25ea:	31 93       	st	Z+, r19
    25ec:	de f6       	brtc	.-74     	; 0x25a4 <__ultoa_invert+0xe>
    25ee:	cf 01       	movw	r24, r30
    25f0:	08 95       	ret
    25f2:	46 2f       	mov	r20, r22
    25f4:	47 70       	andi	r20, 0x07	; 7
    25f6:	40 5d       	subi	r20, 0xD0	; 208
    25f8:	41 93       	st	Z+, r20
    25fa:	b3 e0       	ldi	r27, 0x03	; 3
    25fc:	0f d0       	rcall	.+30     	; 0x261c <__ultoa_invert+0x86>
    25fe:	c9 f7       	brne	.-14     	; 0x25f2 <__ultoa_invert+0x5c>
    2600:	f6 cf       	rjmp	.-20     	; 0x25ee <__ultoa_invert+0x58>
    2602:	46 2f       	mov	r20, r22
    2604:	4f 70       	andi	r20, 0x0F	; 15
    2606:	40 5d       	subi	r20, 0xD0	; 208
    2608:	4a 33       	cpi	r20, 0x3A	; 58
    260a:	18 f0       	brcs	.+6      	; 0x2612 <__ultoa_invert+0x7c>
    260c:	49 5d       	subi	r20, 0xD9	; 217
    260e:	31 fd       	sbrc	r19, 1
    2610:	40 52       	subi	r20, 0x20	; 32
    2612:	41 93       	st	Z+, r20
    2614:	02 d0       	rcall	.+4      	; 0x261a <__ultoa_invert+0x84>
    2616:	a9 f7       	brne	.-22     	; 0x2602 <__ultoa_invert+0x6c>
    2618:	ea cf       	rjmp	.-44     	; 0x25ee <__ultoa_invert+0x58>
    261a:	b4 e0       	ldi	r27, 0x04	; 4
    261c:	a6 95       	lsr	r26
    261e:	97 95       	ror	r25
    2620:	87 95       	ror	r24
    2622:	77 95       	ror	r23
    2624:	67 95       	ror	r22
    2626:	ba 95       	dec	r27
    2628:	c9 f7       	brne	.-14     	; 0x261c <__ultoa_invert+0x86>
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	61 05       	cpc	r22, r1
    262e:	71 05       	cpc	r23, r1
    2630:	08 95       	ret
    2632:	9b 01       	movw	r18, r22
    2634:	ac 01       	movw	r20, r24
    2636:	0a 2e       	mov	r0, r26
    2638:	06 94       	lsr	r0
    263a:	57 95       	ror	r21
    263c:	47 95       	ror	r20
    263e:	37 95       	ror	r19
    2640:	27 95       	ror	r18
    2642:	ba 95       	dec	r27
    2644:	c9 f7       	brne	.-14     	; 0x2638 <__ultoa_invert+0xa2>
    2646:	62 0f       	add	r22, r18
    2648:	73 1f       	adc	r23, r19
    264a:	84 1f       	adc	r24, r20
    264c:	95 1f       	adc	r25, r21
    264e:	a0 1d       	adc	r26, r0
    2650:	08 95       	ret

00002652 <__mulsi3>:
    2652:	62 9f       	mul	r22, r18
    2654:	d0 01       	movw	r26, r0
    2656:	73 9f       	mul	r23, r19
    2658:	f0 01       	movw	r30, r0
    265a:	82 9f       	mul	r24, r18
    265c:	e0 0d       	add	r30, r0
    265e:	f1 1d       	adc	r31, r1
    2660:	64 9f       	mul	r22, r20
    2662:	e0 0d       	add	r30, r0
    2664:	f1 1d       	adc	r31, r1
    2666:	92 9f       	mul	r25, r18
    2668:	f0 0d       	add	r31, r0
    266a:	83 9f       	mul	r24, r19
    266c:	f0 0d       	add	r31, r0
    266e:	74 9f       	mul	r23, r20
    2670:	f0 0d       	add	r31, r0
    2672:	65 9f       	mul	r22, r21
    2674:	f0 0d       	add	r31, r0
    2676:	99 27       	eor	r25, r25
    2678:	72 9f       	mul	r23, r18
    267a:	b0 0d       	add	r27, r0
    267c:	e1 1d       	adc	r30, r1
    267e:	f9 1f       	adc	r31, r25
    2680:	63 9f       	mul	r22, r19
    2682:	b0 0d       	add	r27, r0
    2684:	e1 1d       	adc	r30, r1
    2686:	f9 1f       	adc	r31, r25
    2688:	bd 01       	movw	r22, r26
    268a:	cf 01       	movw	r24, r30
    268c:	11 24       	eor	r1, r1
    268e:	08 95       	ret

00002690 <__divmodsi4>:
    2690:	97 fb       	bst	r25, 7
    2692:	09 2e       	mov	r0, r25
    2694:	05 26       	eor	r0, r21
    2696:	0e d0       	rcall	.+28     	; 0x26b4 <__divmodsi4_neg1>
    2698:	57 fd       	sbrc	r21, 7
    269a:	04 d0       	rcall	.+8      	; 0x26a4 <__divmodsi4_neg2>
    269c:	14 d0       	rcall	.+40     	; 0x26c6 <__udivmodsi4>
    269e:	0a d0       	rcall	.+20     	; 0x26b4 <__divmodsi4_neg1>
    26a0:	00 1c       	adc	r0, r0
    26a2:	38 f4       	brcc	.+14     	; 0x26b2 <__divmodsi4_exit>

000026a4 <__divmodsi4_neg2>:
    26a4:	50 95       	com	r21
    26a6:	40 95       	com	r20
    26a8:	30 95       	com	r19
    26aa:	21 95       	neg	r18
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	4f 4f       	sbci	r20, 0xFF	; 255
    26b0:	5f 4f       	sbci	r21, 0xFF	; 255

000026b2 <__divmodsi4_exit>:
    26b2:	08 95       	ret

000026b4 <__divmodsi4_neg1>:
    26b4:	f6 f7       	brtc	.-4      	; 0x26b2 <__divmodsi4_exit>
    26b6:	90 95       	com	r25
    26b8:	80 95       	com	r24
    26ba:	70 95       	com	r23
    26bc:	61 95       	neg	r22
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	8f 4f       	sbci	r24, 0xFF	; 255
    26c2:	9f 4f       	sbci	r25, 0xFF	; 255
    26c4:	08 95       	ret

000026c6 <__udivmodsi4>:
    26c6:	a1 e2       	ldi	r26, 0x21	; 33
    26c8:	1a 2e       	mov	r1, r26
    26ca:	aa 1b       	sub	r26, r26
    26cc:	bb 1b       	sub	r27, r27
    26ce:	fd 01       	movw	r30, r26
    26d0:	0d c0       	rjmp	.+26     	; 0x26ec <__udivmodsi4_ep>

000026d2 <__udivmodsi4_loop>:
    26d2:	aa 1f       	adc	r26, r26
    26d4:	bb 1f       	adc	r27, r27
    26d6:	ee 1f       	adc	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	a2 17       	cp	r26, r18
    26dc:	b3 07       	cpc	r27, r19
    26de:	e4 07       	cpc	r30, r20
    26e0:	f5 07       	cpc	r31, r21
    26e2:	20 f0       	brcs	.+8      	; 0x26ec <__udivmodsi4_ep>
    26e4:	a2 1b       	sub	r26, r18
    26e6:	b3 0b       	sbc	r27, r19
    26e8:	e4 0b       	sbc	r30, r20
    26ea:	f5 0b       	sbc	r31, r21

000026ec <__udivmodsi4_ep>:
    26ec:	66 1f       	adc	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	88 1f       	adc	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	1a 94       	dec	r1
    26f6:	69 f7       	brne	.-38     	; 0x26d2 <__udivmodsi4_loop>
    26f8:	60 95       	com	r22
    26fa:	70 95       	com	r23
    26fc:	80 95       	com	r24
    26fe:	90 95       	com	r25
    2700:	9b 01       	movw	r18, r22
    2702:	ac 01       	movw	r20, r24
    2704:	bd 01       	movw	r22, r26
    2706:	cf 01       	movw	r24, r30
    2708:	08 95       	ret

0000270a <_exit>:
    270a:	f8 94       	cli

0000270c <__stop_program>:
    270c:	ff cf       	rjmp	.-2      	; 0x270c <__stop_program>
